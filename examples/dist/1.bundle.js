/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nvar _interopRequire = __webpack_require__(2)[\"default\"];\n\nvar Bacon = _interopRequire(__webpack_require__(8));\n\nvar Tone = _interopRequire(__webpack_require__(7));\n\nvar _RM = __webpack_require__(1);\n\nvar Metronome = _RM.Metronome;\nvar Synth = _RM.Synth;\nvar Voice = _RM.Voice;\nvar Utils = _RM.Utils;\n\nvar U = Utils;\n\nvar m = new Metronome();\n\nvar v = [new Voice({ scale: \"minor\" }).log()];\n\nvar b = U.bus.pool(5);\nv[0].plug(Bacon.mergeAll(b));\n\nb[0].plug(m.first());\n\nb[1].plug(b[0].flatMap(U.time.hold(\"8n\")).map(U.note.add(1, 4, 5)).map(U.vel.add(0.3)));\n\nb[0].plug(b[1].flatMap(U.time.hold(\"8n\")).map(U.note.add(-2, -6)).map(U.vel.add(-0.3)));\n\n//b[4].plug(\n//b[2].flatMap(U.time.hold('8n'))\n//.map(U.note.add(1))\n//);\n\n//b[4].plug(\n//Bacon.mergeAll(\n//b[2].flatMap(U.time.hold('16n'))\n//.map(U.note.add(-1))\n//)\n//);\n\nb[2].plug(Bacon.mergeAll(b[1].flatMap(U.time.hold(\"8n\")).map(U.note.add(3)).map(U.vel.add(-0.3)), b[1].flatMap(U.time.hold(\"4n\")).map(U.note.add(3)).map(U.vel.add(-0.5))));\n\nTone.Transport.bpm.value = 140;\n\nsetTimeout(function () {\n  Tone.Transport.start();\n}, 500);\n\n/*****************\n ** WEBPACK FOOTER\n ** ./1.js\n ** module id = 0\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./1.js?");

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nvar _interopRequire = __webpack_require__(2)[\"default\"];\n\nvar Utils = _interopRequire(__webpack_require__(3));\n\nvar Metronome = _interopRequire(__webpack_require__(4));\n\nvar Voice = _interopRequire(__webpack_require__(5));\n\nvar Synth = _interopRequire(__webpack_require__(6));\n\nmodule.exports = {\n  Utils: Utils, Metronome: Metronome, Voice: Voice, Synth: Synth\n};\n\n/*****************\n ** WEBPACK FOOTER\n ** ../src/index.js\n ** module id = 1\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///../src/index.js?");

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nexports[\"default\"] = function (obj) {\n  return obj && obj.__esModule ? obj[\"default\"] : obj;\n};\n\nexports.__esModule = true;\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/babel-runtime/helpers/interop-require.js\n ** module id = 2\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///../~/babel-runtime/helpers/interop-require.js?");

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nvar _core = __webpack_require__(9)[\"default\"];\n\nvar _interopRequire = __webpack_require__(2)[\"default\"];\n\nvar Bacon = _interopRequire(__webpack_require__(8));\n\nvar Tone = _interopRequire(__webpack_require__(7));\n\nvar tone = new Tone();\n\nfunction transportDelay(delay) {\n  return Bacon.fromBinder(function (sink) {\n    sink(true);\n\n    Tone.Transport.setTimeout(function () {\n      sink(false);\n      sink(new Bacon.End());\n    }, delay);\n  });\n}\n\nfunction clone(event) {\n  return _core.Object.assign({}, event);\n}\n\nexports.bus = {\n  pool: function pool() {\n    var n = arguments[0] === undefined ? 5 : arguments[0];\n\n    var buses = [];\n\n    for (var i = 0; i < n; i++) {\n      buses.push(new Bacon.Bus());\n    }\n\n    return buses;\n  }\n};\n\nexports.time = {\n  add: (function (_add) {\n    var _addWrapper = function add(_x) {\n      return _add.apply(this, arguments);\n    };\n\n    _addWrapper.toString = function () {\n      return _add.toString();\n    };\n\n    return _addWrapper;\n  })(function (add) {\n    return function (event) {\n      var result = clone(event);\n      result.time += tone.notationToSeconds(add);\n      return result;\n    };\n  }),\n\n  hold: function hold(duration) {\n    var _this = this;\n\n    return function (event) {\n      return Bacon.once(event).map(_this.add(duration)).delay(0).holdWhen(transportDelay(duration));\n    };\n  }\n};\n\nexports.note = {\n  add: function add() {\n    for (var _len = arguments.length, addable = Array(_len), _key = 0; _key < _len; _key++) {\n      addable[_key] = arguments[_key];\n    }\n\n    var tick = 0;\n\n    return function (event) {\n      var add = addable[tick++ % addable.length];\n\n      var result = clone(event);\n      result.note = Math.max(0, result.note + add);\n      return result;\n    };\n  },\n\n  set: function set(note) {\n    return function (event) {\n      var result = clone(event);\n      result.note = note;\n      return result;\n    };\n  },\n\n  stack: function stack() {\n    var _this = this;\n\n    for (var _len = arguments.length, notes = Array(_len), _key = 0; _key < _len; _key++) {\n      notes[_key] = arguments[_key];\n    }\n\n    return function (event) {\n      return Bacon.fromArray(notes).flatMap(function (note) {\n        return Bacon.once(event).map(_this.add(note));\n      });\n    };\n  }\n};\n\nexports.vel = {\n  add: function add(x) {\n    return function (event) {\n      var result = clone(event);\n      result.vel += x;\n\n      return result;\n    };\n  },\n\n  multiply: function multiply(x) {\n    return function (event) {\n      var result = clone(event);\n      result.vel *= x;\n\n      return result;\n    };\n  }\n};\n\n/*****************\n ** WEBPACK FOOTER\n ** ../src/Utils.js\n ** module id = 3\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///../src/Utils.js?");

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nvar _classCallCheck = __webpack_require__(10)[\"default\"];\n\nvar _interopRequire = __webpack_require__(2)[\"default\"];\n\nvar Bacon = _interopRequire(__webpack_require__(8));\n\nvar Tone = _interopRequire(__webpack_require__(7));\n\nvar Metronome = function Metronome() {\n  var _ref = arguments[0] === undefined ? {} : arguments[0];\n\n  var _ref$div = _ref.div;\n  var div = _ref$div === undefined ? \"4n\" : _ref$div;\n  var _ref$note = _ref.note;\n  var note = _ref$note === undefined ? 12 : _ref$note;\n  var _ref$dur = _ref.dur;\n  var dur = _ref$dur === undefined ? \"64n\" : _ref$dur;\n  var _ref$vel = _ref.vel;\n  var vel = _ref$vel === undefined ? 1 : _ref$vel;\n\n  _classCallCheck(this, Metronome);\n\n  return Bacon.fromBinder(function (sink) {\n    Tone.Transport.setInterval(function (time) {\n      sink({ time: time, note: note, dur: dur, vel: vel });\n    }, div);\n  });\n};\n\nmodule.exports = Metronome;\n\n/*****************\n ** WEBPACK FOOTER\n ** ../src/Metronome.js\n ** module id = 4\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///../src/Metronome.js?");

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nvar _classCallCheck = __webpack_require__(10)[\"default\"];\n\nvar _createClass = __webpack_require__(11)[\"default\"];\n\nvar _interopRequire = __webpack_require__(2)[\"default\"];\n\nvar Teoria = _interopRequire(__webpack_require__(15));\n\nvar Bacon = _interopRequire(__webpack_require__(8));\n\nvar Synth = _interopRequire(__webpack_require__(6));\n\nvar VoiceGroup = (function () {\n  function VoiceGroup() {\n    var _ref = arguments[0] === undefined ? {} : arguments[0];\n\n    var _ref$root = _ref.root;\n    var root = _ref$root === undefined ? \"c3\" : _ref$root;\n    var _ref$scale = _ref.scale;\n    var scale = _ref$scale === undefined ? \"major\" : _ref$scale;\n\n    _classCallCheck(this, VoiceGroup);\n\n    this.bus = new Bacon.Bus();\n    this.synth = new Synth();\n    this.root = Teoria.note(root);\n    this.scale = this.root.scale(scale);\n\n    this.bus.onValue(this.handleValue.bind(this));\n\n    return this.bus;\n  }\n\n  _createClass(VoiceGroup, {\n    handleValue: {\n      value: function handleValue(_ref) {\n        var note = _ref.note;\n        var _ref$dur = _ref.dur;\n        var dur = _ref$dur === undefined ? \"32n\" : _ref$dur;\n        var time = _ref.time;\n        var vel = _ref.vel;\n\n        this.synth.triggerAttackRelease(this.convertNote(note), dur, time, Math.min(Math.abs(vel), 1));\n      }\n    },\n    convertNote: {\n      value: function convertNote(note) {\n        var downward = note < 0;\n        var sign = downward ? -1 : 1;\n\n        var scaleLength = this.scale.scale.length;\n\n        var octave = this.root.octave() + Math.floor(note / scaleLength);\n        var position = note % scaleLength + 1;\n\n        var noteName = this.scale.get(position).toString(true) + octave;\n\n        return noteName;\n      }\n    }\n  });\n\n  return VoiceGroup;\n})();\n\nmodule.exports = VoiceGroup;\n\n/*****************\n ** WEBPACK FOOTER\n ** ../src/VoiceGroup.js\n ** module id = 5\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///../src/VoiceGroup.js?");

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nvar _classCallCheck = __webpack_require__(10)[\"default\"];\n\nvar _interopRequire = __webpack_require__(2)[\"default\"];\n\nvar Tone = _interopRequire(__webpack_require__(7));\n\nvar Synth = function Synth() {\n  _classCallCheck(this, Synth);\n\n  this.synth = new Tone.PolySynth(6, Tone.MonoSynth);\n  this.synth.set({\n    filterEnvelope: {\n      min: 20000,\n      max: 20000\n    },\n    filter: {\n      type: \"allpass\"\n    },\n    oscillator: {\n      type: \"triangle\"\n    }\n  });\n\n  this.synth.toMaster();\n  return this.synth;\n};\n\nmodule.exports = Synth;\n\n/*****************\n ** WEBPACK FOOTER\n ** ../src/Synth.js\n ** module id = 6\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///../src/Synth.js?");

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root) {\n\t\"use strict\";\n\tvar Tone;\n\t//constructs the main Tone object\n\tfunction MainModule(func){\n\t\tTone = func();\n\t}\n\t//invokes each of the modules with the main Tone object as the argument\n\tfunction ToneModule(func){\n\t\tfunc(Tone);\n\t}\n\n\t/**\n\t *  Tone.js\n\t *  @author Yotam Mann\n\t *  @license http://opensource.org/licenses/MIT MIT License\n\t *  @copyright 2014-2015 Yotam Mann\n\t */\n\tMainModule(function(){\n\n\t\t\n\n\t\t//////////////////////////////////////////////////////////////////////////\n\t\t//\tWEB AUDIO CONTEXT\n\t\t///////////////////////////////////////////////////////////////////////////\n\n\t\t//borrowed from underscore.js\n\t\tfunction isUndef(val){\n\t\t\treturn val === void 0;\n\t\t}\n\n\t\t//borrowed from underscore.js\n\t\tfunction isFunction(val){\n\t\t\treturn typeof val === \"function\";\n\t\t}\n\n\t\tvar audioContext;\n\n\t\t//polyfill for AudioContext and OfflineAudioContext\n\t\tif (isUndef(window.AudioContext)){\n\t\t\twindow.AudioContext = window.webkitAudioContext;\n\t\t} \n\t\tif (isUndef(window.OfflineAudioContext)){\n\t\t\twindow.OfflineAudioContext = window.webkitOfflineAudioContext;\n\t\t} \n\n\t\tif (!isUndef(AudioContext)){\n\t\t\taudioContext = new AudioContext();\n\t\t} else {\n\t\t\tthrow new Error(\"Web Audio is not supported in this browser\");\n\t\t}\n\n\t\t//SHIMS////////////////////////////////////////////////////////////////////\n\n\t\tif (!isFunction(AudioContext.prototype.createGain)){\n\t\t\tAudioContext.prototype.createGain = AudioContext.prototype.createGainNode;\n\t\t}\n\t\tif (!isFunction(AudioContext.prototype.createDelay)){\n\t\t\tAudioContext.prototype.createDelay = AudioContext.prototype.createDelayNode;\n\t\t}\n\t\tif (!isFunction(AudioContext.prototype.createPeriodicWave)){\n\t\t\tAudioContext.prototype.createPeriodicWave = AudioContext.prototype.createWaveTable;\n\t\t}\n\t\tif (!isFunction(AudioBufferSourceNode.prototype.start)){\n\t\t\tAudioBufferSourceNode.prototype.start = AudioBufferSourceNode.prototype.noteGrainOn;\n\t\t}\n\t\tif (!isFunction(AudioBufferSourceNode.prototype.stop)){\n\t\t\tAudioBufferSourceNode.prototype.stop = AudioBufferSourceNode.prototype.noteOff;\n\t\t}\n\t\tif (!isFunction(OscillatorNode.prototype.start)){\n\t\t\tOscillatorNode.prototype.start = OscillatorNode.prototype.noteOn;\n\t\t}\n\t\tif (!isFunction(OscillatorNode.prototype.stop)){\n\t\t\tOscillatorNode.prototype.stop = OscillatorNode.prototype.noteOff;\t\n\t\t}\n\t\tif (!isFunction(OscillatorNode.prototype.setPeriodicWave)){\n\t\t\tOscillatorNode.prototype.setPeriodicWave = OscillatorNode.prototype.setWaveTable;\t\n\t\t}\n\t\t//extend the connect function to include Tones\n\t\tAudioNode.prototype._nativeConnect = AudioNode.prototype.connect;\n\t\tAudioNode.prototype.connect = function(B, outNum, inNum){\n\t\t\tif (B.input){\n\t\t\t\tif (Array.isArray(B.input)){\n\t\t\t\t\tif (isUndef(inNum)){\n\t\t\t\t\t\tinNum = 0;\n\t\t\t\t\t}\n\t\t\t\t\tthis.connect(B.input[inNum]);\n\t\t\t\t} else {\n\t\t\t\t\tthis.connect(B.input, outNum, inNum);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tif (B instanceof AudioNode){\n\t\t\t\t\t\tthis._nativeConnect(B, outNum, inNum);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._nativeConnect(B, outNum);\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow new Error(\"error connecting to node: \"+B);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t///////////////////////////////////////////////////////////////////////////\n\t\t//\tTONE\n\t\t///////////////////////////////////////////////////////////////////////////\n\n\t\t/**\n\t\t *  @class  Tone is the base class of all other classes.  \n\t\t *  \n\t\t *  @constructor\n\t\t *  @alias Tone\n\t\t *  @param {number} [inputs=1] the number of input nodes\n\t\t *  @param {number} [outputs=1] the number of output nodes\n\t\t */\n\t\tvar Tone = function(inputs, outputs){\n\n\t\t\t/**\n\t\t\t *  the input node(s)\n\t\t\t *  @type {GainNode|Array}\n\t\t\t */\n\t\t\tif (isUndef(inputs) || inputs === 1){\n\t\t\t\tthis.input = this.context.createGain();\n\t\t\t} else if (inputs > 1){\n\t\t\t\tthis.input = new Array(inputs);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t *  the output node(s)\n\t\t\t *  @type {GainNode|Array}\n\t\t\t */\n\t\t\tif (isUndef(outputs) || outputs === 1){\n\t\t\t\tthis.output = this.context.createGain();\n\t\t\t} else if (outputs > 1){\n\t\t\t\tthis.output = new Array(inputs);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t *  Set the parameters at once. Either pass in an\n\t\t *  object mapping parameters to values, or to set a\n\t\t *  single parameter, by passing in a string and value.\n\t\t *  @example\n\t\t *  //set values using an object\n\t\t *  filter.set({\n\t\t *  \t\"frequency\" : 300,\n\t\t *  \t\"type\" : highpass\n\t\t *  });\n\t\t *  //or\n\t\t *  filter.set(\"type\", \"highpass\");\n\t\t *  //ramp to the value 220 over 3 seconds. \n\t\t *  oscillator.set({\n\t\t *  \t\"frequency\" : 220\n\t\t *  }, 3);\n\t\t *  @param {Object|string} params\n\t\t *  @param {number=} value\n\t\t *  @param {Tone.Time=} rampTime\n\t\t *  @returns {Tone} `this`\n\t\t */\n\t\tTone.prototype.set = function(params, value, rampTime){\n\t\t\tif (typeof params === \"object\"){\n\t\t\t\trampTime = value;\n\t\t\t} else if (typeof params === \"string\"){\n\t\t\t\tvar tmpObj = {};\n\t\t\t\ttmpObj[params] = value;\n\t\t\t\tparams = tmpObj;\n\t\t\t}\n\t\t\tfor (var attr in params){\n\t\t\t\tvar param = this[attr];\n\t\t\t\tif (isUndef(param)){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tvalue = params[attr];\n\t\t\t\tif (param instanceof Tone.Signal){\n\t\t\t\t\tif (param.value !== value){\n\t\t\t\t\t\tif (isUndef(rampTime)){\n\t\t\t\t\t\t\tparam.value = value;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tparam.rampTo(value, rampTime);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (param instanceof AudioParam){\n\t\t\t\t\tif (param.value !== value){\n\t\t\t\t\t\tparam.value = value;\n\t\t\t\t\t}\t\t\t\t\n\t\t\t\t} else if (param instanceof Tone){\n\t\t\t\t\tparam.set(value);\n\t\t\t\t} else if (param !== value){\n\t\t\t\t\tthis[attr] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  Get the object's attributes. \n\t\t *  @example\n\t\t *  osc.get();\n\t\t *  //returns {\"type\" : \"sine\", \"frequency\" : 440, ...etc}\n\t\t *  osc.get(\"type\"); //returns { \"type\" : \"sine\"}\n\t\t *  @param {Array=} params the parameters to get, otherwise will return \n\t\t *  \t\t\t\t\t   all available.r\n\t\t */\n\t\tTone.prototype.get = function(params){\n\t\t\tif (isUndef(params)){\n\t\t\t\tparams = this._collectDefaults(this.constructor);\n\t\t\t}\n\t\t\tvar ret = {};\n\t\t\tfor (var i = 0; i < params.length; i++){\n\t\t\t\tvar attr = params[i];\n\t\t\t\tvar param = this[attr];\n\t\t\t\tif (param instanceof Tone.Signal){\n\t\t\t\t\tret[attr] = param.value;\n\t\t\t\t} else if (param instanceof AudioParam){\n\t\t\t\t\tret[attr] = param.value;\n\t\t\t\t} else if (param instanceof Tone){\n\t\t\t\t\tret[attr] = param.get();\n\t\t\t\t} else if (!isFunction(param) && !isUndef(param)){\n\t\t\t\t\tret[attr] = param;\n\t\t\t\t} \n\t\t\t}\n\t\t\treturn ret;\n\t\t};\n\n\t\t/**\n\t\t *  collect all of the default attributes in one\n\t\t *  @private\n\t\t *  @param {function} constr the constructor to find the defaults from\n\t\t *  @return {Array} all of the attributes which belong to the class\n\t\t */\n\t\tTone.prototype._collectDefaults = function(constr){\n\t\t\tvar ret = [];\n\t\t\tif (!isUndef(constr.defaults)){\n\t\t\t\tret = Object.keys(constr.defaults);\n\t\t\t}\n\t\t\tif (!isUndef(constr._super)){\n\t\t\t\tret = ret.concat(this._collectDefaults(constr._super));\n\t\t\t}\n\t\t\treturn ret;\n\t\t};\n\n\t\t/**\n\t\t *  Set the preset if it exists. \n\t\t *  @param {string} presetName the name of the preset\n\t\t *  @returns {Tone} `this`\n\t\t */\n\t\tTone.prototype.setPreset = function(presetName){\n\t\t\tif (!this.isUndef(this.preset) && this.preset.hasOwnProperty(presetName)){\n\t\t\t\tthis.set(this.preset[presetName]);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\t///////////////////////////////////////////////////////////////////////////\n\t\t//\tCLASS VARS\n\t\t///////////////////////////////////////////////////////////////////////////\n\n\t\t/**\n\t\t *  A static pointer to the audio context accessible as `Tone.context`. \n\t\t *  @type {AudioContext}\n\t\t */\n\t\tTone.context = audioContext;\n\n\t\t/**\n\t\t *  The audio context.\n\t\t *  @type {AudioContext}\n\t\t */\n\t\tTone.prototype.context = Tone.context;\n\n\t\t/**\n\t\t *  the default buffer size\n\t\t *  @type {number}\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t\tTone.prototype.bufferSize = 2048;\n\n\t\t/**\n\t\t *  the delay time of a single buffer frame\n\t\t *  @type {number}\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t\tTone.prototype.bufferTime = Tone.prototype.bufferSize / Tone.context.sampleRate;\n\t\t\n\t\t///////////////////////////////////////////////////////////////////////////\n\t\t//\tCONNECTIONS\n\t\t///////////////////////////////////////////////////////////////////////////\n\n\t\t/**\n\t\t *  disconnect and dispose\n\t\t *  @returns {Tone} `this`\n\t\t */\n\t\tTone.prototype.dispose = function(){\n\t\t\tif (!this.isUndef(this.input)){\n\t\t\t\tif (this.input instanceof AudioNode){\n\t\t\t\t\tthis.input.disconnect();\n\t\t\t\t} \n\t\t\t\tthis.input = null;\n\t\t\t}\n\t\t\tif (!this.isUndef(this.output)){\n\t\t\t\tif (this.output instanceof AudioNode){\n\t\t\t\t\tthis.output.disconnect();\n\t\t\t\t} \n\t\t\t\tthis.output = null;\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  a silent connection to the DesinationNode\n\t\t *  which will ensure that anything connected to it\n\t\t *  will not be garbage collected\n\t\t *  \n\t\t *  @private\n\t\t */\n\t\tvar _silentNode = null;\n\n\t\t/**\n\t\t *  makes a connection to ensure that the node will not be garbage collected\n\t\t *  until 'dispose' is explicitly called\n\t\t *\n\t\t *  use carefully. circumvents JS and WebAudio's normal Garbage Collection behavior\n\t\t *  @returns {Tone} `this`\n\t\t */\n\t\tTone.prototype.noGC = function(){\n\t\t\tthis.output.connect(_silentNode);\n\t\t\treturn this;\n\t\t};\n\n\t\tAudioNode.prototype.noGC = function(){\n\t\t\tthis.connect(_silentNode);\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  connect the output of a ToneNode to an AudioParam, AudioNode, or ToneNode\n\t\t *  @param  {Tone | AudioParam | AudioNode} unit \n\t\t *  @param {number} [outputNum=0] optionally which output to connect from\n\t\t *  @param {number} [inputNum=0] optionally which input to connect to\n\t\t *  @returns {Tone} `this`\n\t\t */\n\t\tTone.prototype.connect = function(unit, outputNum, inputNum){\n\t\t\tif (Array.isArray(this.output)){\n\t\t\t\toutputNum = this.defaultArg(outputNum, 0);\n\t\t\t\tthis.output[outputNum].connect(unit, 0, inputNum);\n\t\t\t} else {\n\t\t\t\tthis.output.connect(unit, outputNum, inputNum);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  disconnect the output\n\t\t *  @returns {Tone} `this`\n\t\t */\n\t\tTone.prototype.disconnect = function(outputNum){\n\t\t\tif (Array.isArray(this.output)){\n\t\t\t\toutputNum = this.defaultArg(outputNum, 0);\n\t\t\t\tthis.output[outputNum].disconnect();\n\t\t\t} else {\n\t\t\t\tthis.output.disconnect();\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  connect together all of the arguments in series\n\t\t *  @param {...AudioParam|Tone|AudioNode}\n\t\t *  @returns {Tone} `this`\n\t\t */\n\t\tTone.prototype.connectSeries = function(){\n\t\t\tif (arguments.length > 1){\n\t\t\t\tvar currentUnit = arguments[0];\n\t\t\t\tfor (var i = 1; i < arguments.length; i++){\n\t\t\t\t\tvar toUnit = arguments[i];\n\t\t\t\t\tcurrentUnit.connect(toUnit);\n\t\t\t\t\tcurrentUnit = toUnit;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  fan out the connection from the first argument to the rest of the arguments\n\t\t *  @param {...AudioParam|Tone|AudioNode}\n\t\t *  @returns {Tone} `this`\n\t\t */\n\t\tTone.prototype.connectParallel = function(){\n\t\t\tvar connectFrom = arguments[0];\n\t\t\tif (arguments.length > 1){\n\t\t\t\tfor (var i = 1; i < arguments.length; i++){\n\t\t\t\t\tvar connectTo = arguments[i];\n\t\t\t\t\tconnectFrom.connect(connectTo);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  Connect the output of this node to the rest of the nodes in series.\n\t\t *  @example\n\t\t *  //connect a node to an effect, panVol and then to the master output\n\t\t *  node.chain(effect, panVol, Tone.Master);\n\t\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t\t *  @returns {Tone} `this`\n\t\t */\n\t\tTone.prototype.chain = function(){\n\t\t\tif (arguments.length > 0){\n\t\t\t\tvar currentUnit = this;\n\t\t\t\tfor (var i = 0; i < arguments.length; i++){\n\t\t\t\t\tvar toUnit = arguments[i];\n\t\t\t\t\tcurrentUnit.connect(toUnit);\n\t\t\t\t\tcurrentUnit = toUnit;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  connect the output of this node to the rest of the nodes in parallel.\n\t\t *  @param {...AudioParam|Tone|AudioNode}\n\t\t *  @returns {Tone} `this`\n\t\t */\n\t\tTone.prototype.fan = function(){\n\t\t\tif (arguments.length > 0){\n\t\t\t\tfor (var i = 0; i < arguments.length; i++){\n\t\t\t\t\tthis.connect(arguments[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\t//give native nodes chain and fan methods\n\t\tAudioNode.prototype.chain = Tone.prototype.chain;\n\t\tAudioNode.prototype.fan = Tone.prototype.fan;\n\n\t\t///////////////////////////////////////////////////////////////////////////\n\t\t//\tUTILITIES / HELPERS / MATHS\n\t\t///////////////////////////////////////////////////////////////////////////\n\n\t\t/**\n\t\t *  if a the given is undefined, use the fallback. \n\t\t *  if both given and fallback are objects, given\n\t\t *  will be augmented with whatever properties it's\n\t\t *  missing which are in fallback\n\t\t *\n\t\t *  warning: if object is self referential, it will go into an an \n\t\t *  infinite recursive loop. \n\t\t *  \n\t\t *  @param  {*} given    \n\t\t *  @param  {*} fallback \n\t\t *  @return {*}          \n\t\t */\n\t\tTone.prototype.defaultArg = function(given, fallback){\n\t\t\tif (typeof given === \"object\" && typeof fallback === \"object\"){\n\t\t\t\tvar ret = {};\n\t\t\t\t//make a deep copy of the given object\n\t\t\t\tfor (var givenProp in given) {\n\t\t\t\t\tret[givenProp] = this.defaultArg(given[givenProp], given[givenProp]);\n\t\t\t\t}\n\t\t\t\tfor (var prop in fallback) {\n\t\t\t\t\tret[prop] = this.defaultArg(given[prop], fallback[prop]);\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t} else {\n\t\t\t\treturn isUndef(given) ? fallback : given;\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t *  returns the args as an options object with given arguments\n\t\t *  mapped to the names provided. \n\t\t *\n\t\t *  if the args given is an array containing an object, it is assumed\n\t\t *  that that's already the options object and will just return it. \n\t\t *  \n\t\t *  @param  {Array} values  the 'arguments' object of the function\n\t\t *  @param  {Array.<string>} keys the names of the arguments as they\n\t\t *                                 should appear in the options object\n\t\t *  @param {Object=} defaults optional defaults to mixin to the returned \n\t\t *                            options object                              \n\t\t *  @return {Object}       the options object with the names mapped to the arguments\n\t\t */\n\t\tTone.prototype.optionsObject = function(values, keys, defaults){\n\t\t\tvar options = {};\n\t\t\tif (values.length === 1 && typeof values[0] === \"object\"){\n\t\t\t\toptions = values[0];\n\t\t\t} else {\n\t\t\t\tfor (var i = 0; i < keys.length; i++){\n\t\t\t\t\toptions[keys[i]] = values[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!this.isUndef(defaults)){\n\t\t\t\treturn this.defaultArg(options, defaults);\n\t\t\t} else {\n\t\t\t\treturn options;\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t *  test if the arg is undefined\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is undefined\n\t\t *  @function\n\t\t */\n\t\tTone.prototype.isUndef = isUndef;\n\n\t\t/**\n\t\t *  test if the arg is a function\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a function\n\t\t *  @function\n\t\t */\n\t\tTone.prototype.isFunction = isFunction;\n\n\t\t/**\n\t\t *  interpolate the input value (0-1) to be between outputMin and outputMax\n\t\t *  @param  {number} input     \n\t\t *  @param  {number} outputMin \n\t\t *  @param  {number} outputMax \n\t\t *  @return {number}           \n\t\t */\n\t\tTone.prototype.interpolate = function(input, outputMin, outputMax){\n\t\t\treturn input*(outputMax - outputMin) + outputMin;\n\t\t};\n\n\t\t/**\n\t\t *  normalize the input to 0-1 from between inputMin to inputMax\n\t\t *  @param  {number} input    \n\t\t *  @param  {number} inputMin \n\t\t *  @param  {number} inputMax \n\t\t *  @return {number}          \n\t\t */\n\t\tTone.prototype.normalize = function(input, inputMin, inputMax){\n\t\t\t//make sure that min < max\n\t\t\tif (inputMin > inputMax){\n\t\t\t\tvar tmp = inputMax;\n\t\t\t\tinputMax = inputMin;\n\t\t\t\tinputMin = tmp;\n\t\t\t} else if (inputMin == inputMax){\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\treturn (input - inputMin) / (inputMax - inputMin);\n\t\t};\n\n\t\t///////////////////////////////////////////////////////////////////////////\n\t\t// GAIN CONVERSIONS\n\t\t///////////////////////////////////////////////////////////////////////////\n\n\t\t/**\n\t\t *  equal power gain scale\n\t\t *  good for cross-fading\n\t\t *  @param  {number} percent (0-1)\n\t\t *  @return {number}         output gain (0-1)\n\t\t */\n\t\tTone.prototype.equalPowerScale = function(percent){\n\t\t\tvar piFactor = 0.5 * Math.PI;\n\t\t\treturn Math.sin(percent * piFactor);\n\t\t};\n\n\t\t/**\n\t\t *  convert db scale to gain scale (0-1)\n\t\t *  @param  {number} db\n\t\t *  @return {number}   \n\t\t */\n\t\tTone.prototype.dbToGain = function(db) {\n\t\t\treturn Math.pow(2, db / 6);\n\t\t};\n\n\t\t/**\n\t\t *  convert gain scale to decibels\n\t\t *  @param  {number} gain (0-1)\n\t\t *  @return {number}   \n\t\t */\n\t\tTone.prototype.gainToDb = function(gain) {\n\t\t\treturn  20 * (Math.log(gain) / Math.LN10);\n\t\t};\n\n\t\t///////////////////////////////////////////////////////////////////////////\n\t\t//\tTIMING\n\t\t///////////////////////////////////////////////////////////////////////////\n\n\t\t/**\n\t\t *  @return {number} the currentTime from the AudioContext\n\t\t */\n\t\tTone.prototype.now = function(){\n\t\t\treturn this.context.currentTime;\n\t\t};\n\n\t\t/**\n\t\t *  convert a sample count to seconds\n\t\t *  @param  {number} samples \n\t\t *  @return {number}         \n\t\t */\n\t\tTone.prototype.samplesToSeconds = function(samples){\n\t\t\treturn samples / this.context.sampleRate;\n\t\t};\n\n\t\t/**\n\t\t *  convert a time into samples\n\t\t *  \n\t\t *  @param  {Tone.time} time\n\t\t *  @return {number}         \n\t\t */\n\t\tTone.prototype.toSamples = function(time){\n\t\t\tvar seconds = this.toSeconds(time);\n\t\t\treturn Math.round(seconds * this.context.sampleRate);\n\t\t};\n\n\t\t/**\n\t\t *  convert time to seconds\n\t\t *\n\t\t *  this is a simplified version which only handles numbers and \n\t\t *  'now' relative numbers. If the Transport is included this \n\t\t *  method is overridden to include many other features including \n\t\t *  notationTime, Frequency, and transportTime\n\t\t *  \n\t\t *  @param  {number=} time \n\t\t *  @param {number=} now if passed in, this number will be \n\t\t *                       used for all 'now' relative timings\n\t\t *  @return {number}   \tseconds in the same timescale as the AudioContext\n\t\t */\n\t\tTone.prototype.toSeconds = function(time, now){\n\t\t\tnow = this.defaultArg(now, this.now());\n\t\t\tif (typeof time === \"number\"){\n\t\t\t\treturn time; //assuming that it's seconds\n\t\t\t} else if (typeof time === \"string\"){\n\t\t\t\tvar plusTime = 0;\n\t\t\t\tif(time.charAt(0) === \"+\") {\n\t\t\t\t\ttime = time.slice(1);\t\n\t\t\t\t\tplusTime = now;\t\t\t\n\t\t\t\t} \n\t\t\t\treturn parseFloat(time) + plusTime;\n\t\t\t} else {\n\t\t\t\treturn now;\n\t\t\t}\n\t\t};\n\n\t\t///////////////////////////////////////////////////////////////////////////\n\t\t// FREQUENCY CONVERSION\n\t\t///////////////////////////////////////////////////////////////////////////\n\n\t\t/**\n\t\t *  true if the input is in the format number+hz\n\t\t *  i.e.: 10hz\n\t\t *\n\t\t *  @param {number} freq \n\t\t *  @return {boolean} \n\t\t *  @function\n\t\t */\n\t\tTone.prototype.isFrequency = (function(){\n\t\t\tvar freqFormat = new RegExp(/\\d*\\.?\\d+hz$/i);\n\t\t\treturn function(freq){\n\t\t\t\treturn freqFormat.test(freq);\n\t\t\t};\n\t\t})();\n\n\t\t/**\n\t\t *  Convert a frequency into seconds.\n\t\t *  Accepts numbers and strings: i.e. `\"10hz\"` or \n\t\t *  `10` both return `0.1`. \n\t\t *  \n\t\t *  @param  {number|string} freq \n\t\t *  @return {number}      \n\t\t */\n\t\tTone.prototype.frequencyToSeconds = function(freq){\n\t\t\treturn 1 / parseFloat(freq);\n\t\t};\n\n\t\t/**\n\t\t *  Convert a number in seconds to a frequency.\n\t\t *  @param  {number} seconds \n\t\t *  @return {number}         \n\t\t */\n\t\tTone.prototype.secondsToFrequency = function(seconds){\n\t\t\treturn 1/seconds;\n\t\t};\n\n\t\t///////////////////////////////////////////////////////////////////////////\n\t\t//\tINHERITANCE\n\t\t///////////////////////////////////////////////////////////////////////////\n\n\t\t/**\n\t\t *  have a child inherit all of Tone's (or a parent's) prototype\n\t\t *  to inherit the parent's properties, make sure to call \n\t\t *  Parent.call(this) in the child's constructor\n\t\t *\n\t\t *  based on closure library's inherit function\n\t\t *\n\t\t *  @static\n\t\t *  @param  {function} \tchild  \n\t\t *  @param  {function=} parent (optional) parent to inherit from\n\t\t *                             if no parent is supplied, the child\n\t\t *                             will inherit from Tone\n\t\t */\n\t\tTone.extend = function(child, parent){\n\t\t\tif (isUndef(parent)){\n\t\t\t\tparent = Tone;\n\t\t\t}\n\t\t\tfunction TempConstructor(){}\n\t\t\tTempConstructor.prototype = parent.prototype;\n\t\t\tchild.prototype = new TempConstructor();\n\t\t\t/** @override */\n\t\t\tchild.prototype.constructor = child;\n\t\t\tchild._super = parent;\n\t\t};\n\n\t\t///////////////////////////////////////////////////////////////////////////\n\t\t//\tCONTEXT\n\t\t///////////////////////////////////////////////////////////////////////////\n\n\t\t/**\n\t\t *  array of callbacks to be invoked when a new context is added\n\t\t *  @private \n\t\t *  @private\n\t\t */\n\t\tvar newContextCallbacks = [];\n\n\t\t/**\n\t\t *  invoke this callback when a new context is added\n\t\t *  will be invoked initially with the first context\n\t\t *  @private \n\t\t *  @static\n\t\t *  @param {function(AudioContext)} callback the callback to be invoked\n\t\t *                                           with the audio context\n\t\t */\n\t\tTone._initAudioContext = function(callback){\n\t\t\t//invoke the callback with the existing AudioContext\n\t\t\tcallback(Tone.context);\n\t\t\t//add it to the array\n\t\t\tnewContextCallbacks.push(callback);\n\t\t};\n\n\t\t/**\n\t\t *  Tone.js automatically creates a context on init, but if you are working\n\t\t *  with other libraries which also create an AudioContext, it can be\n\t\t *  useful to set your own. If you are going to set your own context, \n\t\t *  be sure to do it at the start of your code, before creating any objects.\n\t\t *  @static\n\t\t *  @param {AudioContext} ctx The new audio context to set\n\t\t */\n\t\tTone.setContext = function(ctx){\n\t\t\t//set the prototypes\n\t\t\tTone.prototype.context = ctx;\n\t\t\tTone.context = ctx;\n\t\t\t//invoke all the callbacks\n\t\t\tfor (var i = 0; i < newContextCallbacks.length; i++){\n\t\t\t\tnewContextCallbacks[i](ctx);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t *  Bind this to a touchstart event to start the audio on mobile devices. \n\t\t *  <br>\n\t\t *  http://stackoverflow.com/questions/12517000/no-sound-on-ios-6-web-audio-api/12569290#12569290\n\t\t *  @static\n\t\t */\n\t\tTone.startMobile = function(){\n\t\t\tvar osc = Tone.context.createOscillator();\n\t\t\tvar silent = Tone.context.createGain();\n\t\t\tsilent.gain.value = 0;\n\t\t\tosc.connect(silent);\n\t\t\tsilent.connect(Tone.context.destination);\n\t\t\tvar now = Tone.context.currentTime;\n\t\t\tosc.start(now);\n\t\t\tosc.stop(now+1);\n\t\t};\n\n\t\t//setup the context\n\t\tTone._initAudioContext(function(audioContext){\n\t\t\t//set the bufferTime\n\t\t\tTone.prototype.bufferTime = Tone.prototype.bufferSize / audioContext.sampleRate;\n\t\t\t_silentNode = audioContext.createGain();\n\t\t\t_silentNode.gain.value = 0;\n\t\t\t_silentNode.connect(audioContext.destination);\n\t\t});\n\n\t\tconsole.log(\"%c * Tone.js r4 * \", \"background: #000; color: #fff\");\n\n\t\treturn Tone;\n\t});\n\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class  Base class for all Signals\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t */\n\t\tTone.SignalBase = function(){\n\n\t\t};\n\n\t\tTone.extend(Tone.SignalBase);\n\n\t\t/**\n\t\t *  When signals connect to other signals or AudioParams, \n\t\t *  they take over the output value of that signal or AudioParam. \n\t\t *  For all other nodes, the behavior is the same as a normal `connect`. \n\t\t *\n\t\t *  @override\n\t\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t\t *  @param {number} [outputNumber=0] \n\t\t *  @param {number} [inputNumber=0] \n\t\t *  @returns {Tone.SignalBase} `this`\n\t\t */\n\t\tTone.SignalBase.prototype.connect = function(node, outputNumber, inputNumber){\n\t\t\t//zero it out so that the signal can have full control\n\t\t\tif (node.constructor === Tone.Signal){\n\t\t\t\t//cancel changes\n\t\t\t\tnode._value.cancelScheduledValues(0);\n\t\t\t\t//reset the value\n\t\t\t\tnode._value.value = 0;\n\t\t\t} else if (node instanceof AudioParam){\n\t\t\t\tnode.cancelScheduledValues(0);\n\t\t\t\tnode.value = 0;\n\t\t\t} \n\t\t\tTone.prototype.connect.call(this, node, outputNumber, inputNumber);\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.SignalBase;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class Wraps the WaveShaperNode\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {function(number, number)|Array|number} mapping the function used to define the values. \n\t\t *                                    The mapping function should take two arguments: \n\t\t *                                    the first is the value at the current position \n\t\t *                                    and the second is the array position. \n\t\t *                                    If the argument is an array, that array will be\n\t\t *                                    set as the wave shapping function\n\t\t *  @param {number} [bufferLen=1024] the length of the WaveShaperNode buffer.\n\t\t *  @example\n\t\t *  var timesTwo = new Tone.WaveShaper(function(val){\n\t\t *  \treturn val * 2;\n\t\t *  }, 2048);\n\t\t */\n\t\tTone.WaveShaper = function(mapping, bufferLen){\n\n\t\t\t/**\n\t\t\t *  the waveshaper\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._shaper = this.input = this.output = this.context.createWaveShaper();\n\n\t\t\t/**\n\t\t\t *  the waveshapers curve\n\t\t\t *  @type {Float32Array}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._curve = null;\n\n\t\t\tif (Array.isArray(mapping)){\n\t\t\t\tthis.curve = mapping;\n\t\t\t} else if (isFinite(mapping) || this.isUndef(mapping)){\n\t\t\t\tthis._curve = new Float32Array(this.defaultArg(mapping, 1024));\n\t\t\t} else if (this.isFunction(mapping)){\n\t\t\t\tthis._curve = new Float32Array(this.defaultArg(bufferLen, 1024));\n\t\t\t\tthis.setMap(mapping);\n\t\t\t} \n\t\t};\n\n\t\tTone.extend(Tone.WaveShaper, Tone.SignalBase);\n\n\t\t/**\n\t\t *  uses a mapping function to set the value of the curve\n\t\t *  @param {function(number, number)} mapping the function used to define the values. \n\t\t *                                    The mapping function should take two arguments: \n\t\t *                                    the first is the value at the current position \n\t\t *                                    and the second is the array position\n\t\t *  @returns {Tone.WaveShaper} `this`\n\t\t */\n\t\tTone.WaveShaper.prototype.setMap = function(mapping){\n\t\t\tfor (var i = 0, len = this._curve.length; i < len; i++){\n\t\t\t\tvar normalized = (i / (len)) * 2 - 1;\n\t\t\t\tthis._curve[i] = mapping(normalized, i);\n\t\t\t}\n\t\t\tthis._shaper.curve = this._curve;\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t * The array to set as the waveshaper curve\n\t\t * @memberOf Tone.WaveShaper#\n\t\t * @type {Array}\n\t\t * @name curve\n\t\t */\n\t\tObject.defineProperty(Tone.WaveShaper.prototype, \"curve\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._shaper.curve;\n\t\t\t},\n\t\t\tset : function(mapping){\n\t\t\t\t//fixes safari WaveShaperNode bug\n\t\t\t\tif (this._isSafari()){\n\t\t\t\t\tvar first = mapping[0];\n\t\t\t\t\tmapping.unshift(first);\t\n\t\t\t\t}\n\t\t\t\tthis._curve = new Float32Array(mapping);\n\t\t\t\tthis._shaper.curve = this._curve;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * The oversampling. Can either be \"none\", \"2x\" or \"4x\"\n\t\t * @memberOf Tone.WaveShaper#\n\t\t * @type {string}\n\t\t * @name curve\n\t\t */\n\t\tObject.defineProperty(Tone.WaveShaper.prototype, \"oversample\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._shaper.oversample;\n\t\t\t},\n\t\t\tset : function(oversampling){\n\t\t\t\tthis._shaper.oversample = oversampling;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t *  returns true if the browser is safari\n\t\t *  @return  {boolean} \n\t\t *  @private\n\t\t */\n\t\tTone.WaveShaper.prototype._isSafari = function(){\n\t\t\tvar ua = navigator.userAgent.toLowerCase(); \n\t\t\treturn ua.indexOf(\"safari\") !== -1 && ua.indexOf(\"chrome\") === -1;\n\t\t};\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.WaveShaper} `this`\n\t\t */\n\t\tTone.WaveShaper.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._shaper.disconnect();\n\t\t\tthis._shaper = null;\n\t\t\tthis._curve = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.WaveShaper;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class  Constant audio-rate signal.\n\t\t *          Tone.Signal is a core component which allows for sample-accurate \n\t\t *          synchronization of many components. Tone.Signal can be scheduled \n\t\t *          with all of the functions available to AudioParams\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {number|AudioParam} [value=0] initial value or the AudioParam to control\n\t\t *                                       note that the signal has no output\n\t\t *                                       if an AudioParam is passed in.\n\t\t *  @param {Tone.Signal.Unit} [units=Number] unit the units the signal is in\n\t\t *  @example\n\t\t *  var signal = new Tone.Signal(10);\n\t\t */\n\t\tTone.Signal = function(value, units){\n\n\t\t\t/**\n\t\t\t * the units the signal is in\n\t\t\t * @type {Tone.Signal.Type}\n\t\t\t */\n\t\t\tthis.units = this.defaultArg(units, Tone.Signal.Units.Number);\n\n\t\t\t/**\n\t\t\t * The node where the constant signal value is scaled.\n\t\t\t * @type {AudioParam}\n\t\t\t * @private\n\t\t\t */\n\t\t\tthis.output = this._scaler = this.context.createGain();\n\n\t\t\t/**\n\t\t\t * The node where the value is set.\n\t\t\t * @type {AudioParam}\n\t\t\t * @private\n\t\t\t */\n\t\t\tthis.input = this._value = this._scaler.gain;\n\n\t\t\tif (value instanceof AudioParam){\n\t\t\t\tthis._scaler.connect(value);\n\t\t\t\t//zero out the value\n\t\t\t\tvalue.value = 0;\n\t\t\t} else {\n\t\t\t\tthis.value = this.defaultArg(value, Tone.Signal.defaults.value);\n\t\t\t}\n\n\t\t\t//connect the constant 1 output to the node output\n\t\t\tTone.Signal._constant.chain(this._scaler);\n\t\t};\n\n\t\tTone.extend(Tone.Signal, Tone.SignalBase);\n\n\t\t/**\n\t\t *  The default values\n\t\t *  @type  {Object}\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t\tTone.Signal.defaults = {\n\t\t\t\"value\" : 0\n\t\t};\n\n\t\t/**\n\t\t * The value of the signal. \n\t\t * @memberOf Tone.Signal#\n\t\t * @type {Tone.Time|Tone.Frequency|number}\n\t\t * @name value\n\t\t */\n\t\tObject.defineProperty(Tone.Signal.prototype, \"value\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._toUnits(this._value.value);\n\t\t\t},\n\t\t\tset : function(value){\n\t\t\t\tvar convertedVal = this._fromUnits(value);\n\t\t\t\t//is this what you want?\n\t\t\t\tthis.cancelScheduledValues(0);\n\t\t\t\tthis._value.value = convertedVal;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @private\n\t\t * @param  {Tone.Time|Tone.Volume|Tone.Frequency|number|undefined} val the value to convert\n\t\t * @return {number}     the number which the value should be set to\n\t\t */\n\t\tTone.Signal.prototype._fromUnits = function(val){\n\t\t\tswitch(this.units){\n\t\t\t\tcase Tone.Signal.Units.Time: \n\t\t\t\t\treturn this.toSeconds(val);\n\t\t\t\tcase Tone.Signal.Units.Frequency: \n\t\t\t\t\treturn this.toFrequency(val);\n\t\t\t\tcase Tone.Signal.Units.Decibels: \n\t\t\t\t\treturn this.dbToGain(val);\n\t\t\t\tcase Tone.Signal.Units.Normal: \n\t\t\t\t\treturn Math.min(Math.max(val, 0), 1);\n\t\t\t\tcase Tone.Signal.Units.Audio: \n\t\t\t\t\treturn Math.min(Math.max(val, -1), 1);\n\t\t\t\tdefault:\n\t\t\t\t\treturn val;\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * convert to the desired units\n\t\t * @private\n\t\t * @param  {number} val the value to convert\n\t\t * @return {number}\n\t\t */\n\t\tTone.Signal.prototype._toUnits = function(val){\n\t\t\tswitch(this.units){\n\t\t\t\tcase Tone.Signal.Units.Decibels: \n\t\t\t\t\treturn this.gainToDb(val);\n\t\t\t\tdefault:\n\t\t\t\t\treturn val;\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t *  Schedules a parameter value change at the given time.\n\t\t *  @param {number}\t\tvalue \n\t\t *  @param {Tone.Time}  time \n\t\t *  @returns {Tone.Signal} `this`\n\t\t */\n\t\tTone.Signal.prototype.setValueAtTime = function(value, time){\n\t\t\tvalue = this._fromUnits(value);\n\t\t\tthis._value.setValueAtTime(value, this.toSeconds(time));\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  Creates a schedule point with the current value at the current time.\n\t\t *\n\t\t *  @param {number=} now (optionally) pass the now value in\n\t\t *  @returns {Tone.Signal} `this`\n\t\t */\n\t\tTone.Signal.prototype.setCurrentValueNow = function(now){\n\t\t\tnow = this.defaultArg(now, this.now());\n\t\t\tvar currentVal = this._value.value;\n\t\t\tthis.cancelScheduledValues(now);\n\t\t\tthis._value.setValueAtTime(currentVal, now);\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  Schedules a linear continuous change in parameter value from the \n\t\t *  previous scheduled parameter value to the given value.\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Tone.Time} endTime \n\t\t *  @returns {Tone.Signal} `this`\n\t\t */\n\t\tTone.Signal.prototype.linearRampToValueAtTime = function(value, endTime){\n\t\t\tvalue = this._fromUnits(value);\n\t\t\tthis._value.linearRampToValueAtTime(value, this.toSeconds(endTime));\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  Schedules an exponential continuous change in parameter value from \n\t\t *  the previous scheduled parameter value to the given value.\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Tone.Time} endTime \n\t\t *  @returns {Tone.Signal} `this`\n\t\t */\n\t\tTone.Signal.prototype.exponentialRampToValueAtTime = function(value, endTime){\n\t\t\tvalue = this._fromUnits(value);\n\t\t\t//can't go below a certain value\n\t\t\tvalue = Math.max(0.00001, value);\n\t\t\tthis._value.exponentialRampToValueAtTime(value, this.toSeconds(endTime));\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  Schedules an exponential continuous change in parameter value from \n\t\t *  the current time and current value to the given value.\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Tone.Time} rampTime the time that it takes the \n\t\t *                               value to ramp from it's current value\n\t\t *  @returns {Tone.Signal} `this`\n\t\t *  @example\n\t\t *  //exponentially ramp to the value 2 over 4 seconds. \n\t\t *  signal.exponentialRampToValueNow(2, 4);\n\t\t */\n\t\tTone.Signal.prototype.exponentialRampToValueNow = function(value, rampTime ){\n\t\t\tvar now = this.now();\n\t\t\tthis.setCurrentValueNow(now);\n\t\t\tthis.exponentialRampToValueAtTime(value, now + this.toSeconds(rampTime ));\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  Schedules an linear continuous change in parameter value from \n\t\t *  the current time and current value to the given value at the given time.\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Tone.Time} rampTime the time that it takes the \n\t\t *                               value to ramp from it's current value\n\t\t *  @returns {Tone.Signal} `this`\n\t\t *  @example\n\t\t *  //linearly ramp to the value 4 over 3 seconds. \n\t\t *  signal.linearRampToValueNow(4, 3);\n\t\t */\n\t\tTone.Signal.prototype.linearRampToValueNow = function(value, rampTime){\n\t\t\tvar now = this.now();\n\t\t\tthis.setCurrentValueNow(now);\n\t\t\tthis.linearRampToValueAtTime(value, now + this.toSeconds(rampTime));\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  Start exponentially approaching the target value at the given time with\n\t\t *  a rate having the given time constant.\n\t\t *  @param {number} value        \n\t\t *  @param {Tone.Time} startTime    \n\t\t *  @param {number} timeConstant \n\t\t *  @returns {Tone.Signal} `this`\n\t\t */\n\t\tTone.Signal.prototype.setTargetAtTime = function(value, startTime, timeConstant){\n\t\t\tvalue = this._fromUnits(value);\n\t\t\tthis._value.setTargetAtTime(value, this.toSeconds(startTime), timeConstant);\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  Sets an array of arbitrary parameter values starting at the given time\n\t\t *  for the given duration.\n\t\t *  \t\n\t\t *  @param {Array<number>} values    \n\t\t *  @param {Tone.Time} startTime \n\t\t *  @param {Tone.Time} duration  \n\t\t *  @returns {Tone.Signal} `this`\n\t\t */\n\t\tTone.Signal.prototype.setValueCurveAtTime = function(values, startTime, duration){\n\t\t\tfor (var i = 0; i < values.length; i++){\n\t\t\t\tvalues[i] = this._fromUnits(values[i]);\n\t\t\t}\n\t\t\tthis._value.setValueCurveAtTime(values, this.toSeconds(startTime), this.toSeconds(duration));\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  Cancels all scheduled parameter changes with times greater than or \n\t\t *  equal to startTime.\n\t\t *  \n\t\t *  @param  {Tone.Time} startTime\n\t\t *  @returns {Tone.Signal} `this`\n\t\t */\n\t\tTone.Signal.prototype.cancelScheduledValues = function(startTime){\n\t\t\tthis._value.cancelScheduledValues(this.toSeconds(startTime));\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  Ramps to the given value over the duration of the rampTime. \n\t\t *  Automatically selects the best ramp type (exponential or linear)\n\t\t *  depending on the `units` of the signal\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Tone.Time} rampTime the time that it takes the \n\t\t *                               value to ramp from it's current value\n\t\t *  @returns {Tone.Signal} `this`\n\t\t *  @example\n\t\t *  //ramp to the value either linearly or exponentially \n\t\t *  //depending on the \"units\" value of the signal\n\t\t *  signal.rampTo(0, 10);\n\t\t */\n\t\tTone.Signal.prototype.rampTo = function(value, rampTime){\n\t\t\trampTime = this.defaultArg(rampTime, 0);\n\t\t\tif (this.units === Tone.Signal.Units.Frequency || this.units === Tone.Signal.Units.BPM){\n\t\t\t\tthis.exponentialRampToValueNow(value, rampTime);\n\t\t\t} else {\n\t\t\t\tthis.linearRampToValueNow(value, rampTime);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  dispose and disconnect\n\t\t *  @returns {Tone.Signal} `this`\n\t\t */\n\t\tTone.Signal.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._value = null;\n\t\t\tthis._scaler = null;\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t * The units the Signal is in\n\t\t * @enum {string}\n\t\t */\n\t\tTone.Signal.Units = {\n\t\t\t/** The default type. */\n\t\t\tNumber : \"number\",\n\t\t\t/** Tone.Time will be converted into seconds. */\n\t\t\tTime : \"time\",\n\t\t\t/** Tone.Frequency will be converted into hertz. */\n\t\t\tFrequency : \"frequency\",\n\t\t\t/** A Gain value. */\n\t\t\tGain : \"gain\",\n\t\t\t/** Within normal range [0,1]. */\n\t\t\tNormal : \"normal\",\n\t\t\t/** Within normal range [-1,1]. */\n\t\t\tAudio : \"audio\",\n\t\t\t/** In decibels. */\n\t\t\tDecibels : \"db\",\n\t\t\t/** In half-step increments, i.e. 12 is an octave above the root. */\n\t\t\tInterval : \"interval\",\n\t\t\t/** Beats per minute. */\n\t\t\tBPM : \"bpm\"\n\t\t};\n\n\t\t///////////////////////////////////////////////////////////////////////////\n\t\t//\tSTATIC\n\t\t///////////////////////////////////////////////////////////////////////////\n\n\t\t/**\n\t\t *  the constant signal generator\n\t\t *  @static\n\t\t *  @private\n\t\t *  @const\n\t\t *  @type {OscillatorNode}\n\t\t */\n\t\tTone.Signal._generator = null;\n\n\t\t/**\n\t\t *  the signal generator waveshaper. makes the incoming signal\n\t\t *  only output 1 for all inputs.\n\t\t *  @static\n\t\t *  @private\n\t\t *  @const\n\t\t *  @type {Tone.WaveShaper}\n\t\t */\n\t\tTone.Signal._constant = null;\n\n\t\t/**\n\t\t *  initializer function\n\t\t */\n\t\tTone._initAudioContext(function(audioContext){\n\t\t\tTone.Signal._generator = audioContext.createOscillator();\n\t\t\tTone.Signal._constant = new Tone.WaveShaper([1,1]);\n\t\t\tTone.Signal._generator.connect(Tone.Signal._constant);\n\t\t\tTone.Signal._generator.start(0);\n\t\t\tTone.Signal._generator.noGC();\n\t\t});\n\n\t\treturn Tone.Signal;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class Pow applies an exponent to the incoming signal. The incoming signal\n\t\t *         must be in the range -1,1\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {number} exp the exponent to apply to the incoming signal, must be at least 2. \n\t\t *  @example\n\t\t *  var pow = new Tone.Pow(2);\n\t\t *  var sig = new Tone.Signal(0.5).connect(pow);\n\t\t *  //output of pow is 0.25. \n\t\t */\n\t\tTone.Pow = function(exp){\n\n\t\t\t/**\n\t\t\t * the exponent\n\t\t\t * @private\n\t\t\t * @type {number}\n\t\t\t */\n\t\t\tthis._exp = this.defaultArg(exp, 1);\n\n\t\t\t/**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._expScaler = this.input = this.output = new Tone.WaveShaper(this._expFunc(this._exp), 8192);\n\t\t};\n\n\t\tTone.extend(Tone.Pow, Tone.SignalBase);\n\n\t\t/**\n\t\t * The value of the exponent\n\t\t * @memberOf Tone.Pow#\n\t\t * @type {number}\n\t\t * @name value\n\t\t */\n\t\tObject.defineProperty(Tone.Pow.prototype, \"value\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._exp;\n\t\t\t},\n\t\t\tset : function(exp){\n\t\t\t\tthis._exp = exp;\n\t\t\t\tthis._expScaler.setMap(this._expFunc(this._exp));\n\t\t\t}\n\t\t});\n\n\n\t\t/**\n\t\t *  the function which maps the waveshaper\n\t\t *  @param   {number} exp\n\t\t *  @return {function}\n\t\t *  @private\n\t\t */\n\t\tTone.Pow.prototype._expFunc = function(exp){\n\t\t\treturn function(val){\n\t\t\t\treturn Math.pow(Math.abs(val), exp);\n\t\t\t};\n\t\t};\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.Pow} `this`\n\t\t */\n\t\tTone.Pow.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._expScaler.dispose();\n\t\t\tthis._expScaler = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.Pow;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class  ADSR envelope generator attaches to an AudioParam or Signal. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Tone.Time|Object} [attack=0.01]\tthe attack time in seconds\n\t\t *  @param {Tone.Time} [decay=0.1]\tthe decay time in seconds\n\t\t *  @param {number} [sustain=0.5] \ta percentage (0-1) of the full amplitude\n\t\t *  @param {Tone.Time} [release=1]\tthe release time in seconds\n\t\t *  @example\n\t\t *  var gainNode = Tone.context.createGain();\n\t\t *  var env = new Tone.Envelope({\n\t\t *  \t\"attack\" : 0.1,\n\t\t *  \t\"decay\" : 0.2,\n\t\t *  \t\"sustain\" : 1,\n\t\t *  \t\"release\" : 0.8,\n\t\t *  });\n\t\t *  env.connect(gainNode.gain);\n\t\t */\n\t\tTone.Envelope = function(){\n\n\t\t\t//get all of the defaults\n\t\t\tvar options = this.optionsObject(arguments, [\"attack\", \"decay\", \"sustain\", \"release\"], Tone.Envelope.defaults);\n\n\t\t\t/** \n\t\t\t *  The attack time\n\t\t\t *  @type {Tone.Time}\n\t\t\t */\n\t\t\tthis.attack = options.attack;\n\n\t\t\t/**\n\t\t\t *  The decay time\n\t\t\t *  @type {Tone.Time}\n\t\t\t */\n\t\t\tthis.decay = options.decay;\n\t\t\t\n\t\t\t/**\n\t\t\t *  the sustain is a value between 0-1\n\t\t\t *  @type {number}\n\t\t\t */\n\t\t\tthis.sustain = options.sustain;\n\n\t\t\t/**\n\t\t\t *  The release time\n\t\t\t *  @type {Tone.Time}\n\t\t\t */\n\t\t\tthis.release = options.release;\n\n\t\t\t/**\n\t\t\t *  the signal\n\t\t\t *  @type {Tone.Signal}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._sig = this.output = new Tone.Signal(0);\n\t\t};\n\n\t\tTone.extend(Tone.Envelope);\n\n\t\t/**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t\tTone.Envelope.defaults = {\n\t\t\t\"attack\" : 0.01,\n\t\t\t\"decay\" : 0.1,\n\t\t\t\"sustain\" : 0.5,\n\t\t\t\"release\" : 1,\n\t\t};\n\n\t\t/**\n\t\t *  the envelope time multipler\n\t\t *  @type {number}\n\t\t *  @private\n\t\t */\n\t\tTone.Envelope.prototype._timeMult = 0.25;\n\n\t\t/**\n\t\t *  Trigger the attack/decay portion of the ADSR envelope. \n\t\t *  @param  {Tone.Time} [time=now]\n\t\t *  @param {number} [velocity=1] the velocity of the envelope scales the vales.\n\t\t *                               number between 0-1\n\t\t *  @returns {Tone.Envelope} `this`\n\t\t *  @example\n\t\t *  //trigger the attack 0.5 seconds from now with a velocity of 0.2\n\t\t *  env.triggerAttack(\"+0.5\", 0.2);\n\t\t */\n\t\tTone.Envelope.prototype.triggerAttack = function(time, velocity){\n\t\t\tvelocity = this.defaultArg(velocity, 1);\n\t\t\tvar attack = this.toSeconds(this.attack);\n\t\t\tvar decay = this.toSeconds(this.decay);\n\t\t\tvar scaledMax = velocity;\n\t\t\tvar sustainVal = this.sustain * scaledMax;\n\t\t\ttime = this.toSeconds(time);\n\t\t\tthis._sig.cancelScheduledValues(time);\n\t\t\tthis._sig.setTargetAtTime(scaledMax, time, attack * this._timeMult);\n\t\t\tthis._sig.setTargetAtTime(sustainVal, time + attack, decay * this._timeMult);\t\n\t\t\treturn this;\n\t\t};\n\t\t\n\t\t/**\n\t\t *  Triggers the release of the envelope.\n\t\t *  @param  {Tone.Time} [time=now]\n\t\t *  @returns {Tone.Envelope} `this`\n\t\t *  @example\n\t\t *  //trigger release immediately\n\t\t *  env.triggerRelease();\n\t\t */\n\t\tTone.Envelope.prototype.triggerRelease = function(time){\n\t\t\ttime = this.toSeconds(time);\n\t\t\tthis._sig.cancelScheduledValues(time);\n\t\t\tvar release = this.toSeconds(this.release);\n\t\t\tthis._sig.setTargetAtTime(0, time, release * this._timeMult);\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  Trigger the attack and release after a sustain time\n\t\t *  @param {Tone.Time} duration the duration of the note\n\t\t *  @param {Tone.Time} [time=now] the time of the attack\n\t\t *  @param {number} [velocity=1] the velocity of the note\n\t\t *  @returns {Tone.Envelope} `this`\n\t\t *  @example\n\t\t *  //trigger the attack and then the release after 0.6 seconds.\n\t\t *  env.triggerAttackRelease(0.6);\n\t\t */\n\t\tTone.Envelope.prototype.triggerAttackRelease = function(duration, time, velocity) {\n\t\t\ttime = this.toSeconds(time);\n\t\t\tthis.triggerAttack(time, velocity);\n\t\t\tthis.triggerRelease(time + this.toSeconds(duration));\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  Borrows the connect method from {@link Tone.Signal}\n\t\t *  @function\n\t\t */\n\t\tTone.Envelope.prototype.connect = Tone.Signal.prototype.connect;\n\n\t\t/**\n\t\t *  disconnect and dispose\n\t\t *  @returns {Tone.Envelope} `this`\n\t\t */\n\t\tTone.Envelope.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._sig.dispose();\n\t\t\tthis._sig = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.Envelope;\n\t});\n\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class  An Envelope connected to a gain node which can be used as an amplitude envelope.\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Envelope}\n\t\t *  @param {Tone.Time|Object} [attack=0.01]\tthe attack time in seconds\n\t\t *  @param {Tone.Time} [decay=0.1]\tthe decay time in seconds\n\t\t *  @param {number} [sustain=0.5] \ta percentage (0-1) of the full amplitude\n\t\t *  @param {Tone.Time} [release=1]\tthe release time in seconds\n\t\t *  @example\n\t\t *  \n\t\t *  var ampEnv = new Tone.AmplitudeEnvelope(0.1, 0.2, 1, 0.8);\n\t\t *  var osc = new Tone.Oscillator();\n\t\t *  //or with an object\n\t\t *  osc.chain(ampEnv, Tone.Master);\n\t\t */\n\t\tTone.AmplitudeEnvelope = function(){\n\n\t\t\tTone.Envelope.apply(this, arguments);\n\n\t\t\t/**\n\t\t\t *  the input node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis.input = this.output = this.context.createGain();\n\n\t\t\tthis._sig.connect(this.output.gain);\n\t\t};\n\n\t\tTone.extend(Tone.AmplitudeEnvelope, Tone.Envelope);\n\n\t\treturn Tone.AmplitudeEnvelope;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class A thin wrapper around the DynamicsCompressorNode\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {number} [threshold=-24] threshold in decibels\n\t\t *  @param {number} [ratio=12] gain reduction ratio\n\t\t *  @example\n\t\t *  var comp = new Tone.Compressor(-30, 3);\n\t\t */\n\t\tTone.Compressor = function(){\n\n\t\t\tvar options = this.optionsObject(arguments, [\"threshold\", \"ratio\"], Tone.Compressor.defaults);\n\n\t\t\t/**\n\t\t\t *  the compressor node\n\t\t\t *  @type {DynamicsCompressorNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._compressor = this.context.createDynamicsCompressor();\n\n\t\t\t/**\n\t\t\t *  the input and output\n\t\t\t */\n\t\t\tthis.input = this.output = this._compressor;\n\n\t\t\t/**\n\t\t\t *  the threshold vaue\n\t\t\t *  @type {AudioParam}\n\t\t\t */\n\t\t\tthis.threshold = this._compressor.threshold;\n\n\t\t\t/**\n\t\t\t *  The attack parameter\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.attack = new Tone.Signal(this._compressor.attack, Tone.Signal.Units.Time);\n\n\t\t\t/**\n\t\t\t *  The release parameter\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.release = new Tone.Signal(this._compressor.release, Tone.Signal.Units.Time);\n\n\t\t\t/**\n\t\t\t *  The knee parameter\n\t\t\t *  @type {AudioParam}\n\t\t\t */\n\t\t\tthis.knee = this._compressor.knee;\n\n\t\t\t/**\n\t\t\t *  The ratio value\n\t\t\t *  @type {AudioParam}\n\t\t\t */\n\t\t\tthis.ratio = this._compressor.ratio;\n\n\t\t\t//set the defaults\n\t\t\tthis.set(options);\n\t\t};\n\n\t\tTone.extend(Tone.Compressor);\n\n\t\t/**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.Compressor.defaults = {\n\t\t\t\"ratio\" : 12,\n\t\t\t\"threshold\" : -24,\n\t\t\t\"release\" : 0.25,\n\t\t\t\"attack\" : 0.003,\n\t\t\t\"knee\" : 30\n\t\t};\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.Compressor} `this`\n\t\t */\n\t\tTone.Compressor.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._compressor.disconnect();\n\t\t\tthis._compressor = null;\n\t\t\tthis.attack.dispose();\n\t\t\tthis.attack = null;\n\t\t\tthis.release.dispose();\n\t\t\tthis.release = null;\n\t\t\tthis.threshold = null;\n\t\t\tthis.ratio = null;\n\t\t\tthis.knee = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.Compressor;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class Add a signal and a number or two signals. <br><br>\n\t\t *         input 0: augend. input 1: addend. <br><br>\n\t\t *         Add can be used in two ways, either constructed with a value,\n\t\t *         or constructed with no initial value and with signals connected\n\t\t *         to each of its two inputs. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {number=} value if no value is provided, Tone.Add will sum the first\n\t\t *                         and second inputs. \n\t\t *  @example\n\t\t *  var signal = new Tone.Signal(2);\n\t\t *  var add = new Tone.Add(2);\n\t\t *  signal.connect(add);\n\t\t *  //the output of add equals 4\n\t\t *\n\t\t *  //if constructed with no arguments\n\t\t *  //it will add the first and second inputs\n\t\t *  var add = new Tone.Add();\n\t\t *  var sig0 = new Tone.Signal(3).connect(add, 0, 0);\n\t\t *  var sig1 = new Tone.Signal(4).connect(add, 0, 1);\n\t\t *  //the output of add equals 7. \n\t\t */\n\t\tTone.Add = function(value){\n\n\t\t\tTone.call(this, 2, 0);\n\n\t\t\t/**\n\t\t\t *  the summing node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._sum = this.input[0] = this.input[1] = this.output = this.context.createGain();\n\n\t\t\t/**\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis._value = this.input[1] = new Tone.Signal(value);\n\n\t\t\tthis._value.connect(this._sum);\n\t\t};\n\n\t\tTone.extend(Tone.Add, Tone.Signal);\n\t\t\n\t\t/**\n\t\t *  dispose method\n\t\t *  @returns {Tone.Add} `this`\n\t\t */\n\t\tTone.Add.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._sum.disconnect();\n\t\t\tthis._sum = null;\n\t\t\tthis._value.dispose();\n\t\t\tthis._value = null;\n\t\t\treturn this;\n\t\t}; \n\n\t\treturn Tone.Add;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class  Multiply the incoming signal by a number or Multiply two signals.\n\t\t *          input 0: multiplicand.\n\t\t *          input 1: multiplier.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {number=} value constant value to multiple. if no value is provided\n\t\t *                         it will be multiplied by the value of input 1.\n\t\t *  @example\n\t\t *  var mult = new Tone.Multiply(3);\n\t\t *  var sig = new Tone.Signal(2).connect(mult);\n\t\t *  //output of mult is 6. \n\t\t */\n\t\tTone.Multiply = function(value){\n\n\t\t\tTone.call(this, 2, 0);\n\n\t\t\t/**\n\t\t\t *  the input node is the same as the output node\n\t\t\t *  it is also the GainNode which handles the scaling of incoming signal\n\t\t\t *  \n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._mult = this.input[0] = this.output = this.context.createGain();\n\n\t\t\t/**\n\t\t\t *  the scaling parameter\n\t\t\t *  @type {AudioParam}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._value = this.input[1] = this.output.gain;\n\t\t\t\n\t\t\tthis._value.value = this.defaultArg(value, 0);\n\t\t};\n\n\t\tTone.extend(Tone.Multiply, Tone.Signal);\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.Multiply} `this`\n\t\t */\n\t\tTone.Multiply.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._mult = null;\n\t\t\tthis._value = null;\n\t\t\treturn this;\n\t\t}; \n\n\t\treturn Tone.Multiply;\n\t});\n\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class Negate the incoming signal. i.e. an input signal of 10 will output -10\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @example\n\t\t *  var neg = new Tone.Negate();\n\t\t *  var sig = new Tone.Signal(-2).connect(neg);\n\t\t *  //output of neg is positive 2. \n\t\t */\n\t\tTone.Negate = function(){\n\t\t\t/**\n\t\t\t *  negation is done by multiplying by -1\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._multiply = this.input = this.output= new Tone.Multiply(-1);\n\t\t};\n\n\t\tTone.extend(Tone.Negate, Tone.SignalBase);\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.Negate} `this`\n\t\t */\n\t\tTone.Negate.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._multiply.dispose();\n\t\t\tthis._multiply = null;\n\t\t\treturn this;\n\t\t}; \n\n\t\treturn Tone.Negate;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class Subtract a signal and a number or two signals. \n\t\t *         input 0 : minuend.\n\t\t *         input 1 : subtrahend\n\t\t *\n\t\t *  @extends {Tone.Signal}\n\t\t *  @constructor\n\t\t *  @param {number=} value value to subtract from the incoming signal. If the value\n\t\t *                         is omitted, it will subtract the second signal from the first\n\t\t *  @example\n\t\t *  var sub = new Tone.Subtract(1);\n\t\t *  var sig = new Tone.Signal(4).connect(sub);\n\t\t *  //the output of sub is 3. \n\t\t */\n\t\tTone.Subtract = function(value){\n\n\t\t\tTone.call(this, 2, 0);\n\n\t\t\t/**\n\t\t\t *  the summing node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._sum = this.input[0] = this.output = this.context.createGain();\n\n\t\t\t/**\n\t\t\t *  negate the input of the second input before connecting it\n\t\t\t *  to the summing node.\n\t\t\t *  @type {Tone.Negate}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._neg = new Tone.Negate();\n\n\t\t\t/**\n\t\t\t *  the node where the value is set\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis._value = this.input[1] = new Tone.Signal(value);\n\n\t\t\tthis._value.chain(this._neg, this._sum);\n\t\t};\n\n\t\tTone.extend(Tone.Subtract, Tone.Signal);\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.SignalBase} `this`\n\t\t */\n\t\tTone.Subtract.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._neg.dispose();\n\t\t\tthis._neg = null;\n\t\t\tthis._sum.disconnect();\n\t\t\tthis._sum = null;\n\t\t\tthis._value.dispose();\n\t\t\tthis._value = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.Subtract;\n\t});\n\tToneModule( \n\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class  GreaterThanZero outputs 1 when the input is strictly greater than zero\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @example\n\t\t *  var gt0 = new Tone.GreaterThanZero();\n\t\t *  var sig = new Tone.Signal(0.01).connect(gt0);\n\t\t *  //the output of gt0 is 1. \n\t\t *  sig.value = 0;\n\t\t *  //the output of gt0 is 0. \n\t\t */\n\t\tTone.GreaterThanZero = function(){\n\t\t\t\n\t\t\t/**\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._thresh = this.output = new Tone.WaveShaper(function(val){\n\t\t\t\tif (val <= 0){\n\t\t\t\t\treturn 0;\n\t\t\t\t} else {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t/**\n\t\t\t *  scale the first thresholded signal by a large value.\n\t\t\t *  this will help with values which are very close to 0\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._scale = this.input = new Tone.Multiply(10000);\n\n\t\t\t//connections\n\t\t\tthis._scale.connect(this._thresh);\n\t\t};\n\n\t\tTone.extend(Tone.GreaterThanZero, Tone.SignalBase);\n\n\t\t/**\n\t\t *  dispose method\n\t\t *  @returns {Tone.GreaterThanZero} `this`\n\t\t */\n\t\tTone.GreaterThanZero.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._scale.dispose();\n\t\t\tthis._scale = null;\n\t\t\tthis._thresh.dispose();\n\t\t\tthis._thresh = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.GreaterThanZero;\n\t});\n\tToneModule( \n\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class  EqualZero outputs 1 when the input is strictly greater than zero\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @example\n\t\t *  var eq0 = new Tone.EqualZero();\n\t\t *  var sig = new Tone.Signal(0).connect(eq0);\n\t\t *  //the output of eq0 is 1. \n\t\t */\n\t\tTone.EqualZero = function(){\n\n\t\t\t/**\n\t\t\t *  scale the incoming signal by a large factor\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t */\n\t\t\tthis._scale = this.input = new Tone.Multiply(10000);\n\t\t\t\n\t\t\t/**\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._thresh = new Tone.WaveShaper(function(val){\n\t\t\t\tif (val === 0){\n\t\t\t\t\treturn 1;\n\t\t\t\t} else {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}, 128);\n\n\t\t\t/**\n\t\t\t *  threshold the output so that it's 0 or 1\n\t\t\t *  @type {Tone.GreaterThanZero}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._gtz = this.output = new Tone.GreaterThanZero();\n\n\t\t\t//connections\n\t\t\tthis._scale.chain(this._thresh, this._gtz);\n\t\t};\n\n\t\tTone.extend(Tone.EqualZero, Tone.SignalBase);\n\n\t\t/**\n\t\t *  dispose method\n\t\t *  @returns {Tone.EqualZero} `this`\n\t\t */\n\t\tTone.EqualZero.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._gtz.dispose();\n\t\t\tthis._gtz = null;\n\t\t\tthis._scale.dispose();\n\t\t\tthis._scale = null;\n\t\t\tthis._thresh.dispose();\n\t\t\tthis._thresh = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.EqualZero;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class  Output 1 if the signal is equal to the value, otherwise outputs 0. \n\t\t *          Can accept two signals if connected to inputs 0 and 1.\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {number} value the number to compare the incoming signal to\n\t\t *  @example\n\t\t *  var eq = new Tone.Equal(3);\n\t\t *  var sig = new Tone.Signal(3).connect(eq);\n\t\t *  //the output of eq is 1. \n\t\t */\n\t\tTone.Equal = function(value){\n\n\t\t\tTone.call(this, 2, 0);\n\n\t\t\t/**\n\t\t\t *  subtract the value from the incoming signal\n\t\t\t *  \n\t\t\t *  @type {Tone.Add}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._sub = this.input[0] = new Tone.Subtract(value);\n\n\t\t\t/**\n\t\t\t *  @type {Tone.EqualZero}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._equals = this.output = new Tone.EqualZero();\n\n\t\t\tthis._sub.connect(this._equals);\n\t\t\tthis.input[1] = this._sub.input[1];\n\t\t};\n\n\t\tTone.extend(Tone.Equal, Tone.SignalBase);\n\n\t\t/**\n\t\t * The value to compare to the incoming signal.\n\t\t * @memberOf Tone.Equal#\n\t\t * @type {number}\n\t\t * @name value\n\t\t */\n\t\tObject.defineProperty(Tone.Equal.prototype, \"value\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._sub.value;\n\t\t\t},\n\t\t\tset : function(value){\n\t\t\t\tthis._sub.value = value;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t *  dispose method\n\t\t *  @returns {Tone.Equal} `this`\n\t\t */\n\t\tTone.Equal.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._equals.disconnect();\n\t\t\tthis._equals = null;\n\t\t\tthis._sub.dispose();\n\t\t\tthis._sub = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.Equal;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class Select between any number of inputs, sending the one \n\t\t *         selected by the gate signal to the output\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {number} [sourceCount=2] the number of inputs the switch accepts\n\t\t *  @example\n\t\t *  var sel = new Tone.Select(2);\n\t\t *  var sigA = new Tone.Signal(10).connect(sel, 0, 0);\n\t\t *  var sigB = new Tone.Signal(20).connect(sel, 0, 1);\n\t\t *  sel.gate.value = 0;\n\t\t *  //sel outputs 10 (the value of sigA);\n\t\t *  sel.gate.value = 1;\n\t\t *  //sel outputs 20 (the value of sigB);\n\t\t */\n\t\tTone.Select = function(sourceCount){\n\n\t\t\tsourceCount = this.defaultArg(sourceCount, 2);\n\n\t\t\tTone.call(this, sourceCount, 1);\n\n\t\t\t/**\n\t\t\t *  the control signal\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.gate = new Tone.Signal(0);\n\n\t\t\t//make all the inputs and connect them\n\t\t\tfor (var i = 0; i < sourceCount; i++){\n\t\t\t\tvar switchGate = new SelectGate(i);\n\t\t\t\tthis.input[i] = switchGate;\n\t\t\t\tthis.gate.connect(switchGate.selecter);\n\t\t\t\tswitchGate.connect(this.output);\n\t\t\t}\n\t\t};\n\n\t\tTone.extend(Tone.Select, Tone.SignalBase);\n\n\t\t/**\n\t\t *  open one of the inputs and close the other\n\t\t *  @param {number} which open one of the gates (closes the other)\n\t\t *  @param {Tone.Time=} time the time when the switch will open\n\t\t *  @returns {Tone.Select} `this`\n\t\t *  @example\n\t\t *  //open input 1 in a half second from now\n\t\t *  sel.select(1, \"+0.5\");\n\t\t */\n\t\tTone.Select.prototype.select = function(which, time){\n\t\t\t//make sure it's an integer\n\t\t\twhich = Math.floor(which);\n\t\t\tthis.gate.setValueAtTime(which, this.toSeconds(time));\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  dispose method\n\t\t *  @returns {Tone.Select} `this`\n\t\t */\n\t\tTone.Select.prototype.dispose = function(){\n\t\t\tthis.gate.dispose();\n\t\t\tfor (var i = 0; i < this.input.length; i++){\n\t\t\t\tthis.input[i].dispose();\n\t\t\t\tthis.input[i] = null;\n\t\t\t}\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis.gate = null;\n\t\t\treturn this;\n\t\t}; \n\n\t\t////////////START HELPER////////////\n\n\t\t/**\n\t\t *  helper class for Tone.Select representing a single gate\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @private\n\t\t */\n\t\tvar SelectGate = function(num){\n\n\t\t\t/**\n\t\t\t *  the selector\n\t\t\t *  @type {Tone.Equal}\n\t\t\t */\n\t\t\tthis.selecter = new Tone.Equal(num);\n\n\t\t\t/**\n\t\t\t *  the gate\n\t\t\t *  @type {GainNode}\n\t\t\t */\n\t\t\tthis.gate = this.input = this.output = this.context.createGain();\n\n\t\t\t//connect the selecter to the gate gain\n\t\t\tthis.selecter.connect(this.gate.gain);\n\t\t};\n\n\t\tTone.extend(SelectGate);\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @private\n\t\t */\n\t\tSelectGate.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis.selecter.dispose();\n\t\t\tthis.gate.disconnect();\n\t\t\tthis.selecter = null;\n\t\t\tthis.gate = null;\n\t\t};\n\n\t\t////////////END HELPER////////////\n\n\t\t//return Tone.Select\n\t\treturn Tone.Select;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class IfThenElse has three inputs. When the first input (if) is true (i.e. === 1), \n\t\t *         then it will pass the second input (then) through to the output, otherwise, \n\t\t *         if it's not true (i.e. === 0) then it will pass the third input (else) \n\t\t *         through to the output. \n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @example\n\t\t *  var ifThenElse = new Tone.IfThenElse();\n\t\t *  var ifSignal = new Tone.Signal(1).connect(ifThenElse, 0, 0);\n\t\t *  var thenSignal = new Tone.PWMOscillator().connect(ifThenElse, 0, 1);\n\t\t *  var elseSignal = new Tone.PulseOscillator().connect(ifThenElse, 0, 2);\n\t\t *  //ifThenElse outputs thenSignal\n\t\t *  signal.value = 0;\n\t\t *  //now ifThenElse outputs elseSignal\n\t\t */\n\t\tTone.IfThenElse = function(){\n\n\t\t\tTone.call(this, 3, 0);\n\n\t\t\t/**\n\t\t\t *  the selector node which is responsible for the routing\n\t\t\t *  @type {Tone.Select}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._selector = this.output = new Tone.Select(2);\n\n\t\t\t//the input mapping\n\t\t\tthis.if = this.input[0] = this._selector.gate;\n\t\t\tthis.then = this.input[1] = this._selector.input[1];\n\t\t\tthis.else = this.input[2] = this._selector.input[0];\n\t\t};\n\n\t\tTone.extend(Tone.IfThenElse, Tone.SignalBase);\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.IfThenElse} `this`\n\t\t */\n\t\tTone.IfThenElse.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._selector.dispose();\n\t\t\tthis._selector = null;\n\t\t\tthis.if = null;\n\t\t\tthis.then = null;\n\t\t\tthis.else = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.IfThenElse;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class OR the inputs together. True if at least one of the inputs is true. \n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @example\n\t\t *  var or = new Tone.OR(2);\n\t\t *  var sigA = new Tone.Signal(0)connect(or, 0, 0);\n\t\t *  var sigB = new Tone.Signal(1)connect(or, 0, 1);\n\t\t *  //output of or is 1 because at least\n\t\t *  //one of the inputs is equal to 1. \n\t\t */\n\t\tTone.OR = function(inputCount){\n\n\t\t\tinputCount = this.defaultArg(inputCount, 2);\n\t\t\tTone.call(this, inputCount, 0);\n\n\t\t\t/**\n\t\t\t *  a private summing node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._sum = this.context.createGain();\n\n\t\t\t/**\n\t\t\t *  @type {Tone.Equal}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._gtz = new Tone.GreaterThanZero();\n\n\t\t\t/**\n\t\t\t *  the output\n\t\t\t *  @type {Tone.Equal}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis.output = this._gtz;\n\n\t\t\t//make each of the inputs an alias\n\t\t\tfor (var i = 0; i < inputCount; i++){\n\t\t\t\tthis.input[i] = this._sum;\n\t\t\t}\n\t\t\tthis._sum.connect(this._gtz);\n\t\t};\n\n\t\tTone.extend(Tone.OR, Tone.SignalBase);\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.OR} `this`\n\t\t */\n\t\tTone.OR.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._gtz.dispose();\n\t\t\tthis._gtz = null;\n\t\t\tthis._sum.disconnect();\n\t\t\tthis._sum = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.OR;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class and returns 1 when all the inputs are equal to 1\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {number} [inputCount=2] the number of inputs. NOTE: all inputs are\n\t\t *                                 connected to the single AND input node\n\t\t *  @example\n\t\t *  var and = new Tone.AND(2);\n\t\t *  var sigA = new Tone.Signal(0).connect(and, 0, 0);\n\t\t *  var sigB = new Tone.Signal(1).connect(and, 0, 1);\n\t\t *  //the output of and is 0. \n\t\t */\n\t\tTone.AND = function(inputCount){\n\n\t\t\tinputCount = this.defaultArg(inputCount, 2);\n\n\t\t\tTone.call(this, inputCount, 0);\n\n\t\t\t/**\n\t\t\t *  @type {Tone.Equal}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._equals = this.output = new Tone.Equal(inputCount);\n\n\t\t\t//make each of the inputs an alias\n\t\t\tfor (var i = 0; i < inputCount; i++){\n\t\t\t\tthis.input[i] = this._equals;\n\t\t\t}\n\t\t};\n\n\t\tTone.extend(Tone.AND, Tone.SignalBase);\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.AND} `this`\n\t\t */\n\t\tTone.AND.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._equals.dispose();\n\t\t\tthis._equals = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.AND;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class  Just an alias for EqualZero. but has the same effect as a NOT operator. \n\t\t *          Outputs 1 when input equals 0. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @example\n\t\t *  var not = new Tone.NOT();\n\t\t *  var sig = new Tone.Signal(1).connect(not);\n\t\t *  //output of not equals 0. \n\t\t *  sig.value = 0;\n\t\t *  //output of not equals 1.\n\t\t */\n\t\tTone.NOT = Tone.EqualZero;\n\n\t\treturn Tone.NOT;\n\t});\n\tToneModule( \n\t\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class  Output 1 if the signal is greater than the value, otherwise outputs 0.\n\t\t *          can compare two signals or a signal and a number. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {number} [value=0] the value to compare to the incoming signal\n\t\t *  @example\n\t\t *  var gt = new Tone.GreaterThan(2);\n\t\t *  var sig = new Tone.Signal(4).connect(gt);\n\t\t *  //output of gt is equal 1. \n\t\t */\n\t\tTone.GreaterThan = function(value){\n\n\t\t\tTone.call(this, 2, 0);\n\t\t\t\n\t\t\t/**\n\t\t\t *  subtract the amount from the incoming signal\n\t\t\t *  @type {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._value = this.input[0] = new Tone.Subtract(value);\n\t\t\tthis.input[1] = this._value.input[1];\n\n\t\t\t/**\n\t\t\t *  compare that amount to zero\n\t\t\t *  @type {Tone.GreaterThanZero}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._gtz = this.output = new Tone.GreaterThanZero();\n\n\t\t\t//connect\n\t\t\tthis._value.connect(this._gtz);\n\t\t};\n\n\t\tTone.extend(Tone.GreaterThan, Tone.Signal);\n\n\t\t/**\n\t\t *  dispose method\n\t\t *  @returns {Tone.GreaterThan} `this`\n\t\t */\n\t\tTone.GreaterThan.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._value.dispose();\n\t\t\tthis._value = null;\n\t\t\tthis._gtz.dispose();\n\t\t\tthis._gtz = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.GreaterThan;\n\t});\n\tToneModule( \n\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class  Output 1 if the signal is less than the value, otherwise outputs 0.\n\t\t *          Can compare two signals or a signal and a number. <br><br>\n\t\t *          input 0: left hand side of comparison.<br><br>\n\t\t *          input 1: right hand side of comparison.\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {number} [value=0] the value to compare to the incoming signal\n\t\t *  @example\n\t\t *  var lt = new Tone.LessThan(2);\n\t\t *  var sig = new Tone.Signal(-1).connect(lt);\n\t\t *  //lt outputs 1 because sig < 2\n\t\t */\n\t\tTone.LessThan = function(value){\n\n\t\t\tTone.call(this, 2, 0);\n\n\t\t\t/**\n\t\t\t *  negate the incoming signal\n\t\t\t *  @type {Tone.Negate}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._neg = this.input[0] = new Tone.Negate();\n\n\t\t\t/**\n\t\t\t *  input < value === -input > -value\n\t\t\t *  @type {Tone.GreaterThan}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._gt = this.output = new Tone.GreaterThan();\n\n\t\t\t/**\n\t\t\t *  negate the signal coming from the second input\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Negate}\n\t\t\t */\n\t\t\tthis._rhNeg = new Tone.Negate();\n\n\t\t\t/**\n\t\t\t *  the node where the value is set\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis._value = this.input[1] = new Tone.Signal(value);\n\n\t\t\t//connect\n\t\t\tthis._neg.connect(this._gt);\n\t\t\tthis._value.connect(this._rhNeg);\t\n\t\t\tthis._rhNeg.connect(this._gt, 0, 1);\n\t\t};\n\n\t\tTone.extend(Tone.LessThan, Tone.Signal);\n\n\t\t/**\n\t\t *  dispose method\n\t\t *  @returns {Tone.LessThan} `this`\n\t\t */\n\t\tTone.LessThan.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._neg.dispose();\n\t\t\tthis._neg = null;\n\t\t\tthis._gt.dispose();\n\t\t\tthis._gt = null;\n\t\t\tthis._rhNeg.dispose();\n\t\t\tthis._rhNeg = null;\n\t\t\tthis._value.dispose();\n\t\t\tthis._value = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.LessThan;\n\t});\n\tToneModule( \n\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class return the absolute value of an incoming signal\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @example\n\t\t *  var signal = new Tone.Signal(-1);\n\t\t *  var abs = new Tone.Abs();\n\t\t *  signal.connect(abs);\n\t\t *  //the output of abs is 1. \n\t\t */\n\t\tTone.Abs = function(){\n\t\t\tTone.call(this, 1, 0);\n\n\t\t\t/**\n\t\t\t *  @type {Tone.LessThan}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._ltz = new Tone.LessThan(0);\n\n\t\t\t/**\n\t\t\t *  @type {Tone.Select}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._switch = this.output = new Tone.Select(2);\n\t\t\t\n\t\t\t/**\n\t\t\t *  @type {Tone.Negate}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._negate = new Tone.Negate();\n\n\t\t\t//two signal paths, positive and negative\n\t\t\tthis.input.connect(this._switch, 0, 0);\n\t\t\tthis.input.connect(this._negate);\n\t\t\tthis._negate.connect(this._switch, 0, 1);\n\t\t\t\n\t\t\t//the control signal\n\t\t\tthis.input.chain(this._ltz, this._switch.gate);\n\t\t};\n\n\t\tTone.extend(Tone.Abs, Tone.SignalBase);\n\n\t\t/**\n\t\t *  dispose method\n\t\t *  @returns {Tone.Abs} `this`\n\t\t */\n\t\tTone.Abs.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._switch.dispose();\n\t\t\tthis._switch = null;\n\t\t\tthis._ltz.dispose();\n\t\t\tthis._ltz = null;\n\t\t\tthis._negate.dispose();\n\t\t\tthis._negate = null;\n\t\t\treturn this;\n\t\t}; \n\n\t\treturn Tone.Abs;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t * \t@class  outputs the greater of two signals. If a number is provided in the constructor\n\t\t * \t        it will use that instead of the signal. \n\t\t * \t\n\t\t *  @constructor\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {number=} max max value if provided. if not provided, it will use the\n\t\t *                       signal value from input 1. \n\t\t *  @example\n\t\t *  var max = new Tone.Max(2);\n\t\t *  var sig = new Tone.Signal(3).connect(max);\n\t\t *  //max outputs 3\n\t\t *  sig.value = 1;\n\t\t *  //max outputs 2\n\t\t */\n\t\tTone.Max = function(max){\n\n\t\t\tTone.call(this, 2, 0);\n\t\t\tthis.input[0] = this.context.createGain();\n\n\t\t\t/**\n\t\t\t *  the max signal\n\t\t\t *  @type {Tone.Signal}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._value = this.input[1] = new Tone.Signal(max);\n\n\t\t\t/**\n\t\t\t *  @type {Tone.Select}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._ifThenElse = this.output = new Tone.IfThenElse();\n\n\t\t\t/**\n\t\t\t *  @type {Tone.Select}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._gt = new Tone.GreaterThan();\n\n\t\t\t//connections\n\t\t\tthis.input[0].chain(this._gt, this._ifThenElse.if);\n\t\t\tthis.input[0].connect(this._ifThenElse.then);\n\t\t\tthis._value.connect(this._ifThenElse.else);\n\t\t\tthis._value.connect(this._gt, 0, 1);\n\t\t};\n\n\t\tTone.extend(Tone.Max, Tone.Signal);\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.Max} `this`\n\t\t */\n\t\tTone.Max.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._value.dispose();\n\t\t\tthis._ifThenElse.dispose();\n\t\t\tthis._gt.dispose();\n\t\t\tthis._value = null;\n\t\t\tthis._ifThenElse = null;\n\t\t\tthis._gt = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.Max;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t * \t@class  Outputs the lesser of two signals. If a number is given \n\t\t * \t        in the constructor, it will use a signal and a number. \n\t\t * \t\n\t\t *  @constructor\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {number} min the minimum to compare to the incoming signal\n\t\t *  @example\n\t\t *  var min = new Tone.Min(2);\n\t\t *  var sig = new Tone.Signal(3).connect(min);\n\t\t *  //min outputs 2\n\t\t *  sig.value = 1;\n\t\t *  //min outputs 1\n\t\t */\n\t\tTone.Min = function(min){\n\n\t\t\tTone.call(this, 2, 0);\n\t\t\tthis.input[0] = this.context.createGain();\n\n\t\t\t/**\n\t\t\t *  @type {Tone.Select}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._ifThenElse = this.output = new Tone.IfThenElse();\n\n\t\t\t/**\n\t\t\t *  @type {Tone.Select}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._lt = new Tone.LessThan();\n\n\t\t\t/**\n\t\t\t *  the min signal\n\t\t\t *  @type {Tone.Signal}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._value = this.input[1] = new Tone.Signal(min);\n\n\t\t\t//connections\n\t\t\tthis.input[0].chain(this._lt, this._ifThenElse.if);\n\t\t\tthis.input[0].connect(this._ifThenElse.then);\n\t\t\tthis._value.connect(this._ifThenElse.else);\n\t\t\tthis._value.connect(this._lt, 0, 1);\n\t\t};\n\n\t\tTone.extend(Tone.Min, Tone.Signal);\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.Min} `this`\n\t\t */\n\t\tTone.Min.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._value.dispose();\n\t\t\tthis._ifThenElse.dispose();\n\t\t\tthis._lt.dispose();\n\t\t\tthis._value = null;\n\t\t\tthis._ifThenElse = null;\n\t\t\tthis._lt = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.Min;\n\t});\n\tToneModule( \n\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class Signal-rate modulo operator. Only works in audio range [-1, 1] and for modulus\n\t\t *         values less than 1. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {number} modulus the modulus to apply\n\t\t *  @example\n\t\t *  var mod = new Tone.Modulo(0.2)\n\t\t *  var sig = new Tone.Signal(0.5).connect(mod);\n\t\t *  //mod outputs 0.1\n\t\t */\n\t\tTone.Modulo = function(modulus){\n\n\t\t\tTone.call(this, 1, 1);\n\n\t\t\t/**\n\t\t\t *  A waveshaper gets the integer multiple of \n\t\t\t *  the input signal and the modulus.\n\t\t\t *  @private\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t */\n\t\t\tthis._shaper = new Tone.WaveShaper(Math.pow(2, 16));\n\n\t\t\t/**\n\t\t\t *  the integer multiple is multiplied by the modulus\n\t\t\t *  @type  {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._multiply = new Tone.Multiply();\n\n\t\t\t/**\n\t\t\t *  and subtracted from the input signal\n\t\t\t *  @type  {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._subtract = this.output = new Tone.Subtract();\n\n\t\t\t/**\n\t\t\t *  the modulus signal\n\t\t\t *  @type  {Tone.Signal}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._modSignal = new Tone.Signal(modulus);\n\n\t\t\t//connections\n\t\t\tthis.input.fan(this._shaper, this._subtract);\n\t\t\tthis._modSignal.connect(this._multiply, 0, 0);\n\t\t\tthis._shaper.connect(this._multiply, 0, 1);\n\t\t\tthis._multiply.connect(this._subtract, 0, 1);\n\t\t\tthis._setWaveShaper(modulus);\n\t\t};\n\n\t\tTone.extend(Tone.Modulo, Tone.SignalBase);\n\n\t\t/**\n\t\t *  @param  {number}  mod  the modulus to apply\n\t\t *  @private\n\t\t */\n\t\tTone.Modulo.prototype._setWaveShaper = function(mod){\n\t\t\tthis._shaper.setMap(function(val){\n\t\t\t\tvar multiple = Math.floor((val + 0.0001) / mod);\n\t\t\t\treturn multiple;\n\t\t\t});\n\t\t};\n\n\t\t/**\n\t\t * The modulus value.\n\t\t * @memberOf Tone.Modulo#\n\t\t * @type {number}\n\t\t * @name value\n\t\t */\n\t\tObject.defineProperty(Tone.Modulo.prototype, \"value\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._modSignal.value;\n\t\t\t},\n\t\t\tset : function(mod){\n\t\t\t\tthis._modSignal.value = mod;\n\t\t\t\tthis._setWaveShaper(mod);\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * clean up\n\t\t *  @returns {Tone.Modulo} `this`\n\t\t */\n\t\tTone.Modulo.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._shaper.dispose();\n\t\t\tthis._shaper = null;\n\t\t\tthis._multiply.dispose();\n\t\t\tthis._multiply = null;\n\t\t\tthis._subtract.dispose();\n\t\t\tthis._subtract = null;\n\t\t\tthis._modSignal.dispose();\n\t\t\tthis._modSignal = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.Modulo;\n\t});\n\tToneModule( \n\t\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class evaluate an expression at audio rate. \n\t\t *         parsing code modified from https://code.google.com/p/tapdigit/\n\t\t *         Copyright 2011 2012 Ariya Hidayat, New BSD License\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {string} expr the expression to generate\n\t\t *  @example\n\t\t *  //adds the signals from input 0 and input 1.\n\t\t *  var expr = new Tone.Expr(\"$0 + $1\");\n\t\t */\n\t\tTone.Expr = function(){\n\n\t\t\tvar expr = this._replacements(Array.prototype.slice.call(arguments));\n\t\t\tvar inputCount = this._parseInputs(expr);\n\n\t\t\t/**\n\t\t\t *  hold onto all of the nodes for disposal\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._nodes = [];\n\n\t\t\t/**\n\t\t\t *  The inputs. The length is determined by the expression. \n\t\t\t *  @type {Array}\n\t\t\t */\n\t\t\tthis.input = new Array(inputCount);\n\n\t\t\t//create a gain for each input\n\t\t\tfor (var i = 0; i < inputCount; i++){\n\t\t\t\tthis.input[i] = this.context.createGain();\n\t\t\t}\n\n\t\t\t//parse the syntax tree\n\t\t\tvar tree = this._parseTree(expr);\n\t\t\t//evaluate the results\n\t\t\tvar result;\n\t\t\ttry {\n\t\t\t\tresult = this._eval(tree);\n\t\t\t} catch (e){\n\t\t\t\tthis._disposeNodes();\n\t\t\t\tthrow new Error(\"Could evaluate expression: \"+expr);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t *  The output node is the result of the expression\n\t\t\t *  @type {Tone}\n\t\t\t */\n\t\t\tthis.output = result;\n\t\t};\n\n\t\tTone.extend(Tone.Expr, Tone.SignalBase);\n\n\t\t//some helpers to cut down the amount of code\n\t\tfunction applyBinary(Constructor, args, self){\n\t\t\tvar op = new Constructor();\n\t\t\tself._eval(args[0]).connect(op, 0, 0);\n\t\t\tself._eval(args[1]).connect(op, 0, 1);\n\t\t\treturn op;\n\t\t}\n\t\tfunction applyUnary(Constructor, args, self){\n\t\t\tvar op = new Constructor();\n\t\t\tself._eval(args[0]).connect(op, 0, 0);\n\t\t\treturn op;\n\t\t}\n\t\tfunction getNumber(arg){\n\t\t\treturn arg ? parseFloat(arg) : undefined;\n\t\t}\n\t\tfunction literalNumber(arg){\n\t\t\treturn arg && arg.args ? parseFloat(arg.args) : undefined;\n\t\t}\n\n\t\t/*\n\t\t *  the Expressions that Tone.Expr can parse.\n\t\t *\n\t\t *  each expression belongs to a group and contains a regexp \n\t\t *  for selecting the operator as well as that operators method\n\t\t *  \n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t\tTone.Expr._Expressions = {\n\t\t\t//values\n\t\t\t\"value\" : {\n\t\t\t\t\"signal\" : {\n\t\t\t\t\tregexp : /^\\d+\\.\\d+|^\\d+/,\n\t\t\t\t\tmethod : function(arg){\n\t\t\t\t\t\tvar sig = new Tone.Signal(getNumber(arg));\n\t\t\t\t\t\treturn sig;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"input\" : {\n\t\t\t\t\tregexp : /^\\$\\d/,\n\t\t\t\t\tmethod : function(arg, self){\n\t\t\t\t\t\treturn self.input[getNumber(arg.substr(1))];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t//syntactic glue\n\t\t\t\"glue\" : {\n\t\t\t\t\"(\" : {\n\t\t\t\t\tregexp : /^\\(/,\n\t\t\t\t},\n\t\t\t\t\")\" : {\n\t\t\t\t\tregexp : /^\\)/,\n\t\t\t\t},\n\t\t\t\t\",\" : {\n\t\t\t\t\tregexp : /^,/,\n\t\t\t\t}\n\t\t\t},\n\t\t\t//functions\n\t\t\t\"func\" : {\n\t\t\t\t\"abs\" :  {\n\t\t\t\t\tregexp : /^abs/,\n\t\t\t\t\tmethod : applyUnary.bind(this, Tone.Abs)\n\t\t\t\t},\n\t\t\t\t\"min\" : {\n\t\t\t\t\tregexp : /^min/,\n\t\t\t\t\tmethod : applyBinary.bind(this, Tone.Min)\n\t\t\t\t},\n\t\t\t\t\"max\" : {\n\t\t\t\t\tregexp : /^max/,\n\t\t\t\t\tmethod : applyBinary.bind(this, Tone.Max)\n\t\t\t\t},\n\t\t\t\t\"if\" :  {\n\t\t\t\t\tregexp : /^if/,\n\t\t\t\t\tmethod : function(args, self){\n\t\t\t\t\t\tvar op = new Tone.IfThenElse();\n\t\t\t\t\t\tself._eval(args[0]).connect(op.if);\n\t\t\t\t\t\tself._eval(args[1]).connect(op.then);\n\t\t\t\t\t\tself._eval(args[2]).connect(op.else);\n\t\t\t\t\t\treturn op;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"gt0\" : {\n\t\t\t\t\tregexp : /^gt0/,\n\t\t\t\t\tmethod : applyUnary.bind(this, Tone.GreaterThanZero)\n\t\t\t\t},\n\t\t\t\t\"eq0\" : {\n\t\t\t\t\tregexp : /^eq0/,\n\t\t\t\t\tmethod : applyUnary.bind(this, Tone.EqualZero)\n\t\t\t\t},\n\t\t\t\t\"mod\" : {\n\t\t\t\t\tregexp : /^mod/,\n\t\t\t\t\tmethod : function(args, self){\n\t\t\t\t\t\tvar modulus = literalNumber(args[1]);\n\t\t\t\t\t\tvar op = new Tone.Modulo(modulus);\n\t\t\t\t\t\tself._eval(args[0]).connect(op);\n\t\t\t\t\t\treturn op;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"pow\" : {\n\t\t\t\t\tregexp : /^pow/,\n\t\t\t\t\tmethod : function(args, self){\n\t\t\t\t\t\tvar exp = literalNumber(args[1]);\n\t\t\t\t\t\tvar op = new Tone.Pow(exp);\n\t\t\t\t\t\tself._eval(args[0]).connect(op);\n\t\t\t\t\t\treturn op;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\t//binary expressions\n\t\t\t\"binary\" : {\n\t\t\t\t\"+\" : {\n\t\t\t\t\tregexp : /^\\+/,\n\t\t\t\t\tprecedence : 1,\n\t\t\t\t\tmethod : applyBinary.bind(this, Tone.Add)\n\t\t\t\t},\n\t\t\t\t\"-\" : {\n\t\t\t\t\tregexp : /^\\-/,\n\t\t\t\t\tprecedence : 1,\n\t\t\t\t\tmethod : function(args, self){\n\t\t\t\t\t\t//both unary and binary op\n\t\t\t\t\t\tif (args.length === 1){\n\t\t\t\t\t\t\treturn applyUnary(Tone.Negate, args, self);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn applyBinary(Tone.Subtract, args, self);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"*\" : {\n\t\t\t\t\tregexp : /^\\*/,\n\t\t\t\t\tprecedence : 0,\n\t\t\t\t\tmethod : applyBinary.bind(this, Tone.Multiply)\n\t\t\t\t},\n\t\t\t\t\">\" : {\n\t\t\t\t\tregexp : /^\\>/,\n\t\t\t\t\tprecedence : 2,\n\t\t\t\t\tmethod : applyBinary.bind(this, Tone.GreaterThan)\n\t\t\t\t},\n\t\t\t\t\"<\" : {\n\t\t\t\t\tregexp : /^</,\n\t\t\t\t\tprecedence : 2,\n\t\t\t\t\tmethod : applyBinary.bind(this, Tone.LessThan)\n\t\t\t\t},\n\t\t\t\t\"==\" : {\n\t\t\t\t\tregexp : /^==/,\n\t\t\t\t\tprecedence : 3,\n\t\t\t\t\tmethod : applyBinary.bind(this, Tone.Equal)\n\t\t\t\t},\n\t\t\t\t\"&&\" : {\n\t\t\t\t\tregexp : /^&&/,\n\t\t\t\t\tprecedence : 4,\n\t\t\t\t\tmethod : applyBinary.bind(this, Tone.AND)\n\t\t\t\t},\n\t\t\t\t\"||\" : {\n\t\t\t\t\tregexp : /^\\|\\|/,\n\t\t\t\t\tprecedence : 5,\n\t\t\t\t\tmethod : applyBinary.bind(this, Tone.OR)\n\t\t\t\t},\n\t\t\t},\n\t\t\t//unary expressions\n\t\t\t\"unary\" : {\n\t\t\t\t\"-\" : {\n\t\t\t\t\tregexp : /^\\-/,\n\t\t\t\t\tmethod : applyUnary.bind(this, Tone.Negate)\n\t\t\t\t},\n\t\t\t\t\"!\" : {\n\t\t\t\t\tregexp : /^\\!/,\n\t\t\t\t\tmethod : applyUnary.bind(this, Tone.NOT)\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\t\t\n\t\t/**\n\t\t *  @param   {string} expr the expression string\n\t\t *  @return  {number}      the input count\n\t\t *  @private\n\t\t */\n\t\tTone.Expr.prototype._parseInputs = function(expr){\n\t\t\tvar inputArray = expr.match(/\\$\\d/g);\n\t\t\tvar inputMax = 0;\n\t\t\tif (inputArray !== null){\n\t\t\t\tfor (var i = 0; i < inputArray.length; i++){\n\t\t\t\t\tvar inputNum = parseInt(inputArray[i].substr(1)) + 1;\n\t\t\t\t\tinputMax = Math.max(inputMax, inputNum);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn inputMax;\n\t\t};\n\n\t\t/**\n\t\t *  @param   {Array} args \tan array of arguments\n\t\t *  @return  {string} the results of the replacements being replaced\n\t\t *  @private\n\t\t */\n\t\tTone.Expr.prototype._replacements = function(args){\n\t\t\tvar expr = args.shift();\n\t\t\tfor (var i = 0; i < args.length; i++){\n\t\t\t\texpr = expr.replace(/\\%/i, args[i]);\n\t\t\t}\n\t\t\treturn expr;\n\t\t};\n\n\t\t/**\n\t\t *  tokenize the expression based on the Expressions object\n\t\t *  @param   {string} expr \n\t\t *  @return  {Object}      returns two methods on the tokenized list, next and peek\n\t\t *  @private\n\t\t */\n\t\tTone.Expr.prototype._tokenize = function(expr){\n\t\t\tvar position = -1;\n\t\t\tvar tokens = [];\n\n\t\t\twhile(expr.length > 0){\n\t\t\t\texpr = expr.trim();\n\t\t\t\tvar token =  getNextToken(expr);\n\t\t\t\ttokens.push(token);\n\t\t\t\texpr = expr.substr(token.value.length);\n\t\t\t}\n\n\t\t\tfunction getNextToken(expr){\n\t\t\t\tfor (var type in Tone.Expr._Expressions){\n\t\t\t\t\tvar group = Tone.Expr._Expressions[type];\n\t\t\t\t\tfor (var opName in group){\n\t\t\t\t\t\tvar op = group[opName];\n\t\t\t\t\t\tvar reg = op.regexp;\n\t\t\t\t\t\tvar match = expr.match(reg);\n\t\t\t\t\t\tif (match !== null){\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\ttype : type,\n\t\t\t\t\t\t\t\tvalue : match[0],\n\t\t\t\t\t\t\t\tmethod : op.method\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthrow new SyntaxError(\"Unexpected token \"+expr);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tnext : function(){\n\t\t\t\t\treturn tokens[++position];\n\t\t\t\t},\n\t\t\t\tpeek : function(){\n\t\t\t\t\treturn tokens[position + 1];\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\n\t\t/**\n\t\t *  recursively parse the string expression into a syntax tree\n\t\t *  \n\t\t *  @param   {string} expr \n\t\t *  @return  {Object}\n\t\t *  @private\n\t\t */\n\t\tTone.Expr.prototype._parseTree = function(expr){\n\t\t\tvar lexer = this._tokenize(expr);\n\t\t\tvar isUndef = this.isUndef.bind(this);\n\n\t\t\tfunction matchSyntax(token, syn) {\n\t\t\t\treturn !isUndef(token) && \n\t\t\t\t\ttoken.type === \"glue\" &&\n\t\t\t\t\ttoken.value === syn;\n\t\t\t}\n\n\t\t\tfunction matchGroup(token, groupName, prec) {\n\t\t\t\tvar ret = false;\n\t\t\t\tvar group = Tone.Expr._Expressions[groupName];\n\t\t\t\tif (!isUndef(token)){\n\t\t\t\t\tfor (var opName in group){\n\t\t\t\t\t\tvar op = group[opName];\n\t\t\t\t\t\tif (op.regexp.test(token.value)){\n\t\t\t\t\t\t\tif (!isUndef(prec)){\n\t\t\t\t\t\t\t\tif(op.precedence === prec){\t\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\tfunction parseExpression(precedence) {\n\t\t\t\tif (isUndef(precedence)){\n\t\t\t\t\tprecedence = 5;\n\t\t\t\t}\n\t\t\t\tvar expr;\n\t\t\t\tif (precedence < 0){\n\t\t\t\t\texpr = parseUnary();\n\t\t\t\t} else {\n\t\t\t\t\texpr = parseExpression(precedence-1);\n\t\t\t\t}\n\t\t\t\tvar token = lexer.peek();\n\t\t\t\twhile (matchGroup(token, \"binary\", precedence)) {\n\t\t\t\t\ttoken = lexer.next();\n\t\t\t\t\texpr = {\n\t\t\t\t\t\toperator: token.value,\n\t\t\t\t\t\tmethod : token.method,\n\t\t\t\t\t\targs : [\n\t\t\t\t\t\t\texpr,\n\t\t\t\t\t\t\tparseExpression(precedence)\n\t\t\t\t\t\t]\n\t\t\t\t\t};\n\t\t\t\t\ttoken = lexer.peek();\n\t\t\t\t}\n\t\t\t\treturn expr;\n\t\t\t}\n\n\t\t\tfunction parseUnary() {\n\t\t\t\tvar token, expr;\n\t\t\t\ttoken = lexer.peek();\n\t\t\t\tif (matchGroup(token, \"unary\")) {\n\t\t\t\t\ttoken = lexer.next();\n\t\t\t\t\texpr = parseUnary();\n\t\t\t\t\treturn {\n\t\t\t\t\t\toperator: token.value,\n\t\t\t\t\t\tmethod : token.method,\n\t\t\t\t\t\targs : [expr]\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn parsePrimary();\n\t\t\t}\n\n\t\t\tfunction parsePrimary() {\n\t\t\t\tvar token, expr;\n\t\t\t\ttoken = lexer.peek();\n\t\t\t\tif (isUndef(token)) {\n\t\t\t\t\tthrow new SyntaxError(\"Unexpected termination of expression\");\n\t\t\t\t}\n\t\t\t\tif (token.type === \"func\") {\n\t\t\t\t\ttoken = lexer.next();\n\t\t\t\t\treturn parseFunctionCall(token);\n\t\t\t\t}\n\t\t\t\tif (token.type === \"value\") {\n\t\t\t\t\ttoken = lexer.next();\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmethod : token.method,\n\t\t\t\t\t\targs : token.value\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif (matchSyntax(token, \"(\")) {\n\t\t\t\t\tlexer.next();\n\t\t\t\t\texpr = parseExpression();\n\t\t\t\t\ttoken = lexer.next();\n\t\t\t\t\tif (!matchSyntax(token, \")\")) {\n\t\t\t\t\t\tthrow new SyntaxError(\"Expected )\");\n\t\t\t\t\t}\n\t\t\t\t\treturn expr;\n\t\t\t\t}\n\t\t\t\tthrow new SyntaxError(\"Parse error, cannot process token \" + token.value);\n\t\t\t}\n\n\t\t\tfunction parseFunctionCall(func) {\n\t\t\t\tvar token, args = [];\n\t\t\t\ttoken = lexer.next();\n\t\t\t\tif (!matchSyntax(token, \"(\")) {\n\t\t\t\t\tthrow new SyntaxError(\"Expected ( in a function call \\\"\" + func.value + \"\\\"\");\n\t\t\t\t}\n\t\t\t\ttoken = lexer.peek();\n\t\t\t\tif (!matchSyntax(token, \")\")) {\n\t\t\t\t\targs = parseArgumentList();\n\t\t\t\t}\n\t\t\t\ttoken = lexer.next();\n\t\t\t\tif (!matchSyntax(token, \")\")) {\n\t\t\t\t\tthrow new SyntaxError(\"Expected ) in a function call \\\"\" + func.value + \"\\\"\");\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tmethod : func.method,\n\t\t\t\t\targs : args,\n\t\t\t\t\tname : name\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tfunction parseArgumentList() {\n\t\t\t\tvar token, expr, args = [];\n\t\t\t\twhile (true) {\n\t\t\t\t\texpr = parseExpression();\n\t\t\t\t\tif (isUndef(expr)) {\n\t\t\t\t\t\t// TODO maybe throw exception?\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\targs.push(expr);\n\t\t\t\t\ttoken = lexer.peek();\n\t\t\t\t\tif (!matchSyntax(token, \",\")) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tlexer.next();\n\t\t\t\t}\n\t\t\t\treturn args;\n\t\t\t}\n\n\t\t\treturn parseExpression();\n\t\t};\n\n\t\t/**\n\t\t *  recursively evaluate the expression tree\n\t\t *  @param   {Object} tree \n\t\t *  @return  {AudioNode}      the resulting audio node from the expression\n\t\t *  @private\n\t\t */\n\t\tTone.Expr.prototype._eval = function(tree){\n\t\t\tif (!this.isUndef(tree)){\n\t\t\t\tvar node = tree.method(tree.args, this);\n\t\t\t\tthis._nodes.push(node);\n\t\t\t\treturn node;\n\t\t\t} \n\t\t};\n\n\t\t/**\n\t\t *  dispose all the nodes\n\t\t *  @private\n\t\t */\n\t\tTone.Expr.prototype._disposeNodes = function(){\n\t\t\tfor (var i = 0; i < this._nodes.length; i++){\n\t\t\t\tvar node = this._nodes[i];\n\t\t\t\tif (this.isFunction(node.dispose)) {\n\t\t\t\t\tnode.dispose();\n\t\t\t\t} else if (this.isFunction(node.disconnect)) {\n\t\t\t\t\tnode.disconnect();\n\t\t\t\t}\n\t\t\t\tnode = null;\n\t\t\t\tthis._nodes[i] = null;\n\t\t\t}\n\t\t\tthis._nodes = null;\n\t\t};\n\n\t\t/**\n\t\t *  clean up\n\t\t */\n\t\tTone.Expr.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._disposeNodes();\n\t\t};\n\n\t\treturn Tone.Expr;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class Convert an incoming signal between 0, 1 to an equal power gain scale.\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @example\n\t\t *  var eqPowGain = new Tone.EqualPowerGain();\n\t\t */\n\t\tTone.EqualPowerGain = function(){\n\n\t\t\t/**\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._eqPower = this.input = this.output = new Tone.WaveShaper(function(val){\n\t\t\t\tif (Math.abs(val) < 0.001){\n\t\t\t\t\t//should output 0 when input is 0\n\t\t\t\t\treturn 0;\n\t\t\t\t} else {\n\t\t\t\t\treturn this.equalPowerScale(val);\n\t\t\t\t}\n\t\t\t}.bind(this), 4096);\n\t\t};\n\n\t\tTone.extend(Tone.EqualPowerGain, Tone.SignalBase);\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.EqualPowerGain} `this`\n\t\t */\n\t\tTone.EqualPowerGain.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._eqPower.dispose();\n\t\t\tthis._eqPower = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.EqualPowerGain;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t * @class  Equal power fading control values:<br>\n\t\t * \t       0 = 100% input 0<br>\n\t\t * \t       1 = 100% input 1<br>\n\t\t *\n\t\t * @constructor\n\t\t * @extends {Tone}\n\t\t * @param {number} [initialFade=0.5]\n\t\t * @example\n\t\t * var crossFade = new Tone.CrossFade(0.5);\n\t\t * effectA.connect(crossFade, 0, 0);\n\t\t * effectB.connect(crossFade, 0, 1);\n\t\t * crossFade.fade.value = 0;\n\t\t * // ^ only effectA is output\n\t\t * crossFade.fade.value = 1;\n\t\t * // ^ only effectB is output\n\t\t * crossFade.fade.value = 0.5;\n\t\t * // ^ the two signals are mixed equally. \n\t\t */\t\t\n\t\tTone.CrossFade = function(initialFade){\n\n\t\t\tTone.call(this, 2, 1);\n\n\t\t\t/**\n\t\t\t *  the first input. input \"a\".\n\t\t\t *  @type {GainNode}\n\t\t\t */\n\t\t\tthis.a = this.input[0] = this.context.createGain();\n\n\t\t\t/**\n\t\t\t *  the second input. input \"b\"\n\t\t\t *  @type {GainNode}\n\t\t\t */\n\t\t\tthis.b = this.input[1] = this.context.createGain();\n\n\t\t\t/**\n\t\t\t *  0 is 100% signal `a` (input 0) and 1 is 100% signal `b` (input 1).\n\t\t\t *  Values between 0-1.\n\t\t\t *  \n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.fade = new Tone.Signal(this.defaultArg(initialFade, 0.5), Tone.Signal.Units.Normal);\n\n\t\t\t/**\n\t\t\t *  equal power gain cross fade\n\t\t\t *  @private\n\t\t\t *  @type {Tone.EqualPowerGain}\n\t\t\t */\n\t\t\tthis._equalPowerA = new Tone.EqualPowerGain();\n\n\t\t\t/**\n\t\t\t *  equal power gain cross fade\n\t\t\t *  @private\n\t\t\t *  @type {Tone.EqualPowerGain}\n\t\t\t */\n\t\t\tthis._equalPowerB = new Tone.EqualPowerGain();\n\t\t\t\n\t\t\t/**\n\t\t\t *  invert the incoming signal\n\t\t\t *  @private\n\t\t\t *  @type {Tone}\n\t\t\t */\n\t\t\tthis._invert = new Tone.Expr(\"1 - $0\");\n\n\t\t\t//connections\n\t\t\tthis.a.connect(this.output);\n\t\t\tthis.b.connect(this.output);\n\t\t\tthis.fade.chain(this._equalPowerB, this.b.gain);\n\t\t\tthis.fade.chain(this._invert, this._equalPowerA, this.a.gain);\n\t\t};\n\n\t\tTone.extend(Tone.CrossFade);\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.CrossFade} `this`\n\t\t */\n\t\tTone.CrossFade.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._equalPowerA.dispose();\n\t\t\tthis._equalPowerA = null;\n\t\t\tthis._equalPowerB.dispose();\n\t\t\tthis._equalPowerB = null;\n\t\t\tthis.fade.dispose();\n\t\t\tthis.fade = null;\n\t\t\tthis._invert.dispose();\n\t\t\tthis._invert = null;\n\t\t\tthis.a.disconnect();\n\t\t\tthis.a = null;\n\t\t\tthis.b.disconnect();\n\t\t\tthis.b = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.CrossFade;\n\t});\n\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class  Filter object which allows for all of the same native methods\n\t\t *          as the BiquadFilter (with AudioParams implemented as Tone.Signals)\n\t\t *          but adds the ability to set the filter rolloff at -12 (default), \n\t\t *          -24 and -48. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {number|Object} [freq=350] the frequency\n\t\t *  @param {string} [type=lowpass] the type of filter\n\t\t *  @param {number} [rolloff=-12] the rolloff which is the drop per octave. \n\t\t *                                 3 choices: -12, -24, and -48\n\t\t *  @example\n\t\t *  var filter = new Tone.Filter(200, \"highpass\");\n\t\t */\n\t\tTone.Filter = function(){\n\t\t\tTone.call(this);\n\n\t\t\tvar options = this.optionsObject(arguments, [\"frequency\", \"type\", \"rolloff\"], Tone.Filter.defaults);\n\n\t\t\t/**\n\t\t\t *  the filter(s)\n\t\t\t *  @type {Array.<BiquadFilterNode>}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._filters = [];\n\n\t\t\t/**\n\t\t\t *  the frequency of the filter\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.frequency = new Tone.Signal(options.frequency, Tone.Signal.Units.Frequency);\n\n\t\t\t/**\n\t\t\t *  the detune parameter\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.detune = new Tone.Signal(0);\n\n\t\t\t/**\n\t\t\t *  the gain of the filter, only used in certain filter types\n\t\t\t *  @type {AudioParam}\n\t\t\t */\n\t\t\tthis.gain = new Tone.Signal(options.gain, Tone.Signal.Units.Decibels);\n\n\t\t\t/**\n\t\t\t *  the Q or Quality of the filter\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.Q = new Tone.Signal(options.Q);\n\n\t\t\t/**\n\t\t\t *  the type of the filter\n\t\t\t *  @type {string}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._type = options.type;\n\n\t\t\t/**\n\t\t\t *  the rolloff value of the filter\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._rolloff = options.rolloff;\n\n\t\t\t//set the rolloff;\n\t\t\tthis.rolloff = options.rolloff;\n\t\t};\n\n\t\tTone.extend(Tone.Filter);\n\n\t\t/**\n\t\t *  the default parameters\n\t\t *\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.Filter.defaults = {\n\t\t\t\"type\" : \"lowpass\",\n\t\t\t\"frequency\" : 350,\n\t\t\t\"rolloff\" : -12,\n\t\t\t\"Q\" : 1,\n\t\t\t\"gain\" : 0,\n\t\t};\n\n\t\t/**\n\t\t * The type of the filter. Types: \"lowpass\", \"highpass\", \n\t\t * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\". \n\t\t * @memberOf Tone.Filter#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t\tObject.defineProperty(Tone.Filter.prototype, \"type\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._type;\n\t\t\t},\n\t\t\tset : function(type){\n\t\t\t\tvar types = [\"lowpass\", \"highpass\", \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n\t\t\t\tif (types.indexOf(type)=== -1){\n\t\t\t\t\tthrow new TypeError(\"Tone.Filter does not have filter type \"+type);\n\t\t\t\t}\n\t\t\t\tthis._type = type;\n\t\t\t\tfor (var i = 0; i < this._filters.length; i++){\n\t\t\t\t\tthis._filters[i].type = type;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * The rolloff of the filter which is the drop in db\n\t\t * per octave. Implemented internally by cascading filters.\n\t\t * Only accepts the values -12, -24, and -48.\n\t\t * @memberOf Tone.Filter#\n\t\t * @type {number}\n\t\t * @name rolloff\n\t\t */\n\t\tObject.defineProperty(Tone.Filter.prototype, \"rolloff\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._rolloff;\n\t\t\t},\n\t\t\tset : function(rolloff){\n\t\t\t\tvar cascadingCount = Math.log(rolloff / -12) / Math.LN2 + 1;\n\t\t\t\t//check the rolloff is valid\n\t\t\t\tif (cascadingCount % 1 !== 0){\n\t\t\t\t\tthrow new RangeError(\"Filter rolloff can only be -12, -24, or -48\");\n\t\t\t\t}\n\t\t\t\tthis._rolloff = rolloff;\n\t\t\t\t//first disconnect the filters and throw them away\n\t\t\t\tthis.input.disconnect();\n\t\t\t\tfor (var i = 0; i < this._filters.length; i++) {\n\t\t\t\t\tthis._filters[i].disconnect();\n\t\t\t\t\tthis._filters[i] = null;\n\t\t\t\t}\n\t\t\t\tthis._filters = new Array(cascadingCount);\n\t\t\t\tfor (var count = 0; count < cascadingCount; count++){\n\t\t\t\t\tvar filter = this.context.createBiquadFilter();\n\t\t\t\t\tfilter.type = this._type;\n\t\t\t\t\tthis.frequency.connect(filter.frequency);\n\t\t\t\t\tthis.detune.connect(filter.detune);\n\t\t\t\t\tthis.Q.connect(filter.Q);\n\t\t\t\t\tthis.gain.connect(filter.gain);\n\t\t\t\t\tthis._filters[count] = filter;\n\t\t\t\t}\n\t\t\t\t//connect them up\n\t\t\t\tvar connectionChain = [this.input].concat(this._filters).concat([this.output]);\n\t\t\t\tthis.connectSeries.apply(this, connectionChain);\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @return {Tone.Filter} `this`\n\t\t */\n\t\tTone.Filter.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tfor (var i = 0; i < this._filters.length; i++) {\n\t\t\t\tthis._filters[i].disconnect();\n\t\t\t\tthis._filters[i] = null;\n\t\t\t}\n\t\t\tthis._filters = null;\n\t\t\tthis.frequency.dispose();\n\t\t\tthis.Q.dispose();\n\t\t\tthis.frequency = null;\n\t\t\tthis.Q = null;\n\t\t\tthis.detune.dispose();\n\t\t\tthis.detune = null;\n\t\t\tthis.gain.dispose();\n\t\t\tthis.gain = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.Filter;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class Split the incoming signal into three bands (low, mid, high)\n\t\t *         with two crossover frequency controls. \n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {number} lowFrequency the low/mid crossover frequency\n\t\t *  @param {number} highFrequency the mid/high crossover frequency\n\t\t */\n\t\tTone.MultibandSplit = function(){\n\t\t\tvar options = this.optionsObject(arguments, [\"lowFrequency\", \"highFrequency\"], Tone.MultibandSplit.defaults);\n\n\t\t\t/**\n\t\t\t *  the input\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis.input = this.context.createGain();\n\n\t\t\t/**\n\t\t\t *  the outputs\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis.output = new Array(3);\n\n\t\t\t/**\n\t\t\t *  the low band\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t\t\tthis.low = this.output[0] = new Tone.Filter(0, \"lowpass\");\n\n\t\t\t/**\n\t\t\t *  the lower filter of the mid band\n\t\t\t *  @type {Tone.Filter}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._lowMidFilter = new Tone.Filter(0, \"highpass\");\n\n\t\t\t/**\n\t\t\t *  the mid band\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t\t\tthis.mid = this.output[1] = new Tone.Filter(0, \"lowpass\");\n\n\t\t\t/**\n\t\t\t *  the high band\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t\t\tthis.high = this.output[2] = new Tone.Filter(0, \"highpass\");\n\n\t\t\t/**\n\t\t\t *  the low/mid crossover frequency\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.lowFrequency = new Tone.Signal(options.lowFrequency);\n\n\t\t\t/**\n\t\t\t *  the mid/high crossover frequency\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.highFrequency = new Tone.Signal(options.highFrequency);\n\n\t\t\tthis.input.fan(this.low, this.high);\n\t\t\tthis.input.chain(this._lowMidFilter, this.mid);\n\t\t\t//the frequency control signal\n\t\t\tthis.lowFrequency.connect(this.low.frequency);\n\t\t\tthis.lowFrequency.connect(this._lowMidFilter.frequency);\n\t\t\tthis.highFrequency.connect(this.mid.frequency);\n\t\t\tthis.highFrequency.connect(this.high.frequency);\n\t\t};\n\n\t\tTone.extend(Tone.MultibandSplit);\n\n\t\t/**\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.MultibandSplit.defaults = {\n\t\t\t\"lowFrequency\" : 400,\n\t\t\t\"highFrequency\" : 2500\n\t\t};\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.MultibandSplit} `this`\n\t\t */\n\t\tTone.MultibandSplit.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis.low.dispose();\n\t\t\tthis._lowMidFilter.dispose();\n\t\t\tthis.mid.dispose();\n\t\t\tthis.high.dispose();\n\t\t\tthis.lowFrequency.dispose();\n\t\t\tthis.highFrequency.dispose();\n\t\t\tthis.low = null;\n\t\t\tthis._lowMidFilter = null;\n\t\t\tthis.mid = null;\n\t\t\tthis.high = null;\n\t\t\tthis.lowFrequency = null;\n\t\t\tthis.highFrequency = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.MultibandSplit;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class A 3 band EQ with control over low, mid, and high gain as\n\t\t *         well as the low and high crossover frequencies. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  \n\t\t *  @param {number|object} [lowLevel=0] the gain applied to the lows (in db)\n\t\t *  @param {number} [midLevel=0] the gain applied to the mid (in db)\n\t\t *  @param {number} [highLevel=0] the gain applied to the high (in db)\n\t\t *  @example\n\t\t *  var eq = new Tone.EQ(-10, 3, -20);\n\t\t */\n\t\tTone.EQ = function(){\n\n\t\t\tvar options = this.optionsObject(arguments, [\"low\", \"mid\", \"high\"], Tone.EQ.defaults);\n\n\t\t\t/**\n\t\t\t *  the output node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis.output = this.context.createGain();\n\n\t\t\t/**\n\t\t\t *  the multiband split\n\t\t\t *  @type {Tone.MultibandSplit}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._multibandSplit = this.input = new Tone.MultibandSplit({\n\t\t\t\t\"lowFrequency\" : options.lowFrequency,\n\t\t\t\t\"highFrequency\" : options.highFrequency\n\t\t\t});\n\n\t\t\t/**\n\t\t\t *  the low gain\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._lowGain = this.context.createGain();\n\n\t\t\t/**\n\t\t\t *  the mid gain\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._midGain = this.context.createGain();\n\n\t\t\t/**\n\t\t\t *  the high gain\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._highGain = this.context.createGain();\n\n\t\t\t/**\n\t\t\t * The gain in decibels of the low part\n\t\t\t * @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.low = new Tone.Signal(this._lowGain.gain, Tone.Signal.Units.Decibels);\n\n\t\t\t/**\n\t\t\t * The gain in decibels of the mid part\n\t\t\t * @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.mid = new Tone.Signal(this._midGain.gain, Tone.Signal.Units.Decibels);\n\n\t\t\t/**\n\t\t\t * The gain in decibels of the high part\n\t\t\t * @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.high = new Tone.Signal(this._highGain.gain, Tone.Signal.Units.Decibels);\n\n\t\t\t/**\n\t\t\t *  the low/mid crossover frequency\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.lowFrequency = this._multibandSplit.lowFrequency;\n\n\t\t\t/**\n\t\t\t *  the mid/high crossover frequency\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.highFrequency = this._multibandSplit.highFrequency;\n\n\t\t\t//the frequency bands\n\t\t\tthis._multibandSplit.low.chain(this._lowGain, this.output);\n\t\t\tthis._multibandSplit.mid.chain(this._midGain, this.output);\n\t\t\tthis._multibandSplit.high.chain(this._highGain, this.output);\n\t\t\t//set the gains\n\t\t\tthis.high.value = options.low;\n\t\t\tthis.mid.value = options.mid;\n\t\t\tthis.low.value = options.high;\n\t\t};\n\n\t\tTone.extend(Tone.EQ);\n\n\t\t/**\n\t\t *  the default values\n\t\t *  @type {Object}\n\t\t *  @static\n\t\t */\n\t\tTone.EQ.defaults = {\n\t\t\t\"low\" : 0,\n\t\t\t\"mid\" : 0,\n\t\t\t\"high\" : 0,\n\t\t\t\"lowFrequency\" : 400,\n\t\t\t\"highFrequency\" : 2500\n\t\t};\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.EQ} `this`\n\t\t */\n\t\tTone.EQ.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._multibandSplit.dispose();\n\t\t\tthis._multibandSplit = null;\n\t\t\tthis.lowFrequency = null;\n\t\t\tthis.highFrequency = null;\n\t\t\tthis._lowGain.disconnect();\n\t\t\tthis._lowGain = null;\n\t\t\tthis._midGain.disconnect();\n\t\t\tthis._midGain = null;\n\t\t\tthis._highGain.disconnect();\n\t\t\tthis._highGain = null;\n\t\t\tthis.low.dispose();\n\t\t\tthis.low = null;\n\t\t\tthis.mid.dispose();\n\t\t\tthis.mid = null;\n\t\t\tthis.high.dispose();\n\t\t\tthis.high = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.EQ;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\t\t\n\t\t/**\n\t\t *  @class  Performs a linear scaling on an input signal.\n\t\t *          Scales a normal gain input range [0,1] to between\n\t\t *          outputMin and outputMax\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {number} [outputMin=0]\n\t\t *  @param {number} [outputMax=1]\n\t\t *  @example\n\t\t *  var scale = new Tone.Scale(50, 100);\n\t\t *  var signal = new Tone.Signal(0.5).connect(scale);\n\t\t *  //the output of scale equals 75\n\t\t */\n\t\tTone.Scale = function(outputMin, outputMax){\n\n\t\t\t/** \n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t\t\tthis._outputMin = this.defaultArg(outputMin, 0);\n\n\t\t\t/** \n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t\t\tthis._outputMax = this.defaultArg(outputMax, 1);\n\n\n\t\t\t/** \n\t\t\t *  @private\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._scale = this.input = new Tone.Multiply(1);\n\t\t\t\n\t\t\t/** \n\t\t\t *  @private\n\t\t\t *  @type {Tone.Add}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._add = this.output = new Tone.Add(0);\n\n\t\t\tthis._scale.connect(this._add);\n\t\t\tthis._setRange();\n\t\t};\n\n\t\tTone.extend(Tone.Scale, Tone.SignalBase);\n\n\t\t/**\n\t\t * The minimum output value.\n\t\t * @memberOf Tone.Scale#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t\tObject.defineProperty(Tone.Scale.prototype, \"min\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._outputMin;\n\t\t\t},\n\t\t\tset : function(min){\n\t\t\t\tthis._outputMin = min;\n\t\t\t\tthis._setRange();\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * The maximum output value.\n\t\t * @memberOf Tone.Scale#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t\tObject.defineProperty(Tone.Scale.prototype, \"max\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._outputMax;\n\t\t\t},\n\t\t\tset : function(max){\n\t\t\t\tthis._outputMax = max;\n\t\t\t\tthis._setRange();\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t *  set the values\n\t\t *  @private\n\t\t */\n\t\tTone.Scale.prototype._setRange = function() {\n\t\t\tthis._add.value = this._outputMin;\n\t\t\tthis._scale.value = this._outputMax - this._outputMin;\n\t\t};\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.Scale} `this`\n\t\t */\n\t\tTone.Scale.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._add.dispose();\n\t\t\tthis._add = null;\n\t\t\tthis._scale.dispose();\n\t\t\tthis._scale = null;\n\t\t\treturn this;\n\t\t}; \n\n\t\treturn Tone.Scale;\n\t});\n\n\tToneModule( \n\tfunction(Tone){\n\t\t\n\t\t/**\n\t\t *  @class  Performs an exponential scaling on an input signal.\n\t\t *          Scales a normal gain range [0,1] exponentially\n\t\t *          to the output range of outputMin to outputMax.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {number} [outputMin=0]\n\t\t *  @param {number} [outputMax=1]\n\t\t *  @param {number} [exponent=2] the exponent which scales the incoming signal\n\t\t */\n\t\tTone.ScaleExp = function(outputMin, outputMax, exponent){\n\n\t\t\t/**\n\t\t\t *  scale the input to the output range\n\t\t\t *  @type {Tone.Scale}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._scale = this.output = new Tone.Scale(outputMin, outputMax);\n\n\t\t\t/**\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Pow}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._exp = this.input = new Tone.Pow(this.defaultArg(exponent, 2));\n\n\t\t\tthis._exp.connect(this._scale);\n\t\t};\n\n\t\tTone.extend(Tone.ScaleExp, Tone.SignalBase);\n\n\t\t/**\n\t\t * The minimum output value.\n\t\t * @memberOf Tone.ScaleExp#\n\t\t * @type {number}\n\t\t * @name exponent\n\t\t */\n\t\tObject.defineProperty(Tone.ScaleExp.prototype, \"exponent\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._exp.value;\n\t\t\t},\n\t\t\tset : function(exp){\n\t\t\t\tthis._exp.value = exp;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * The minimum output value.\n\t\t * @memberOf Tone.ScaleExp#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t\tObject.defineProperty(Tone.ScaleExp.prototype, \"min\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._scale.min;\n\t\t\t},\n\t\t\tset : function(min){\n\t\t\t\tthis._scale.min = min;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * The maximum output value.\n\t\t * @memberOf Tone.ScaleExp#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t\tObject.defineProperty(Tone.ScaleExp.prototype, \"max\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._scale.max;\n\t\t\t},\n\t\t\tset : function(max){\n\t\t\t\tthis._scale.max = max;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.ScaleExp} `this`\n\t\t */\n\t\tTone.ScaleExp.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._scale.dispose();\n\t\t\tthis._scale = null;\n\t\t\tthis._exp.dispose();\n\t\t\tthis._exp = null;\n\t\t\treturn this;\n\t\t}; \n\n\n\t\treturn Tone.ScaleExp;\n\t});\n\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class A comb filter with feedback.\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {number} [minDelay=0.01] the minimum delay time which the filter can have\n\t\t *  @param {number} [maxDelay=1] the maximum delay time which the filter can have\n\t\t */\n\t\tTone.FeedbackCombFilter = function(){\n\n\t\t\tTone.call(this);\n\t\t\tvar options = this.optionsObject(arguments, [\"minDelay\", \"maxDelay\"], Tone.FeedbackCombFilter.defaults);\n\n\t\t\tvar minDelay = options.minDelay;\n\t\t\tvar maxDelay = options.maxDelay;\n\t\t\t//the delay * samplerate = number of samples. \n\t\t\t// buffersize / number of samples = number of delays needed per buffer frame\n\t\t\tvar delayCount = Math.ceil(this.bufferSize / (minDelay * this.context.sampleRate));\n\t\t\t//set some ranges\n\t\t\tdelayCount = Math.min(delayCount, 10);\n\t\t\tdelayCount = Math.max(delayCount, 1);\n\n\t\t\t/**\n\t\t\t *  the number of filter delays\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._delayCount = delayCount;\n\n\t\t\t/**\n\t\t\t *  @type {Array.<FilterDelay>}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._delays = new Array(this._delayCount);\n\n\t\t\t/**\n\t\t\t *  the resonance control\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.resonance = new Tone.Signal(options.resonance, Tone.Signal.Units.Normal);\n\n\t\t\t/**\n\t\t\t *  scale the resonance value to the normal range\n\t\t\t *  @type {Tone.Scale}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._resScale = new Tone.ScaleExp(0.01, 1 / this._delayCount - 0.001, 0.5);\n\n\t\t\t/**\n\t\t\t *  internal flag for keeping track of when frequency\n\t\t\t *  correction has been used\n\t\t\t *  @type {boolean}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._highFrequencies = false;\n\n\t\t\t/**\n\t\t\t *  internal counter of delayTime\n\t\t\t *  @type {Tone.TIme}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._delayTime = options.delayTime;\n\n\t\t\t/**\n\t\t\t *  the feedback node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._feedback = this.context.createGain();\n\n\t\t\t//make the filters\n\t\t\tfor (var i = 0; i < this._delayCount; i++) {\n\t\t\t\tvar delay = this.context.createDelay(maxDelay);\n\t\t\t\tdelay.delayTime.value = minDelay;\n\t\t\t\tdelay.connect(this._feedback);\n\t\t\t\tthis._delays[i] = delay;\n\t\t\t}\n\n\t\t\t//connections\n\t\t\tthis.connectSeries.apply(this, this._delays);\n\t\t\tthis.input.connect(this._delays[0]);\n\t\t\t//set the delay to the min value initially\n\t\t\tthis._feedback.connect(this._delays[0]);\n\t\t\t//resonance control\n\t\t\tthis.resonance.chain(this._resScale, this._feedback.gain);\n\t\t\tthis._feedback.connect(this.output);\n\t\t\tthis.delayTime = options.delayTime;\n\t\t};\n\n\t\tTone.extend(Tone.FeedbackCombFilter);\n\n\t\t/**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.FeedbackCombFilter.defaults = {\n\t\t\t\"resonance\" : 0.5,\n\t\t\t\"minDelay\" : 0.1,\n\t\t\t\"maxDelay\" : 1,\n\t\t\t\"delayTime\" : 0.1\n\t\t};\n\n\t\t/**\n\t\t * the delay time of the FeedbackCombFilter\n\t\t * @memberOf Tone.FeedbackCombFilter#\n\t\t * @type {Tone.Time}\n\t\t * @name delayTime\n\t\t */\n\t\tObject.defineProperty(Tone.FeedbackCombFilter.prototype, \"delayTime\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._delayTime;\n\t\t\t},\n\t\t\tset : function(delayAmount){\n\t\t\t\tthis._delayTime = delayAmount;\n\t\t\t\tdelayAmount = this.toSeconds(delayAmount);\n\t\t\t\t//the number of samples to delay by\n\t\t\t\tvar sampleRate = this.context.sampleRate;\n\t\t\t\tvar delaySamples = sampleRate * delayAmount;\n\t\t\t\t// delayTime corection when frequencies get high\n\t\t\t\tvar now = this.now() + this.bufferTime;\n\t\t\t\tvar cutoff = 100;\n\t\t\t\tif (delaySamples < cutoff){\n\t\t\t\t\tthis._highFrequencies = true;\n\t\t\t\t\tvar changeNumber = Math.round((delaySamples / cutoff) * this._delayCount);\n\t\t\t\t\tfor (var i = 0; i < changeNumber; i++) {\n\t\t\t\t\t\tthis._delays[i].delayTime.setValueAtTime(1 / sampleRate + delayAmount, now);\n\t\t\t\t\t}\n\t\t\t\t\tdelayAmount = Math.floor(delaySamples) / sampleRate;\n\t\t\t\t} else if (this._highFrequencies){\n\t\t\t\t\tthis._highFrequencies = false;\n\t\t\t\t\tfor (var j = 0; j < this._delays.length; j++) {\n\t\t\t\t\t\tthis._delays[j].delayTime.setValueAtTime(delayAmount, now);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.FeedbackCombFilter} `this`\n\t\t */\n\t\tTone.FeedbackCombFilter.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\t//dispose the filter delays\n\t\t\tfor (var i = 0; i < this._delays.length; i++) {\n\t\t\t\tthis._delays[i].disconnect();\n\t\t\t\tthis._delays[i] = null;\n\t\t\t}\n\t\t\tthis._delays = null;\n\t\t\tthis.resonance.dispose();\n\t\t\tthis.resonance = null;\n\t\t\tthis._resScale.dispose();\n\t\t\tthis._resScale = null;\n\t\t\tthis._feedback.disconnect();\n\t\t\tthis._feedback = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.FeedbackCombFilter;\n\t});\n\tToneModule( \n\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class  Follow the envelope of the incoming signal. \n\t\t *          Careful with small (< 0.02) attack or decay values. \n\t\t *          The follower has some ripple which gets exaggerated\n\t\t *          by small values. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Tone.Time} [attack = 0.05] \n\t\t *  @param {Tone.Time} [release = 0.5] \n\t\t *  @example\n\t\t *  var follower = new Tone.Follower(0.2, 0.4);\n\t\t */\n\t\tTone.Follower = function(){\n\n\t\t\tTone.call(this);\n\t\t\tvar options = this.optionsObject(arguments, [\"attack\", \"release\"], Tone.Follower.defaults);\n\n\t\t\t/**\n\t\t\t *  @type {Tone.Abs}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._abs = new Tone.Abs();\n\n\t\t\t/**\n\t\t\t *  the lowpass filter which smooths the input\n\t\t\t *  @type {BiquadFilterNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._filter = this.context.createBiquadFilter();\n\t\t\tthis._filter.type = \"lowpass\";\n\t\t\tthis._filter.frequency.value = 0;\n\t\t\tthis._filter.Q.value = -100;\n\n\t\t\t/**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._frequencyValues = new Tone.WaveShaper();\n\t\t\t\n\t\t\t/**\n\t\t\t *  @type {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._sub = new Tone.Subtract();\n\n\t\t\t/**\n\t\t\t *  @type {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._delay = this.context.createDelay();\n\t\t\tthis._delay.delayTime.value = this.bufferTime;\n\n\t\t\t/**\n\t\t\t *  this keeps it far from 0, even for very small differences\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._mult = new Tone.Multiply(10000);\n\n\t\t\t/**\n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t\t\tthis._attack = options.attack;\n\n\t\t\t/**\n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t\t\tthis._release = options.release;\n\n\t\t\t//the smoothed signal to get the values\n\t\t\tthis.input.chain(this._abs, this._filter, this.output);\n\t\t\t//the difference path\n\t\t\tthis._abs.connect(this._sub, 0, 1);\n\t\t\tthis._filter.chain(this._delay, this._sub);\n\t\t\t//threshold the difference and use the thresh to set the frequency\n\t\t\tthis._sub.chain(this._mult, this._frequencyValues, this._filter.frequency);\n\t\t\t//set the attack and release values in the table\n\t\t\tthis._setAttackRelease(this._attack, this._release);\n\t\t};\n\n\t\tTone.extend(Tone.Follower);\n\n\t\t/**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.Follower.defaults = {\n\t\t\t\"attack\" : 0.05, \n\t\t\t\"release\" : 0.5\n\t\t};\n\n\t\t/**\n\t\t *  sets the attack and release times in the wave shaper\n\t\t *  @param   {Tone.Time} attack  \n\t\t *  @param   {Tone.Time} release \n\t\t *  @private\n\t\t */\n\t\tTone.Follower.prototype._setAttackRelease = function(attack, release){\n\t\t\tvar minTime = this.bufferTime;\n\t\t\tattack = this.secondsToFrequency(this.toSeconds(attack));\n\t\t\trelease = this.secondsToFrequency(this.toSeconds(release));\n\t\t\tattack = Math.max(attack, minTime);\n\t\t\trelease = Math.max(release, minTime);\n\t\t\tthis._frequencyValues.setMap(function(val){\n\t\t\t\tif (val <= 0){\n\t\t\t\t\treturn attack;\n\t\t\t\t} else {\n\t\t\t\t\treturn release;\n\t\t\t\t} \n\t\t\t});\n\t\t};\n\n\t\t/**\n\t\t * The attack time.\n\t\t * @memberOf Tone.Follower#\n\t\t * @type {Tone.Time}\n\t\t * @name attack\n\t\t */\n\t\tObject.defineProperty(Tone.Follower.prototype, \"attack\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._attack;\n\t\t\t},\n\t\t\tset : function(attack){\n\t\t\t\tthis._attack = attack;\n\t\t\t\tthis._setAttackRelease(this._attack, this._release);\t\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * The release time.\n\t\t * @memberOf Tone.Follower#\n\t\t * @type {Tone.Time}\n\t\t * @name release\n\t\t */\n\t\tObject.defineProperty(Tone.Follower.prototype, \"release\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._release;\n\t\t\t},\n\t\t\tset : function(release){\n\t\t\t\tthis._release = release;\n\t\t\t\tthis._setAttackRelease(this._attack, this._release);\t\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t *  borrows the connect method from Signal so that the output can be used\n\t\t *  as a control signal {@link Tone.Signal}\n\t\t *  @function\n\t\t */\n\t\tTone.Follower.prototype.connect = Tone.Signal.prototype.connect;\n\n\t\t/**\n\t\t *  dispose\n\t\t *  @returns {Tone.Follower} `this`\n\t\t */\n\t\tTone.Follower.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._filter.disconnect();\n\t\t\tthis._filter = null;\n\t\t\tthis._frequencyValues.disconnect();\n\t\t\tthis._frequencyValues = null;\n\t\t\tthis._delay.disconnect();\n\t\t\tthis._delay = null;\n\t\t\tthis._sub.disconnect();\n\t\t\tthis._sub = null;\n\t\t\tthis._abs.dispose();\n\t\t\tthis._abs = null;\n\t\t\tthis._mult.dispose();\n\t\t\tthis._mult = null;\n\t\t\tthis._curve = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.Follower;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class  Only pass signal through when it's signal exceeds the\n\t\t *          specified threshold.\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {number} [threshold = -40] the threshold in Decibels\n\t\t *  @param {Tone.Time} [attack = 0.1] the follower's attack time\n\t\t *  @param {Tone.Time} [release = 0.1] the follower's release time\n\t\t *  @example\n\t\t *  var gate = new Tone.Gate(-30, 0.2, 0.3);\n\t\t */\n\t\tTone.Gate = function(){\n\t\t\t\n\t\t\tTone.call(this);\n\t\t\tvar options = this.optionsObject(arguments, [\"threshold\", \"attack\", \"release\"], Tone.Gate.defaults);\n\n\t\t\t/**\n\t\t\t *  @type {Tone.Follower}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._follower = new Tone.Follower(options.attack, options.release);\n\n\t\t\t/**\n\t\t\t *  @type {Tone.GreaterThan}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._gt = new Tone.GreaterThan(this.dbToGain(options.threshold));\n\n\t\t\t//the connections\n\t\t\tthis.input.connect(this.output);\n\t\t\t//the control signal\n\t\t\tthis.input.chain(this._gt, this._follower, this.output.gain);\n\t\t};\n\n\t\tTone.extend(Tone.Gate);\n\n\t\t/**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.Gate.defaults = {\n\t\t\t\"attack\" : 0.1, \n\t\t\t\"release\" : 0.1,\n\t\t\t\"threshold\" : -40\n\t\t};\n\n\t\t/**\n\t\t * The threshold of the gate in decibels\n\t\t * @memberOf Tone.Gate#\n\t\t * @type {number}\n\t\t * @name threshold\n\t\t */\n\t\tObject.defineProperty(Tone.Gate.prototype, \"threshold\", {\n\t\t\tget : function(){\n\t\t\t\treturn this.gainToDb(this._gt.value);\n\t\t\t}, \n\t\t\tset : function(thresh){\n\t\t\t\tthis._gt.value = this.dbToGain(thresh);\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * The attack speed of the gate\n\t\t * @memberOf Tone.Gate#\n\t\t * @type {Tone.Time}\n\t\t * @name attack\n\t\t */\n\t\tObject.defineProperty(Tone.Gate.prototype, \"attack\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._follower.attack;\n\t\t\t}, \n\t\t\tset : function(attackTime){\n\t\t\t\tthis._follower.attack = attackTime;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * The release speed of the gate\n\t\t * @memberOf Tone.Gate#\n\t\t * @type {Tone.Time}\n\t\t * @name release\n\t\t */\n\t\tObject.defineProperty(Tone.Gate.prototype, \"release\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._follower.release;\n\t\t\t}, \n\t\t\tset : function(releaseTime){\n\t\t\t\tthis._follower.release = releaseTime;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t *  dispose\n\t\t *  @returns {Tone.Gate} `this`\n\t\t */\n\t\tTone.Gate.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._follower.dispose();\n\t\t\tthis._gt.dispose();\n\t\t\tthis._follower = null;\n\t\t\tthis._gt = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.Gate;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\t\t\n\t\t/**\n\t\t *  @class  a sample accurate clock built on an oscillator.\n\t\t *          Invokes the tick method at the set rate\n\t\t *\n\t\t * \t@private\n\t\t * \t@constructor\n\t\t * \t@extends {Tone}\n\t\t * \t@param {Tone.Frequency} frequency the rate of the callback\n\t\t * \t@param {function} callback the callback to be invoked with the time of the audio event\n\t\t */\n\t\tTone.Clock = function(frequency, callback){\n\n\t\t\t/**\n\t\t\t *  the oscillator\n\t\t\t *  @type {OscillatorNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._oscillator = null;\n\n\t\t\t/**\n\t\t\t *  the script processor which listens to the oscillator\n\t\t\t *  @type {ScriptProcessorNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._jsNode = this.context.createScriptProcessor(this.bufferSize, 1, 1);\n\t\t\tthis._jsNode.onaudioprocess = this._processBuffer.bind(this);\n\n\t\t\t/**\n\t\t\t *  the rate control signal\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.frequency = new Tone.Signal(frequency);\n\n\t\t\t/**\n\t\t\t *  whether the tick is on the up or down\n\t\t\t *  @type {boolean}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._upTick = false;\n\n\t\t\t/**\n\t\t\t *  the callback which is invoked on every tick\n\t\t\t *  with the time of that tick as the argument\n\t\t\t *  @type {function(number)}\n\t\t\t */\n\t\t\tthis.tick = callback;\n\n\t\t\t//setup\n\t\t\tthis._jsNode.noGC();\n\t\t};\n\n\t\tTone.extend(Tone.Clock);\n\n\t\t/**\n\t\t *  start the clock\n\t\t *  @param {Tone.Time} time the time when the clock should start\n\t\t *  @returns {Tone.Clock} `this`\n\t\t */\n\t\tTone.Clock.prototype.start = function(time){\n\t\t\tif (!this._oscillator){\n\t\t\t\tthis._oscillator = this.context.createOscillator();\n\t\t\t\tthis._oscillator.type = \"square\";\n\t\t\t\tthis._oscillator.connect(this._jsNode);\n\t\t\t\t//connect it up\n\t\t\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\t\t\tthis._upTick = false;\n\t\t\t\tvar startTime = this.toSeconds(time);\n\t\t\t\tthis._oscillator.start(startTime);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  stop the clock\n\t\t *  @param {Tone.Time} time the time when the clock should stop\n\t\t *  @param {function} onend called when the oscilator stops\n\t\t *  @returns {Tone.Clock} `this`\n\t\t */\n\t\tTone.Clock.prototype.stop = function(time, onend){\n\t\t\tif (this._oscillator){\n\t\t\t\tvar now = this.now();\n\t\t\t\tvar stopTime = this.toSeconds(time, now);\n\t\t\t\tthis._oscillator.stop(stopTime);\n\t\t\t\tthis._oscillator = null;\n\t\t\t\t//set a timeout for when it stops\n\t\t\t\tif (time){\n\t\t\t\t\tsetTimeout(onend, (stopTime - now) * 1000);\n\t\t\t\t} else {\n\t\t\t\t\tonend();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  @private\n\t\t *  @param  {AudioProcessingEvent} event\n\t\t */\n\t\tTone.Clock.prototype._processBuffer = function(event){\n\t\t\tvar now = this.defaultArg(event.playbackTime, this.now());\n\t\t\tvar bufferSize = this._jsNode.bufferSize;\n\t\t\tvar incomingBuffer = event.inputBuffer.getChannelData(0);\n\t\t\tvar upTick = this._upTick;\n\t\t\tvar self = this;\n\t\t\tfor (var i = 0; i < bufferSize; i++){\n\t\t\t\tvar sample = incomingBuffer[i];\n\t\t\t\tif (sample > 0 && !upTick){\n\t\t\t\t\tupTick = true;\t\n\t\t\t\t\t//get the callback out of audio thread\n\t\t\t\t\tsetTimeout(function(){\n\t\t\t\t\t\t//to account for the double buffering\n\t\t\t\t\t\tvar tickTime = now + self.samplesToSeconds(i + bufferSize * 2);\n\t\t\t\t\t\treturn function(){\n\t\t\t\t\t\t\tif (self.tick){\n\t\t\t\t\t\t\t\tself.tick(tickTime);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}(), 0); // jshint ignore:line\n\t\t\t\t} else if (sample < 0 && upTick){\n\t\t\t\t\tupTick = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._upTick = upTick;\n\t\t};\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.Clock} `this`\n\t\t */\n\t\tTone.Clock.prototype.dispose = function(){\n\t\t\tthis._jsNode.disconnect();\n\t\t\tthis.frequency.dispose();\n\t\t\tthis.frequency = null;\n\t\t\tif (this._oscillator){\n\t\t\t\tthis._oscillator.disconnect();\n\t\t\t\tthis._oscillator = null;\n\t\t\t}\n\t\t\tthis._jsNode.onaudioprocess = function(){};\n\t\t\tthis._jsNode = null;\n\t\t\tthis.tick = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.Clock;\n\t});\n\tToneModule( \n\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  Time can be descibed in a number of ways. \n\t\t *  Any Method which accepts Tone.Time as a parameter will accept: \n\t\t *  \n\t\t *  Numbers, which will be taken literally as the time (in seconds). \n\t\t *  \n\t\t *  Notation, (\"4n\", \"8t\") describes time in BPM and time signature relative values. \n\t\t *  \n\t\t *  Transport Time, (\"4:3:2\") will also provide tempo and time signature relative times \n\t\t *  in the form BARS:QUARTERS:SIXTEENTHS.\n\t\t *  \n\t\t *  Frequency, (\"8hz\") is converted to the length of the cycle in seconds.\n\t\t *  \n\t\t *  Now-Relative, (\"+1\") prefix any of the above with \"+\" and it will be interpreted as \n\t\t *  \"the current time plus whatever expression follows\".\n\t\t *  \n\t\t *  Expressions, (\"3:0 + 2 - (1m / 7)\") any of the above can also be combined \n\t\t *  into a mathematical expression which will be evaluated to compute the desired time.\n\t\t *  \n\t\t *  No Argument, for methods which accept time, no argument will be interpreted as \n\t\t *  \"now\" (i.e. the currentTime).\n\t\t *\n\t\t *  [Tone.Time Wiki](https://github.com/TONEnoTONE/Tone.js/wiki/Time)\n\t\t *  \n\t\t *  @typedef {number|string|undefined} Tone.Time \n\t\t */\n\n\t\t/**\n\t\t *  @class  Oscillator-based transport allows for simple musical timing\n\t\t *          supports tempo curves and time changes. Do not construct\n\t\t *          an instance of the transport. One is automatically created \n\t\t *          on init and additional transports cannot be created. <br><br>\n\t\t *          If you need to schedule highly independent callback functions,\n\t\t *          check out {@link Tone.Clock}.\n\t\t *\n\t\t *  @extends {Tone}\n\t\t */\n\t\tTone.Transport = function(){\n\n\t\t\t/**\n\t\t\t *  watches the main oscillator for timing ticks\n\t\t\t *  initially starts at 120bpm\n\t\t\t *  \n\t\t\t *  @private\n\t\t\t *  @type {Tone.Clock}\n\t\t\t */\n\t\t\tthis._clock = new Tone.Clock(0, this._processTick.bind(this));\n\n\t\t\t/** \n\t\t\t * \tIf the transport loops or not.\n\t\t\t *  @type {boolean}\n\t\t\t */\n\t\t\tthis.loop = false;\n\n\t\t\t/**\n\t\t\t *  the bpm value\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.bpm = new Tone.Signal(120, Tone.Signal.Units.BPM);\n\n\t\t\t/**\n\t\t\t *  the signal scalar\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._bpmMult = new Tone.Multiply(1/60 * tatum);\n\n\t\t\t/**\n\t\t\t * \tThe state of the transport. \n\t\t\t *  @type {TransportState}\n\t\t\t */\n\t\t\tthis.state = TransportState.STOPPED;\n\n\t\t\t//connect it all up\n\t\t\tthis.bpm.chain(this._bpmMult, this._clock.frequency);\n\t\t};\n\n\t\tTone.extend(Tone.Transport);\n\n\t\t/**\n\t\t *  the defaults\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t\tTone.Transport.defaults = {\n\t\t\t\"bpm\" : 120,\n\t\t\t\"swing\" : 0,\n\t\t\t\"swingSubdivision\" : \"16n\",\n\t\t\t\"timeSignature\" : 4,\n\t\t\t\"loopStart\" : 0,\n\t\t\t\"loopEnd\" : \"4m\"\n\t\t};\n\n\t\t/** \n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tvar tatum = 12;\n\n\t\t/** \n\t\t * @private \n\t\t * @type {number} \n\t\t */\n\t\tvar timelineTicks = 0;\n\n\t\t/** \n\t\t * @private \n\t\t * @type {number} \n\t\t */\n\t\tvar transportTicks = 0;\n\n\t\t/**\n\t\t *  Which subdivision the swing is applied to.\n\t\t *  defaults to an 16th note\n\t\t *  @private\n\t\t *  @type {number}\n\t\t */\n\t\tvar swingSubdivision = \"16n\";\n\n\t\t/**\n\t\t *  controls which beat the swing is applied to\n\t\t *  defaults to an 16th note\n\t\t *  @private\n\t\t *  @type {number}\n\t\t */\n\t\tvar swingTatum = 3;\n\n\t\t/**\n\t\t *  controls which beat the swing is applied to\n\t\t *  @private\n\t\t *  @type {number}\n\t\t */\n\t\tvar swingAmount = 0;\n\n\t\t/** \n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tvar transportTimeSignature = 4;\n\n\t\t/** \n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tvar loopStart = 0;\n\n\t\t/** \n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tvar loopEnd = tatum * 4;\n\n\t\t/** \n\t\t * @private\n\t\t * @type {Array}\n\t\t */\n\t\tvar intervals = [];\n\t\t\n\t\t/** \n\t\t * @private\n\t\t * @type {Array}\n\t\t */\n\t\tvar timeouts = [];\n\t\t\n\t\t/** \n\t\t * @private\n\t\t * @type {Array}\n\t\t */\n\t\tvar transportTimeline = [];\n\t\t\n\t\t/** \n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tvar timelineProgress = 0;\n\n\t\t/** \n\t\t *  All of the synced components\n\t\t *  @private \n\t\t *  @type {Array<Tone>}\n\t\t */\n\t\tvar SyncedSources = [];\n\n\t\t/** \n\t\t *  All of the synced Signals\n\t\t *  @private \n\t\t *  @type {Array<Tone.Signal>}\n\t\t */\n\t\tvar SyncedSignals = [];\n\n\t\t/**\n\t\t *  @enum\n\t\t */\n\t\t var TransportState = {\n\t\t \tSTARTED : \"started\",\n\t\t \tPAUSED : \"paused\",\n\t\t \tSTOPPED : \"stopped\"\n\t\t };\n\n\t\t///////////////////////////////////////////////////////////////////////////////\n\t\t//\tTICKS\n\t\t///////////////////////////////////////////////////////////////////////////////\n\n\t\t/**\n\t\t *  called on every tick\n\t\t *  @param   {number} tickTime clock relative tick time\n\t\t *  @private\n\t\t */\n\t\tTone.Transport.prototype._processTick = function(tickTime){\n\t\t\tif (this.state === TransportState.STARTED){\n\t\t\t\tif (swingAmount > 0 && \n\t\t\t\t\ttimelineTicks % tatum !== 0 && //not on a downbeat\n\t\t\t\t\ttimelineTicks % swingTatum === 0){\n\t\t\t\t\t//add some swing\n\t\t\t\t\ttickTime += this._ticksToSeconds(swingTatum) * swingAmount;\n\t\t\t\t}\n\t\t\t\tprocessIntervals(tickTime);\n\t\t\t\tprocessTimeouts(tickTime);\n\t\t\t\tprocessTimeline(tickTime);\n\t\t\t\ttransportTicks += 1;\n\t\t\t\ttimelineTicks += 1;\n\t\t\t\tif (this.loop){\n\t\t\t\t\tif (timelineTicks === loopEnd){\n\t\t\t\t\t\tthis._setTicks(loopStart);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t *  jump to a specific tick in the timeline\n\t\t *  updates the timeline callbacks\n\t\t *  \n\t\t *  @param   {number} ticks the tick to jump to\n\t\t *  @private\n\t\t */\n\t\tTone.Transport.prototype._setTicks = function(ticks){\n\t\t\ttimelineTicks = ticks;\n\t\t\tfor (var i = 0; i < transportTimeline.length; i++){\n\t\t\t\tvar timeout = transportTimeline[i];\n\t\t\t\tif (timeout.callbackTick() >= ticks){\n\t\t\t\t\ttimelineProgress = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t///////////////////////////////////////////////////////////////////////////////\n\t\t//\tEVENT PROCESSING\n\t\t///////////////////////////////////////////////////////////////////////////////\n\n\t\t/**\n\t\t *  process the intervals\n\t\t *  @param  {number} time \n\t\t */\n\t\tvar processIntervals = function(time){\n\t\t\tfor (var i = 0, len = intervals.length; i<len; i++){\n\t\t\t\tvar interval = intervals[i];\n\t\t\t\tif (interval.testInterval(transportTicks)){\n\t\t\t\t\tinterval.doCallback(time);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t *  process the timeouts\n\t\t *  @param  {number} time \n\t\t */\n\t\tvar processTimeouts = function(time){\n\t\t\tvar removeTimeouts = 0;\n\t\t\tfor (var i = 0, len = timeouts.length; i<len; i++){\n\t\t\t\tvar timeout = timeouts[i];\n\t\t\t\tvar callbackTick = timeout.callbackTick();\n\t\t\t\tif (callbackTick <= transportTicks){\n\t\t\t\t\ttimeout.doCallback(time);\n\t\t\t\t\tremoveTimeouts++;\n\t\t\t\t} else if (callbackTick > transportTicks){\n\t\t\t\t\tbreak;\n\t\t\t\t} \n\t\t\t}\n\t\t\t//remove the timeouts off the front of the array after they've been called\n\t\t\ttimeouts.splice(0, removeTimeouts);\n\t\t};\n\n\t\t/**\n\t\t *  process the transportTimeline events\n\t\t *  @param  {number} time \n\t\t */\n\t\tvar processTimeline = function(time){\n\t\t\tfor (var i = timelineProgress, len = transportTimeline.length; i<len; i++){\n\t\t\t\tvar evnt = transportTimeline[i];\n\t\t\t\tvar callbackTick = evnt.callbackTick();\n\t\t\t\tif (callbackTick === timelineTicks){\n\t\t\t\t\ttimelineProgress = i;\n\t\t\t\t\tevnt.doCallback(time);\n\t\t\t\t} else if (callbackTick > timelineTicks){\n\t\t\t\t\tbreak;\n\t\t\t\t} \n\t\t\t}\n\t\t};\n\n\t\t///////////////////////////////////////////////////////////////////////////////\n\t\t//\tINTERVAL\n\t\t///////////////////////////////////////////////////////////////////////////////\n\n\t\t/**\n\t\t *  Set a callback for a recurring event.\n\t\t *\n\t\t *  @param {function} callback\n\t\t *  @param {Tone.Time}   interval \n\t\t *  @return {number} the id of the interval\n\t\t *  @example\n\t\t *  //triggers a callback every 8th note with the exact time of the event\n\t\t *  Tone.Transport.setInterval(function(time){\n\t\t *  \tenvelope.triggerAttack(time);\n\t\t *  }, \"8n\");\n\t\t */\n\t\tTone.Transport.prototype.setInterval = function(callback, interval, ctx){\n\t\t\tvar tickTime = this._toTicks(interval);\n\t\t\tvar timeout = new TimelineEvent(callback, ctx, tickTime, transportTicks);\n\t\t\tintervals.push(timeout);\n\t\t\treturn timeout.id;\n\t\t};\n\n\t\t/**\n\t\t *  clear an interval from the processing array\n\t\t *  @param  {number} rmInterval \tthe interval to remove\n\t\t *  @return {boolean}            \ttrue if the event was removed\n\t\t */\n\t\tTone.Transport.prototype.clearInterval = function(rmInterval){\n\t\t\tfor (var i = 0; i < intervals.length; i++){\n\t\t\t\tvar interval = intervals[i];\n\t\t\t\tif (interval.id === rmInterval){\n\t\t\t\t\tintervals.splice(i, 1);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t\t/**\n\t\t *  removes all of the intervals that are currently set\n\t\t *  @return {boolean}            \ttrue if the event was removed\n\t\t */\n\t\tTone.Transport.prototype.clearIntervals = function(){\n\t\t\tvar willRemove = intervals.length > 0;\n\t\t\tintervals = [];\n\t\t\treturn willRemove;\n\t\t};\n\n\t\t///////////////////////////////////////////////////////////////////////////////\n\t\t//\tTIMEOUT\n\t\t///////////////////////////////////////////////////////////////////////////////\n\n\t\t/**\n\t\t *  Set a timeout to occur after time from now. NB: the transport must be \n\t\t *  running for this to be triggered. All timeout events are cleared when the \n\t\t *  transport is stopped. \n\t\t *\n\t\t *  @param {function} callback \n\t\t *  @param {Tone.Time}   time     \n\t\t *  @return {number} the id of the timeout for clearing timeouts\n\t\t *  @example\n\t\t *  //trigger an event to happen 1 second from now\n\t\t *  Tone.Transport.setTimeout(function(time){\n\t\t *  \tplayer.start(time);\n\t\t *  }, 1)\n\t\t */\n\t\tTone.Transport.prototype.setTimeout = function(callback, time, ctx){\n\t\t\tvar ticks = this._toTicks(time);\n\t\t\tvar timeout = new TimelineEvent(callback, ctx, ticks + transportTicks, 0);\n\t\t\t//put it in the right spot\n\t\t\tfor (var i = 0, len = timeouts.length; i<len; i++){\n\t\t\t\tvar testEvnt = timeouts[i];\n\t\t\t\tif (testEvnt.callbackTick() > timeout.callbackTick()){\n\t\t\t\t\ttimeouts.splice(i, 0, timeout);\n\t\t\t\t\treturn timeout.id;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//otherwise push it on the end\n\t\t\ttimeouts.push(timeout);\n\t\t\treturn timeout.id;\n\t\t};\n\n\t\t/**\n\t\t *  clear the timeout based on it's ID\n\t\t *  @param  {number} timeoutID \n\t\t *  @return {boolean}           true if the timeout was removed\n\t\t */\n\t\tTone.Transport.prototype.clearTimeout = function(timeoutID){\n\t\t\tfor (var i = 0; i < timeouts.length; i++){\n\t\t\t\tvar testTimeout = timeouts[i];\n\t\t\t\tif (testTimeout.id === timeoutID){\n\t\t\t\t\ttimeouts.splice(i, 1);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t\t/**\n\t\t *  removes all of the timeouts that are currently set\n\t\t *  @return {boolean}            \ttrue if the event was removed\n\t\t */\n\t\tTone.Transport.prototype.clearTimeouts = function(){\n\t\t\tvar willRemove = timeouts.length > 0;\n\t\t\ttimeouts = [];\n\t\t\treturn willRemove;\n\t\t};\n\n\t\t///////////////////////////////////////////////////////////////////////////////\n\t\t//\tTIMELINE\n\t\t///////////////////////////////////////////////////////////////////////////////\n\n\t\t/**\n\t\t *  Timeline events are synced to the transportTimeline of the Tone.Transport\n\t\t *  Unlike Timeout, Timeline events will restart after the \n\t\t *  Tone.Transport has been stopped and restarted. \n\t\t *\n\t\t *  @param {function} \tcallback \t\n\t\t *  @param {Tome.Time}  timeout  \n\t\t *  @return {number} \t\t\t\tthe id for clearing the transportTimeline event\n\t\t *  @example\n\t\t *  //trigger the start of a part on the 16th measure\n\t\t *  Tone.Transport.setTimeline(function(time){\n\t\t *  \tpart.start(time);\n\t\t *  }, \"16m\");\n\t\t */\n\t\tTone.Transport.prototype.setTimeline = function(callback, timeout, ctx){\n\t\t\tvar ticks = this._toTicks(timeout);\n\t\t\tvar timelineEvnt = new TimelineEvent(callback, ctx, ticks, 0);\n\t\t\t//put it in the right spot\n\t\t\tfor (var i = timelineProgress, len = transportTimeline.length; i<len; i++){\n\t\t\t\tvar testEvnt = transportTimeline[i];\n\t\t\t\tif (testEvnt.callbackTick() > timelineEvnt.callbackTick()){\n\t\t\t\t\ttransportTimeline.splice(i, 0, timelineEvnt);\n\t\t\t\t\treturn timelineEvnt.id;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//otherwise push it on the end\n\t\t\ttransportTimeline.push(timelineEvnt);\n\t\t\treturn timelineEvnt.id;\n\t\t};\n\n\t\t/**\n\t\t *  clear the transportTimeline event from the \n\t\t *  @param  {number} timelineID \n\t\t *  @return {boolean} true if it was removed\n\t\t */\n\t\tTone.Transport.prototype.clearTimeline = function(timelineID){\n\t\t\tfor (var i = 0; i < transportTimeline.length; i++){\n\t\t\t\tvar testTimeline = transportTimeline[i];\n\t\t\t\tif (testTimeline.id === timelineID){\n\t\t\t\t\ttransportTimeline.splice(i, 1);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t\t/**\n\t\t *  remove all events from the timeline\n\t\t *  @returns {boolean} true if the events were removed\n\t\t */\n\t\tTone.Transport.prototype.clearTimelines = function(){\n\t\t\ttimelineProgress = 0;\n\t\t\tvar willRemove = transportTimeline.length > 0;\n\t\t\ttransportTimeline = [];\n\t\t\treturn willRemove;\n\t\t};\n\n\t\t///////////////////////////////////////////////////////////////////////////////\n\t\t//\tTIME CONVERSIONS\n\t\t///////////////////////////////////////////////////////////////////////////////\n\n\t\t/**\n\t\t *  turns the time into\n\t\t *  @param  {Tone.Time} time\n\t\t *  @return {number}   \n\t\t *  @private   \n\t\t */\n\t\tTone.Transport.prototype._toTicks = function(time){\n\t\t\t//get the seconds\n\t\t\tvar seconds = this.toSeconds(time);\n\t\t\tvar quarter = this.notationToSeconds(\"4n\");\n\t\t\tvar quarters = seconds / quarter;\n\t\t\tvar tickNum = quarters * tatum;\n\t\t\t//quantize to tick value\n\t\t\treturn Math.round(tickNum);\n\t\t};\n\n\t\t/**\n\t\t *  convert ticks into seconds\n\t\t *  \n\t\t *  @param  {number} ticks \n\t\t *  @param {number=} bpm \n\t\t *  @param {number=} timeSignature\n\t\t *  @return {number}               seconds\n\t\t *  @private\n\t\t */\n\t\tTone.Transport.prototype._ticksToSeconds = function(ticks, bpm, timeSignature){\n\t\t\tticks = Math.floor(ticks);\n\t\t\tvar quater = this.notationToSeconds(\"4n\", bpm, timeSignature);\n\t\t\treturn (quater * ticks) / (tatum);\n\t\t};\n\n\t\t/**\n\t\t *  returns the time of the next beat\n\t\t *  @param  {string} [subdivision=\"4n\"]\n\t\t *  @return {number} \tthe time in seconds of the next subdivision\n\t\t */\n\t\tTone.Transport.prototype.nextBeat = function(subdivision){\n\t\t\tsubdivision = this.defaultArg(subdivision, \"4n\");\n\t\t\tvar tickNum = this._toTicks(subdivision);\n\t\t\tvar remainingTicks = (transportTicks % tickNum);\n\t\t\tvar nextTick = remainingTicks;\n\t\t\tif (remainingTicks > 0){\n\t\t\t\tnextTick = tickNum - remainingTicks;\n\t\t\t}\n\t\t\treturn this._ticksToSeconds(nextTick);\n\t\t};\n\n\n\t\t///////////////////////////////////////////////////////////////////////////////\n\t\t//\tSTART/STOP/PAUSE\n\t\t///////////////////////////////////////////////////////////////////////////////\n\n\t\t/**\n\t\t *  start the transport and all sources synced to the transport\n\t\t *  \n\t\t *  @param  {Tone.Time} time\n\t\t *  @param  {Tone.Time=} offset the offset position to start\n\t\t *  @returns {Tone.Transport} `this`\n\t\t */\n\t\tTone.Transport.prototype.start = function(time, offset){\n\t\t\tif (this.state === TransportState.STOPPED || this.state === TransportState.PAUSED){\n\t\t\t\tif (!this.isUndef(offset)){\n\t\t\t\t\tthis._setTicks(this._toTicks(offset));\n\t\t\t\t}\n\t\t\t\tthis.state = TransportState.STARTED;\n\t\t\t\tvar startTime = this.toSeconds(time);\n\t\t\t\tthis._clock.start(startTime);\n\t\t\t\t//call start on each of the synced sources\n\t\t\t\tfor (var i = 0; i < SyncedSources.length; i++){\n\t\t\t\t\tvar source = SyncedSources[i].source;\n\t\t\t\t\tvar delay = SyncedSources[i].delay;\n\t\t\t\t\tsource.start(startTime + delay);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\n\t\t/**\n\t\t *  stop the transport and all sources synced to the transport\n\t\t *  \n\t\t *  @param  {Tone.Time} time\n\t\t *  @returns {Tone.Transport} `this`\n\t\t */\n\t\tTone.Transport.prototype.stop = function(time){\n\t\t\tif (this.state === TransportState.STARTED || this.state === TransportState.PAUSED){\n\t\t\t\tvar stopTime = this.toSeconds(time);\n\t\t\t\tthis._clock.stop(stopTime, this._onended.bind(this));\n\t\t\t\t//call start on each of the synced sources\n\t\t\t\tfor (var i = 0; i < SyncedSources.length; i++){\n\t\t\t\t\tvar source = SyncedSources[i].source;\n\t\t\t\t\tsource.stop(stopTime);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._onended();\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  invoked when the transport is stopped\n\t\t *  @private\n\t\t */\n\t\tTone.Transport.prototype._onended = function(){\n\t\t\ttransportTicks = 0;\n\t\t\tthis._setTicks(0);\n\t\t\tthis.clearTimeouts();\n\t\t\tthis.state = TransportState.STOPPED;\n\t\t};\n\n\t\t/**\n\t\t *  pause the transport and all sources synced to the transport\n\t\t *  \n\t\t *  @param  {Tone.Time} time\n\t\t *  @returns {Tone.Transport} `this`\n\t\t */\n\t\tTone.Transport.prototype.pause = function(time){\n\t\t\tif (this.state === TransportState.STARTED){\n\t\t\t\tthis.state = TransportState.PAUSED;\n\t\t\t\tvar stopTime = this.toSeconds(time);\n\t\t\t\tthis._clock.stop(stopTime);\n\t\t\t\t//call pause on each of the synced sources\n\t\t\t\tfor (var i = 0; i < SyncedSources.length; i++){\n\t\t\t\t\tvar source = SyncedSources[i].source;\n\t\t\t\t\tsource.pause(stopTime);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\t///////////////////////////////////////////////////////////////////////////////\n\t\t//\tSETTERS/GETTERS\n\t\t///////////////////////////////////////////////////////////////////////////////\n\n\t\t/**\n\t\t *  Time signature as just the numerator over 4. \n\t\t *  For example 4/4 would be just 4 and 6/8 would be 3.\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {number}\n\t\t *  @name timeSignature\n\t\t */\n\t\tObject.defineProperty(Tone.Transport.prototype, \"timeSignature\", {\n\t\t\tget : function(){\n\t\t\t\treturn transportTimeSignature;\n\t\t\t},\n\t\t\tset : function(numerator){\n\t\t\t\ttransportTimeSignature = numerator;\n\t\t\t}\n\t\t});\n\n\n\t\t/**\n\t\t * The loop start point\n\t\t * @memberOf Tone.Transport#\n\t\t * @type {Tone.Time}\n\t\t * @name loopStart\n\t\t */\n\t\tObject.defineProperty(Tone.Transport.prototype, \"loopStart\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._ticksToSeconds(loopStart);\n\t\t\t},\n\t\t\tset : function(startPosition){\n\t\t\t\tloopStart = this._toTicks(startPosition);\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * The loop end point\n\t\t * @memberOf Tone.Transport#\n\t\t * @type {Tone.Time}\n\t\t * @name loopEnd\n\t\t */\n\t\tObject.defineProperty(Tone.Transport.prototype, \"loopEnd\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._ticksToSeconds(loopEnd);\n\t\t\t},\n\t\t\tset : function(endPosition){\n\t\t\t\tloopEnd = this._toTicks(endPosition);\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t *  shorthand loop setting\n\t\t *  @param {Tone.Time} startPosition \n\t\t *  @param {Tone.Time} endPosition   \n\t\t *  @returns {Tone.Transport} `this`\n\t\t */\n\t\tTone.Transport.prototype.setLoopPoints = function(startPosition, endPosition){\n\t\t\tthis.loopStart = startPosition;\n\t\t\tthis.loopEnd = endPosition;\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  The swing value. Between 0-1 where 1 equal to \n\t\t *  the note + half the subdivision.\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {number}\n\t\t *  @name swing\n\t\t */\n\t\tObject.defineProperty(Tone.Transport.prototype, \"swing\", {\n\t\t\tget : function(){\n\t\t\t\treturn swingAmount * 2;\n\t\t\t},\n\t\t\tset : function(amount){\n\t\t\t\t//scale the values to a normal range\n\t\t\t\tswingAmount = amount * 0.5;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t *  Set the subdivision which the swing will be applied to. \n\t\t *  The default values is a 16th note. Value must be less \n\t\t *  than a quarter note.\n\t\t *  \n\t\t *  \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Tone.Time}\n\t\t *  @name swingSubdivision\n\t\t */\n\t\tObject.defineProperty(Tone.Transport.prototype, \"swingSubdivision\", {\n\t\t\tget : function(){\n\t\t\t\treturn swingSubdivision;\n\t\t\t},\n\t\t\tset : function(subdivision){\n\t\t\t\t//scale the values to a normal range\n\t\t\t\tswingSubdivision = subdivision;\n\t\t\t\tswingTatum = this._toTicks(subdivision);\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t *  The Transport's position in MEASURES:BEATS:SIXTEENTHS.\n\t\t *  Setting the value will jump to that position right away. \n\t\t *  \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {string}\n\t\t *  @name position\n\t\t */\n\t\tObject.defineProperty(Tone.Transport.prototype, \"position\", {\n\t\t\tget : function(){\n\t\t\t\tvar quarters = timelineTicks / tatum;\n\t\t\t\tvar measures = Math.floor(quarters / transportTimeSignature);\n\t\t\t\tvar sixteenths = Math.floor((quarters % 1) * 4);\n\t\t\t\tquarters = Math.floor(quarters) % transportTimeSignature;\n\t\t\t\tvar progress = [measures, quarters, sixteenths];\n\t\t\t\treturn progress.join(\":\");\n\t\t\t},\n\t\t\tset : function(progress){\n\t\t\t\tvar ticks = this._toTicks(progress);\n\t\t\t\tthis._setTicks(ticks);\n\t\t\t}\n\t\t});\n\n\t\t///////////////////////////////////////////////////////////////////////////////\n\t\t//\tSYNCING\n\t\t///////////////////////////////////////////////////////////////////////////////\n\n\t\t/**\n\t\t *  Sync a source to the transport so that \n\t\t *  @param  {Tone.Source} source the source to sync to the transport\n\t\t *  @param {Tone.Time} delay (optionally) start the source with a delay from the transport\n\t\t *  @returns {Tone.Transport} `this`\n\t\t */\n\t\tTone.Transport.prototype.syncSource = function(source, startDelay){\n\t\t\tSyncedSources.push({\n\t\t\t\tsource : source,\n\t\t\t\tdelay : this.toSeconds(this.defaultArg(startDelay, 0))\n\t\t\t});\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  remove the source from the list of Synced Sources\n\t\t *  \n\t\t *  @param  {Tone.Source} source [description]\n\t\t *  @returns {Tone.Transport} `this`\n\t\t */\n\t\tTone.Transport.prototype.unsyncSource = function(source){\n\t\t\tfor (var i = 0; i < SyncedSources.length; i++){\n\t\t\t\tif (SyncedSources[i].source === source){\n\t\t\t\t\tSyncedSources.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  attaches the signal to the tempo control signal so that \n\t\t *  any changes in the tempo will change the signal in the same\n\t\t *  ratio. \n\t\t *  \n\t\t *  @param  {Tone.Signal} signal \n\t\t *  @param {number=} ratio Optionally pass in the ratio between\n\t\t *                         the two signals. Otherwise it will be computed\n\t\t *                         based on their current values. \n\t\t *  @returns {Tone.Transport} `this`\n\t\t */\n\t\tTone.Transport.prototype.syncSignal = function(signal, ratio){\n\t\t\tif (!ratio){\n\t\t\t\t//get the sync ratio\n\t\t\t\tif (signal._value.value !== 0){\n\t\t\t\t\tratio = signal._value.value / this.bpm.value;\n\t\t\t\t} else {\n\t\t\t\t\tratio = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar ratioSignal = this.context.createGain();\n\t\t\tratioSignal.gain.value = ratio;\n\t\t\tthis.bpm.chain(ratioSignal, signal._value);\n\t\t\tSyncedSignals.push({\n\t\t\t\t\"ratio\" : ratioSignal,\n\t\t\t\t\"signal\" : signal,\n\t\t\t\t\"initial\" : signal._value.value\n\t\t\t});\n\t\t\tsignal._value.value = 0;\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  Unsyncs a previously synced signal from the transport's control\n\t\t *  @param  {Tone.Signal} signal \n\t\t *  @returns {Tone.Transport} `this`\n\t\t */\n\t\tTone.Transport.prototype.unsyncSignal = function(signal){\n\t\t\tfor (var i = 0; i < SyncedSignals.length; i++){\n\t\t\t\tvar syncedSignal = SyncedSignals[i];\n\t\t\t\tif (syncedSignal.signal === signal){\n\t\t\t\t\tsyncedSignal.ratio.disconnect();\n\t\t\t\t\tsyncedSignal.signal._value.value = syncedSignal.initial;\n\t\t\t\t\tSyncedSignals.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.Transport} `this`\n\t\t */\n\t\tTone.Transport.prototype.dispose = function(){\n\t\t\tthis._clock.dispose();\n\t\t\tthis._clock = null;\n\t\t\tthis.bpm.dispose();\n\t\t\tthis.bpm = null;\n\t\t\tthis._bpmMult.dispose();\n\t\t\tthis._bpmMult = null;\n\t\t\treturn this;\n\t\t};\n\n\t\t///////////////////////////////////////////////////////////////////////////////\n\t\t//\tTIMELINE EVENT\n\t\t///////////////////////////////////////////////////////////////////////////////\n\n\t\t/**\n\t\t *  @static\n\t\t *  @type {number}\n\t\t */\n\t\tvar TimelineEventIDCounter = 0;\n\n\t\t/**\n\t\t *  A Timeline event\n\t\t *\n\t\t *  @constructor\n\t\t *  @private\n\t\t *  @param {function(number)} callback   \n\t\t *  @param {Object}   context    \n\t\t *  @param {number}   tickTime\n\t \t *  @param {number}   startTicks\n\t\t */\n\t\tvar TimelineEvent = function(callback, context, tickTime, startTicks){\n\t\t\tthis.startTicks = startTicks;\n\t\t\tthis.tickTime = tickTime;\n\t\t\tthis.callback = callback;\n\t\t\tthis.context = context;\n\t\t\tthis.id = TimelineEventIDCounter++;\n\t\t};\n\t\t\n\t\t/**\n\t\t *  invoke the callback in the correct context\n\t\t *  passes in the playback time\n\t\t *  \n\t\t *  @param  {number} playbackTime \n\t\t */\n\t\tTimelineEvent.prototype.doCallback = function(playbackTime){\n\t\t\tthis.callback.call(this.context, playbackTime); \n\t\t};\n\n\t\t/**\n\t\t *  get the tick which the callback is supposed to occur on\n\t\t *  \n\t\t *  @return {number} \n\t\t */\n\t\tTimelineEvent.prototype.callbackTick = function(){\n\t\t\treturn this.startTicks + this.tickTime;\n\t\t};\n\n\t\t/**\n\t\t *  test if the tick occurs on the interval\n\t\t *  \n\t\t *  @param  {number} tick \n\t\t *  @return {boolean}      \n\t\t */\n\t\tTimelineEvent.prototype.testInterval = function(tick){\n\t\t\treturn (tick - this.startTicks) % this.tickTime === 0;\n\t\t};\n\n\n\t\t///////////////////////////////////////////////////////////////////////////////\n\t\t//\tAUGMENT TONE'S PROTOTYPE TO INCLUDE TRANSPORT TIMING\n\t\t///////////////////////////////////////////////////////////////////////////////\n\n\t\t/**\n\t\t *  tests if a string is musical notation\n\t\t *  i.e.:\n\t\t *  \t4n = quarter note\n\t\t *   \t2m = two measures\n\t\t *    \t8t = eighth-note triplet\n\t\t *  defined in \"Tone/core/Transport\"\n\t\t *  \n\t\t *  @return {boolean} \n\t\t *  @method isNotation\n\t\t *  @lends Tone.prototype.isNotation\n\t\t */\n\t\tTone.prototype.isNotation = (function(){\n\t\t\tvar notationFormat = new RegExp(/[0-9]+[mnt]$/i);\n\t\t\treturn function(note){\n\t\t\t\treturn notationFormat.test(note);\n\t\t\t};\n\t\t})();\n\n\t\t/**\n\t\t *  tests if a string is transportTime\n\t\t *  i.e. :\n\t\t *  \t1:2:0 = 1 measure + two quarter notes + 0 sixteenth notes\n\t\t *  defined in \"Tone/core/Transport\"\n\t\t *  \t\n\t\t *  @return {boolean} \n\t\t *\n\t\t *  @method isTransportTime\n\t\t *  @lends Tone.prototype.isTransportTime\n\t\t */\n\t\tTone.prototype.isTransportTime = (function(){\n\t\t\tvar transportTimeFormat = new RegExp(/^\\d+(\\.\\d+)?:\\d+(\\.\\d+)?(:\\d+(\\.\\d+)?)?$/i);\n\t\t\treturn function(transportTime){\n\t\t\t\treturn transportTimeFormat.test(transportTime);\n\t\t\t};\n\t\t})();\n\n\t\t/**\n\t\t *\n\t\t *  convert notation format strings to seconds\n\t\t *  defined in \"Tone/core/Transport\"\n\t\t *  \n\t\t *  @param  {string} notation     \n\t\t *  @param {number=} bpm \n\t\t *  @param {number=} timeSignature \n\t\t *  @return {number} \n\t\t *                \n\t\t */\n\t\tTone.prototype.notationToSeconds = function(notation, bpm, timeSignature){\n\t\t\tbpm = this.defaultArg(bpm, Tone.Transport.bpm.value);\n\t\t\ttimeSignature = this.defaultArg(timeSignature, transportTimeSignature);\n\t\t\tvar beatTime = (60 / bpm);\n\t\t\tvar subdivision = parseInt(notation, 10);\n\t\t\tvar beats = 0;\n\t\t\tif (subdivision === 0){\n\t\t\t\tbeats = 0;\n\t\t\t}\n\t\t\tvar lastLetter = notation.slice(-1);\n\t\t\tif (lastLetter === \"t\"){\n\t\t\t\tbeats = (4 / subdivision) * 2/3;\n\t\t\t} else if (lastLetter === \"n\"){\n\t\t\t\tbeats = 4 / subdivision;\n\t\t\t} else if (lastLetter === \"m\"){\n\t\t\t\tbeats = subdivision * timeSignature;\n\t\t\t} else {\n\t\t\t\tbeats = 0;\n\t\t\t}\n\t\t\treturn beatTime * beats;\n\t\t};\n\n\t\t/**\n\t\t *  convert transportTime into seconds\n\t\t *  defined in \"Tone/core/Transport\"\n\t\t *  \n\t\t *  ie: 4:2:3 == 4 measures + 2 quarters + 3 sixteenths\n\t\t *\n\t\t *  @param  {string} transportTime \n\t\t *  @param {number=} bpm \n\t\t *  @param {number=} timeSignature\n\t\t *  @return {number}               seconds\n\t\t *\n\t\t *  @lends Tone.prototype.transportTimeToSeconds\n\t\t */\n\t\tTone.prototype.transportTimeToSeconds = function(transportTime, bpm, timeSignature){\n\t\t\tbpm = this.defaultArg(bpm, Tone.Transport.bpm.value);\n\t\t\ttimeSignature = this.defaultArg(timeSignature, transportTimeSignature);\n\t\t\tvar measures = 0;\n\t\t\tvar quarters = 0;\n\t\t\tvar sixteenths = 0;\n\t\t\tvar split = transportTime.split(\":\");\n\t\t\tif (split.length === 2){\n\t\t\t\tmeasures = parseFloat(split[0]);\n\t\t\t\tquarters = parseFloat(split[1]);\n\t\t\t} else if (split.length === 1){\n\t\t\t\tquarters = parseFloat(split[0]);\n\t\t\t} else if (split.length === 3){\n\t\t\t\tmeasures = parseFloat(split[0]);\n\t\t\t\tquarters = parseFloat(split[1]);\n\t\t\t\tsixteenths = parseFloat(split[2]);\n\t\t\t}\n\t\t\tvar beats = (measures * timeSignature + quarters + sixteenths / 4);\n\t\t\treturn beats * this.notationToSeconds(\"4n\");\n\t\t};\n\n\t\t/**\n\t\t *  Convert seconds to the closest transportTime in the form \n\t\t *  \tmeasures:quarters:sixteenths\n\t\t *  defined in \"Tone/core/Transport\"\n\t\t *\n\t\t *  @method toTransportTime\n\t\t *  \n\t\t *  @param {Tone.Time} seconds \n\t\t *  @param {number=} bpm \n\t\t *  @param {number=} timeSignature\n\t\t *  @return {string}  \n\t\t *  \n\t\t *  @lends Tone.prototype.toTransportTime\n\t\t */\n\t\tTone.prototype.toTransportTime = function(time, bpm, timeSignature){\n\t\t\tvar seconds = this.toSeconds(time, bpm, timeSignature);\n\t\t\tbpm = this.defaultArg(bpm, Tone.Transport.bpm.value);\n\t\t\ttimeSignature = this.defaultArg(timeSignature, transportTimeSignature);\n\t\t\tvar quarterTime = this.notationToSeconds(\"4n\");\n\t\t\tvar quarters = seconds / quarterTime;\n\t\t\tvar measures = Math.floor(quarters / timeSignature);\n\t\t\tvar sixteenths = Math.floor((quarters % 1) * 4);\n\t\t\tquarters = Math.floor(quarters) % timeSignature;\n\t\t\tvar progress = [measures, quarters, sixteenths];\n\t\t\treturn progress.join(\":\");\n\t\t};\n\n\t\t/**\n\t\t *  Convert a frequency representation into a number.\n\t\t *  Defined in \"Tone/core/Transport\".\n\t\t *  \t\n\t\t *  @param  {Tone.Frequency} freq \n\t\t *  @param {number=} \tnow \tif passed in, this number will be \n\t\t *                        \t\tused for all 'now' relative timings\n\t\t *  @return {number}      the frequency in hertz\n\t\t */\n\t\tTone.prototype.toFrequency = function(freq, now){\n\t\t\tif (this.isFrequency(freq)){\n\t\t\t\treturn parseFloat(freq);\n\t\t\t} else if (this.isNotation(freq) || this.isTransportTime(freq)) {\n\t\t\t\treturn this.secondsToFrequency(this.toSeconds(freq, now));\n\t\t\t} else {\n\t\t\t\treturn freq;\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t *  Convert Tone.Time into seconds.\n\t\t *  Defined in \"Tone/core/Transport\".\n\t\t *  \n\t\t *  Unlike the method which it overrides, this takes into account \n\t\t *  transporttime and musical notation.\n\t\t *\n\t\t *  Time : 1.40\n\t\t *  Notation: 4n|1m|2t\n\t\t *  TransportTime: 2:4:1 (measure:quarters:sixteens)\n\t\t *  Now Relative: +3n\n\t\t *  Math: 3n+16n or even very complicated expressions ((3n*2)/6 + 1)\n\t\t *\n\t\t *  @override\n\t\t *  @param  {Tone.Time} time       \n\t\t *  @param {number=} \tnow \tif passed in, this number will be \n\t\t *                        \t\tused for all 'now' relative timings\n\t\t *  @return {number} \n\t\t */\n\t\tTone.prototype.toSeconds = function(time, now){\n\t\t\tnow = this.defaultArg(now, this.now());\n\t\t\tif (typeof time === \"number\"){\n\t\t\t\treturn time; //assuming that it's seconds\n\t\t\t} else if (typeof time === \"string\"){\n\t\t\t\tvar plusTime = 0;\n\t\t\t\tif(time.charAt(0) === \"+\") {\n\t\t\t\t\tplusTime = now;\n\t\t\t\t\ttime = time.slice(1);\n\t\t\t\t} \n\t\t\t\tvar components = time.split(/[\\(\\)\\-\\+\\/\\*]/);\n\t\t\t\tif (components.length > 1){\n\t\t\t\t\tvar originalTime = time;\n\t\t\t\t\tfor(var i = 0; i < components.length; i++){\n\t\t\t\t\t\tvar symb = components[i].trim();\n\t\t\t\t\t\tif (symb !== \"\"){\n\t\t\t\t\t\t\tvar val = this.toSeconds(symb);\n\t\t\t\t\t\t\ttime = time.replace(symb, val);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\t//i know eval is evil, but i think it's safe here\n\t\t\t\t\t\ttime = eval(time); // jshint ignore:line\n\t\t\t\t\t} catch (e){\n\t\t\t\t\t\tthrow new EvalError(\"problem evaluating Tone.Time: \"+originalTime);\n\t\t\t\t\t}\n\t\t\t\t} else if (this.isNotation(time)){\n\t\t\t\t\ttime = this.notationToSeconds(time);\n\t\t\t\t} else if (this.isTransportTime(time)){\n\t\t\t\t\ttime = this.transportTimeToSeconds(time);\n\t\t\t\t} else if (this.isFrequency(time)){\n\t\t\t\t\ttime = this.frequencyToSeconds(time);\n\t\t\t\t} else {\n\t\t\t\t\ttime = parseFloat(time);\n\t\t\t\t}\n\t\t\t\treturn time + plusTime;\n\t\t\t} else {\n\t\t\t\treturn now;\n\t\t\t}\n\t\t};\n\n\t\tvar TransportConstructor = Tone.Transport;\n\n\t\tTone._initAudioContext(function(){\n\t\t\tif (typeof Tone.Transport === \"function\"){\n\t\t\t\t//a single transport object\n\t\t\t\tTone.Transport = new Tone.Transport();\n\t\t\t} else {\n\t\t\t\t//stop the clock\n\t\t\t\tTone.Transport.stop();\n\t\t\t\t//get the previous bpm\n\t\t\t\tvar bpm = Tone.Transport.bpm.value;\n\t\t\t\t//destory the old clock\n\t\t\t\tTone.Transport._clock.dispose();\n\t\t\t\t//make new Transport insides\n\t\t\t\tTransportConstructor.call(Tone.Transport);\n\t\t\t\t//set the bpm\n\t\t\t\tTone.Transport.bpm.value = bpm;\n\t\t\t}\n\t\t});\n\n\t\treturn Tone.Transport;\n\t});\n\n\tToneModule( function(Tone){\n\n\t\t\n\t\t\n\t\t/**\n\t\t *  @class  A single master output which is connected to the\n\t\t *          AudioDestinationNode. It provides useful conveniences\n\t\t *          such as the ability to set the global volume and mute\n\t\t *          the entire application. Additionally, it accepts\n\t\t *          a master send/receive for adding final compression, \n\t\t *          limiting or effects to your application. <br><br>\n\t\t *          Like the Transport, the Master output is created for you\n\t\t *          on initialization. It does not need to be created.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t */\n\t\tTone.Master = function(){\n\t\t\tTone.call(this);\n\n\t\t\t/**\n\t\t\t * the unmuted volume\n\t\t\t * @type {number}\n\t\t\t * @private\n\t\t\t */\n\t\t\tthis._unmutedVolume = 1;\n\n\t\t\t/**\n\t\t\t * the volume of the output in decibels\n\t\t\t * @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.volume = new Tone.Signal(this.output.gain, Tone.Signal.Units.Decibels);\n\t\t\t\n\t\t\t//connections\n\t\t\tthis.input.chain(this.output, this.context.destination);\n\t\t};\n\n\t\tTone.extend(Tone.Master);\n\n\t\t/**\n\t\t *  Mutethe output\n\t\t *  @returns {Tone.Master} `this`\n\t\t */\n\t\tTone.Master.prototype.mute = function(){\n\t\t\tthis._unmutedVolume = this.volume.value;\n\t\t\t//maybe it should ramp here?\n\t\t\tthis.volume.value = -Infinity;\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  Unmute the output. Will return the volume to it's value before \n\t\t *  the output was muted. \n\t\t *  @returns {Tone.Master} `this`\n\t\t */\n\t\tTone.Master.prototype.mute = function(){\n\t\t\tthis.volume.value = this._unmutedVolume;\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  route the master signal to the node's input. \n\t\t *  NOTE: this will disconnect the previously connected node\n\t\t *  @param {AudioNode|Tone} node the node to use as the entry\n\t\t *                               point to the master chain\n\t\t *  @returns {Tone.Master} `this`\n\t\t */\n\t\tTone.Master.prototype.send = function(node){\n\t\t\t//disconnect the previous node\n\t\t\tthis.input.disconnect();\n\t\t\tthis.input.connect(node);\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  the master effects chain return point\n\t\t *  @param {AudioNode|Tone} node the node to connect \n\t\t *  @returns {Tone.Master} `this`\n\t\t */\n\t\tTone.Master.prototype.receive = function(node){\n\t\t\tnode.connect(this.output);\n\t\t\treturn this;\n\t\t};\n\n\t\t///////////////////////////////////////////////////////////////////////////\n\t\t//\tAUGMENT TONE's PROTOTYPE\n\t\t///////////////////////////////////////////////////////////////////////////\n\n\t\t/**\n\t\t *  connect 'this' to the master output\n\t\t *  defined in \"Tone/core/Master\"\n\t\t *  @returns {Tone} `this`\n\t\t */\n\t\tTone.prototype.toMaster = function(){\n\t\t\tthis.connect(Tone.Master);\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  Also augment AudioNode's prototype to include toMaster\n\t\t *  as a convenience\n\t\t *  @returns {AudioNode} `this`\n\t\t */\n\t\tAudioNode.prototype.toMaster = function(){\n\t\t\tthis.connect(Tone.Master);\n\t\t\treturn this;\n\t\t};\n\n\t\tvar MasterConstructor = Tone.Master;\n\n\t\t/**\n\t\t *  initialize the module and listen for new audio contexts\n\t\t */\n\t\tTone._initAudioContext(function(){\n\t\t\t//a single master output\n\t\t\tif (!Tone.prototype.isUndef(Tone.Master)){\n\t\t\t\tTone.Master = new MasterConstructor();\n\t\t\t} else {\n\t\t\t\tMasterConstructor.prototype.dispose.call(Tone.Master);\n\t\t\t\tMasterConstructor.call(Tone.Master);\n\t\t\t}\n\t\t});\n\n\t\treturn Tone.Master;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\t\t\n\t\t/**\n\t\t *  @class  Base class for sources.\n\t\t *          Sources have start/stop/pause and \n\t\t *          the ability to be synced to the \n\t\t *          start/stop/pause of Tone.Transport.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t */\t\n\t\tTone.Source = function(options){\n\t\t\t//unlike most ToneNodes, Sources only have an output and no input\n\t\t\tTone.call(this, 0, 1);\n\t\t\toptions = this.defaultArg(options, Tone.Source.defaults);\n\n\t\t\t/**\n\t\t\t * The onended callback when the source is done playing.\n\t\t\t * @type {function}\n\t\t\t * @example\n\t\t\t *  source.onended = function(){\n\t\t\t *  \tconsole.log(\"the source is done playing\");\n\t\t\t *  }\n\t\t\t */\n\t\t\tthis.onended = options.onended;\n\n\t\t\t/**\n\t\t\t *  the next time the source is started\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._nextStart = Infinity;\n\n\t\t\t/**\n\t\t\t *  the next time the source is stopped\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._nextStop = Infinity;\n\n\t\t\t/**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Tone.Signal}\n\t\t\t * @example\n\t\t\t * source.volume.value = -6;\n\t\t\t */\n\t\t\tthis.volume = new Tone.Signal(this.output.gain, Tone.Signal.Units.Decibels);\n\n\t\t\t/**\n\t\t\t * \tkeeps track of the timeout for chaning the state\n\t\t\t * \tand calling the onended\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._timeout = -1;\n\t\t};\n\n\t\tTone.extend(Tone.Source);\n\n\t\t/**\n\t\t *  The default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.Source.defaults = {\n\t\t\t\"onended\" : function(){},\n\t\t\t\"volume\" : 0,\n\t\t};\n\n\t\t/**\n\t\t *  @enum {string}\n\t\t */\n\t\tTone.Source.State = {\n\t\t\tSTARTED : \"started\",\n\t\t\tPAUSED : \"paused\",\n\t\t\tSTOPPED : \"stopped\",\n\t \t};\n\n\t\t/**\n\t\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t\t *  @type {Tone.Source.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Source#\n\t\t *  @name state\n\t\t */\n\t\tObject.defineProperty(Tone.Source.prototype, \"state\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._stateAtTime(this.now());\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t *  Get the state of the source at the specified time.\n\t\t *  @param  {Tone.Time}  time\n\t\t *  @return  {Tone.Source.State} \n\t\t *  @private\n\t\t */\n\t\tTone.Source.prototype._stateAtTime = function(time){\n\t\t\ttime = this.toSeconds(time);\n\t\t\tif (this._nextStart <= time && this._nextStop > time){\n\t\t\t\treturn Tone.Source.State.STARTED;\n\t\t\t} else if (this._nextStop <= time){\n\t\t\t\treturn Tone.Source.State.STOPPED;\n\t\t\t} else {\n\t\t\t\treturn Tone.Source.State.STOPPED;\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t *  Start the source at the time.\n\t\t *  @param  {Tone.Time} [time=now]\n\t\t *  @returns {Tone.Source} `this`\n\t\t *  @example\n\t\t *  source.start(\"+0.5\"); //starts the source 0.5 seconds from now\n\t\t */\n\t\tTone.Source.prototype.start = function(time){\n\t\t\ttime = this.toSeconds(time);\n\t\t\tif (this._stateAtTime(time) !== Tone.Source.State.STARTED || this.retrigger){\n\t\t\t\tthis._nextStart = time;\n\t\t\t\tthis._nextStop = Infinity;\n\t\t\t\tthis._start.apply(this, arguments);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t * \tstop the source\n\t\t *  @param  {Tone.Time} [time=now]\n\t\t *  @returns {Tone.Source} `this`\n\t\t *  @example\n\t\t *  source.stop(); // stops the source immediately\n\t\t */\n\t\tTone.Source.prototype.stop = function(time){\n\t\t\tvar now = this.now();\n\t\t\ttime = this.toSeconds(time, now);\n\t\t\tif (this._stateAtTime(time) === Tone.Source.State.STARTED){\n\t\t\t\tthis._nextStop = this.toSeconds(time);\n\t\t\t\tclearTimeout(this._timeout);\n\t\t\t\tvar diff = time - now;\n\t\t\t\tif (diff > 0){\n\t\t\t\t\t//add a small buffer before invoking the callback\n\t\t\t\t\tthis._timeout = setTimeout(this.onended, diff * 1000 + 20);\n\t\t\t\t} else {\n\t\t\t\t\tthis.onended();\n\t\t\t\t}\n\t\t\t\tthis._stop.apply(this, arguments);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  Not ready yet. \n\t \t *  @private\n\t \t *  @abstract\n\t\t *  @param  {Tone.Time} time \n\t\t *  @returns {Tone.Source} `this`\n\t\t */\n\t\tTone.Source.prototype.pause = function(time){\n\t\t\t//if there is no pause, just stop it\n\t\t\tthis.stop(time);\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  Sync the source to the Transport so that when the transport\n\t\t *  is started, this source is started and when the transport is stopped\n\t\t *  or paused, so is the source. \n\t\t *\n\t\t *  @param {Tone.Time} [delay=0] Delay time before starting the source after the\n\t\t *                               Transport has started. \n\t\t *  @returns {Tone.Source} `this`\n\t\t */\n\t\tTone.Source.prototype.sync = function(delay){\n\t\t\tTone.Transport.syncSource(this, delay);\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  Unsync the source to the Transport. See {@link Tone.Source#sync}\n\t\t *  @returns {Tone.Source} `this`\n\t\t */\n\t\tTone.Source.prototype.unsync = function(){\n\t\t\tTone.Transport.unsyncSource(this);\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *\tclean up\n\t\t *  @return {Tone.Source} `this`\n\t\t */\n\t\tTone.Source.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis.stop();\n\t\t\tclearTimeout(this._timeout);\n\t\t\tthis.onended = function(){};\n\t\t\tthis.volume.dispose();\n\t\t\tthis.volume = null;\n\t\t};\n\n\t\treturn Tone.Source;\n\t});\n\tToneModule( \n\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class Oscilator with start, pause, stop and sync to Transport methods\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Source}\n\t\t *  @param {number|string} [frequency=440] starting frequency\n\t\t *  @param {string} [type=\"sine\"] type of oscillator (sine|square|triangle|sawtooth)\n\t\t *  @example\n\t\t *  var osc = new Tone.Oscillator(440, \"sine\");\n\t\t */\n\t\tTone.Oscillator = function(){\n\t\t\t\n\t\t\tvar options = this.optionsObject(arguments, [\"frequency\", \"type\"], Tone.Oscillator.defaults);\n\t\t\tTone.Source.call(this, options);\n\n\t\t\t/**\n\t\t\t *  the main oscillator\n\t\t\t *  @type {OscillatorNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._oscillator = null;\n\t\t\t\n\t\t\t/**\n\t\t\t *  The frequency control signal in hertz.\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.frequency = new Tone.Signal(options.frequency, Tone.Signal.Units.Frequency);\n\n\t\t\t/**\n\t\t\t *  The detune control signal in cents. \n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.detune = new Tone.Signal(options.detune);\n\n\t\t\t/**\n\t\t\t *  the periodic wave\n\t\t\t *  @type {PeriodicWave}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._wave = null;\n\n\t\t\t/**\n\t\t\t *  the phase of the oscillator\n\t\t\t *  between 0 - 360\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._phase = options.phase;\n\n\t\t\t/**\n\t\t\t *  the type of the oscillator\n\t\t\t *  @type {string}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._type = null;\n\t\t\t\n\t\t\t//setup\n\t\t\tthis.type = options.type;\n\t\t\tthis.phase = this._phase;\n\t\t};\n\n\t\tTone.extend(Tone.Oscillator, Tone.Source);\n\n\t\t/**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.Oscillator.defaults = {\n\t\t\t\"type\" : \"sine\",\n\t\t\t\"frequency\" : 440,\n\t\t\t\"detune\" : 0,\n\t\t\t\"phase\" : 0\n\t\t};\n\n\t\t/**\n\t\t *  start the oscillator\n\t\t *  @param  {Tone.Time} [time=now] \n\t\t *  @private\n\t\t */\n\t\tTone.Oscillator.prototype._start = function(time){\n\t\t\t//new oscillator with previous values\n\t\t\tthis._oscillator = this.context.createOscillator();\n\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t\t//connect the control signal to the oscillator frequency & detune\n\t\t\tthis._oscillator.connect(this.output);\n\t\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\t\tthis.detune.connect(this._oscillator.detune);\n\t\t\t//start the oscillator\n\t\t\tthis._oscillator.start(this.toSeconds(time));\n\t\t};\n\n\t\t/**\n\t\t *  stop the oscillator\n\t\t *  @private\n\t\t *  @param  {Tone.Time} [time=now] (optional) timing parameter\n\t\t *  @returns {Tone.Oscillator} `this`\n\t\t */\n\t\tTone.Oscillator.prototype._stop = function(time){\n\t\t\tif (this._oscillator){\n\t\t\t\tthis._oscillator.stop(this.toSeconds(time));\n\t\t\t\tthis._oscillator = null;\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n\t\t *  will also affect the oscillators frequency. \n\t\t *  @returns {Tone.Oscillator} `this`\n\t\t *  @example\n\t\t *  Tone.Transport.bpm.value = 120;\n\t\t *  osc.frequency.value = 440;\n\t\t *  osc.syncFrequency();\n\t\t *  Tone.Transport.bpm.value = 240; \n\t\t *  // the frequency of the oscillator is doubled to 880\n\t\t */\n\t\tTone.Oscillator.prototype.syncFrequency = function(){\n\t\t\tTone.Transport.syncSignal(this.frequency);\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  Unsync the oscillator's frequency from the Transport. \n\t\t *  See {@link Tone.Oscillator#syncFrequency}.\n\t\t *  @returns {Tone.Oscillator} `this`\n\t\t */\n\t\tTone.Oscillator.prototype.unsyncFrequency = function(){\n\t\t\tTone.Transport.unsyncSignal(this.frequency);\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t * The type of the oscillator: either sine, square, triangle, or sawtooth.\n\t\t *\n\t\t * Uses PeriodicWave internally even for native types so that it can set the phase.\n\t\t *\n\t\t * PeriodicWave equations are from the Web Audio Source code:\n\t\t * https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/modules/webaudio/PeriodicWave.cpp&sq=package:chromium\n\t\t *  \n\t\t * @memberOf Tone.Oscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t * @example\n\t\t * osc.type = \"square\";\n\t\t * osc.type; //returns \"square\"\n\t\t */\n\t\tObject.defineProperty(Tone.Oscillator.prototype, \"type\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._type;\n\t\t\t},\n\t\t\tset : function(type){\n\t\t\t\tif (this.type !== type){\n\n\t\t\t\t\tvar fftSize = 4096;\n\t\t\t\t\tvar halfSize = fftSize / 2;\n\n\t\t\t\t\tvar real = new Float32Array(halfSize);\n\t\t\t\t\tvar imag = new Float32Array(halfSize);\n\t\t\t\t\t\n\t\t\t\t\t// Clear DC and Nyquist.\n\t\t\t\t\treal[0] = 0;\n\t\t\t\t\timag[0] = 0;\n\n\t\t\t\t\tvar shift = this._phase;\t\n\t\t\t\t\tfor (var n = 1; n < halfSize; ++n) {\n\t\t\t\t\t\tvar piFactor = 2 / (n * Math.PI);\n\t\t\t\t\t\tvar b; \n\t\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\t\tcase \"sine\": \n\t\t\t\t\t\t\t\tb = (n === 1) ? 1 : 0;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"square\":\n\t\t\t\t\t\t\t\tb = (n & 1) ? 2 * piFactor : 0;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"sawtooth\":\n\t\t\t\t\t\t\t\tb = piFactor * ((n & 1) ? 1 : -1);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"triangle\":\n\t\t\t\t\t\t\t\tif (n & 1) {\n\t\t\t\t\t\t\t\t\tb = 2 * (piFactor * piFactor) * ((((n - 1) >> 1) & 1) ? -1 : 1);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tb = 0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthrow new TypeError(\"invalid oscillator type: \"+type);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (b !== 0){\n\t\t\t\t\t\t\treal[n] = -b * Math.sin(shift);\n\t\t\t\t\t\t\timag[n] = b * Math.cos(shift);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treal[n] = 0;\n\t\t\t\t\t\t\timag[n] = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tvar periodicWave = this.context.createPeriodicWave(real, imag);\n\t\t\t\t\tthis._wave = periodicWave;\n\t\t\t\t\tif (this._oscillator !== null){\n\t\t\t\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t\t\t\t}\n\t\t\t\t\tthis._type = type;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * The phase of the oscillator in degrees. \n\t\t * @memberOf Tone.Oscillator#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t * @example\n\t\t * osc.phase = 180; //flips the phase of the oscillator\n\t\t */\n\t\tObject.defineProperty(Tone.Oscillator.prototype, \"phase\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._phase * (180 / Math.PI);\n\t\t\t}, \n\t\t\tset : function(phase){\n\t\t\t\tthis._phase = phase * Math.PI / 180;\n\t\t\t\t//reset the type\n\t\t\t\tthis.type = this._type;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t *  dispose and disconnect\n\t\t *  @return {Tone.Oscillator} `this`\n\t\t */\n\t\tTone.Oscillator.prototype.dispose = function(){\n\t\t\tTone.Source.prototype.dispose.call(this);\n\t\t\tif (this._oscillator !== null){\n\t\t\t\tthis._oscillator.disconnect();\n\t\t\t\tthis._oscillator = null;\n\t\t\t}\n\t\t\tthis.frequency.dispose();\n\t\t\tthis.frequency = null;\n\t\t\tthis.detune.dispose();\n\t\t\tthis.detune = null;\n\t\t\tthis._wave = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.Oscillator;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class AudioToGain converts an input range of -1,1 to 0,1\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @example\n\t\t *  var a2g = new Tone.AudioToGain();\n\t\t */\n\t\tTone.AudioToGain = function(){\n\n\t\t\t/**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._norm = this.input = this.output = new Tone.WaveShaper([0,1]);\n\t\t};\n\n\t\tTone.extend(Tone.AudioToGain, Tone.SignalBase);\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.AND} `this`\n\t\t */\n\t\tTone.AudioToGain.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._norm.disconnect();\n\t\t\tthis._norm = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.AudioToGain;\n\t});\n\tToneModule( \n\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class  The Low Frequency Oscillator produces an output signal \n\t\t *          which can be attached to an AudioParam or Tone.Signal \n\t\t *          for constant control over that parameter. the LFO can \n\t\t *          also be synced to the transport to start/stop/pause\n\t\t *          and change when the tempo changes.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @param {Tone.Time} [frequency=\"4n\"]\n\t\t *  @param {number} [outputMin=0]\n\t\t *  @param {number} [outputMax=1]\n\t\t *  @example\n\t\t *  var lfo = new Tone.LFO(\"4n\", 400, 4000);\n\t\t *  lfo.connect(filter.frequency);\n\t\t */\n\t\tTone.LFO = function(){\n\n\t\t\tvar options = this.optionsObject(arguments, [\"frequency\", \"min\", \"max\"], Tone.LFO.defaults);\n\n\t\t\t/** \n\t\t\t *  the oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t\t\tthis.oscillator = new Tone.Oscillator({\n\t\t\t\t\"frequency\" : options.frequency, \n\t\t\t\t\"type\" : options.type, \n\t\t\t\t\"phase\" : options.phase\n\t\t\t});\n\n\t\t\t/**\n\t\t\t *  the lfo's frequency\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.frequency = this.oscillator.frequency;\n\n\t\t\t/**\n\t\t\t * The amplitude of the LFO, which controls the output range between\n\t\t\t * the min and max output. For example if the min is -10 and the max \n\t\t\t * is 10, setting the amplitude to 0.5 would make the LFO modulate\n\t\t\t * between -5 and 5. \n\t\t\t * @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.amplitude = this.oscillator.volume;\n\t\t\tthis.amplitude.units = Tone.Signal.Units.Normal;\n\t\t\tthis.amplitude.value = options.amplitude;\n\n\t\t\t/**\n\t\t\t *  @type {Tone.AudioToGain} \n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._a2g = new Tone.AudioToGain();\n\n\t\t\t/**\n\t\t\t *  @type {Tone.Scale} \n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._scaler = this.output = new Tone.Scale(options.min, options.max);\n\n\t\t\t//connect it up\n\t\t\tthis.oscillator.chain(this._a2g, this._scaler);\n\t\t};\n\n\t\tTone.extend(Tone.LFO, Tone.Oscillator);\n\n\t\t/**\n\t\t *  the default parameters\n\t\t *\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.LFO.defaults = {\n\t\t\t\"type\" : \"sine\",\n\t\t\t\"min\" : 0,\n\t\t\t\"max\" : 1,\n\t\t\t\"phase\" : 0,\n\t\t\t\"frequency\" : \"4n\",\n\t\t\t\"amplitude\" : 1\n\t\t};\n\n\t\t/**\n\t\t *  Start the LFO. \n\t\t *  @param  {Tone.Time} [time=now] the time the LFO will start\n\t\t *  @returns {Tone.LFO} `this`\n\t\t */\n\t\tTone.LFO.prototype.start = function(time){\n\t\t\tthis.oscillator.start(time);\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  Stop the LFO. \n\t\t *  @param  {Tone.Time} [time=now] the time the LFO will stop\n\t\t *  @returns {Tone.LFO} `this`\n\t\t */\n\t\tTone.LFO.prototype.stop = function(time){\n\t\t\tthis.oscillator.stop(time);\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  Sync the start/stop/pause to the transport \n\t\t *  and the frequency to the bpm of the transport\n\t\t *\n\t\t *  @param {Tone.Time} [delay=0] the time to delay the start of the\n\t\t *                                LFO from the start of the transport\n\t\t *  @returns {Tone.LFO} `this`\n\t\t *  @example\n\t\t *  lfo.frequency.value = \"8n\";\n\t\t *  lfo.sync();\n\t\t *  // the rate of the LFO will always be an eighth note, \n\t\t *  // even as the tempo changes\n\t\t */\n\t\tTone.LFO.prototype.sync = function(delay){\n\t\t\tthis.oscillator.sync(delay);\n\t\t\tthis.oscillator.syncFrequency();\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  unsync the LFO from transport control\n\t\t *  @returns {Tone.LFO} `this`\n\t\t */\n\t\tTone.LFO.prototype.unsync = function(){\n\t\t\tthis.oscillator.unsync();\n\t\t\tthis.oscillator.unsyncFrequency();\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t * The miniumum output of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t\tObject.defineProperty(Tone.LFO.prototype, \"min\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._scaler.min;\n\t\t\t},\n\t\t\tset : function(min){\n\t\t\t\tthis._scaler.min = min;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * The maximum output of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t\tObject.defineProperty(Tone.LFO.prototype, \"max\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._scaler.max;\n\t\t\t},\n\t\t\tset : function(max){\n\t\t\t\tthis._scaler.max = max;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * The type of the oscillator: sine, square, sawtooth, triangle. \n\t\t * @memberOf Tone.LFO#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t\t Object.defineProperty(Tone.LFO.prototype, \"type\", {\n\t\t\tget : function(){\n\t\t\t\treturn this.oscillator.type;\n\t\t\t},\n\t\t\tset : function(type){\n\t\t\t\tthis.oscillator.type = type;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * The phase of the LFO\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {string}\n\t\t * @name phase\n\t\t */\n\t\t Object.defineProperty(Tone.LFO.prototype, \"phase\", {\n\t\t\tget : function(){\n\t\t\t\treturn this.oscillator.phase;\n\t\t\t},\n\t\t\tset : function(phase){\n\t\t\t\tthis.oscillator.phase = phase;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t *\tOverride the connect method so that it 0's out the value \n\t\t *\tif attached to an AudioParam or Tone.Signal. Borrowed from {@link Tone.Signal}\n\t\t *  @function\n\t\t */\n\t\tTone.LFO.prototype.connect = Tone.Signal.prototype.connect;\n\n\t\t/**\n\t\t *  disconnect and dispose\n\t\t *  @returns {Tone.LFO} `this`\n\t\t */\n\t\tTone.LFO.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis.oscillator.dispose();\n\t\t\tthis.oscillator = null;\n\t\t\tthis._scaler.dispose();\n\t\t\tthis._scaler = null;\n\t\t\tthis._a2g.dispose();\n\t\t\tthis._a2g = null;\n\t\t\tthis.frequency = null;\n\t\t\tthis.amplitude = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.LFO;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class A limiter on the incoming signal. Composed of a Tone.Compressor\n\t\t *         with a fast attack and decay value. \n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {number} threshold the threshold in decibels\n\t\t *  @example\n\t\t *  var limiter = new Tone.Limiter(-6);\n\t\t */\n\t\tTone.Limiter = function(threshold){\n\n\t\t\t/**\n\t\t\t *  the compressor\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t\t\tthis._compressor = this.input = this.output = new Tone.Compressor({\n\t\t\t\t\"attack\" : 0.0001,\n\t\t\t\t\"decay\" : 0.0001,\n\t\t\t\t\"threshold\" : threshold\n\t\t\t});\n\n\t\t\t/**\n\t\t\t * The threshold of of the limiter\n\t\t\t * @type {AudioParam}\n\t\t\t */\n\t\t\tthis.threshold = this._compressor.threshold;\n\t\t};\n\n\t\tTone.extend(Tone.Limiter);\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.Limiter} `this`\n\t\t */\n\t\tTone.Limiter.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._compressor.dispose();\n\t\t\tthis._compressor = null;\n\t\t\tthis.threshold = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.Limiter;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class A lowpass feedback comb filter. \n\t\t *         DelayNode -> Lowpass Filter -> feedback\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {number} [minDelay=0.1] the minimum delay time which the filter can have\n\t\t *  @param {number} [maxDelay=1] the maximum delay time which the filter can have\n\t\t */\n\t\tTone.LowpassCombFilter = function(){\n\n\t\t\tTone.call(this);\n\n\t\t\tvar options = this.optionsObject(arguments, [\"minDelay\", \"maxDelay\"], Tone.LowpassCombFilter.defaults);\n\n\t\t\t//the delay * samplerate = number of samples. \n\t\t\t// buffersize / number of samples = number of delays needed per buffer frame\n\t\t\tvar delayCount = Math.ceil(this.bufferSize / (options.minDelay * this.context.sampleRate));\n\t\t\t//set some ranges\n\t\t\tdelayCount = Math.min(delayCount, 10);\n\t\t\tdelayCount = Math.max(delayCount, 1);\n\n\t\t\t/**\n\t\t\t *  the number of filter delays\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._filterDelayCount = delayCount;\n\n\t\t\t/**\n\t\t\t *  @type {Array.<FilterDelay>}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._filterDelays = new Array(this._filterDelayCount);\n\n\t\t\t/**\n\t\t\t *  the dampening control\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.dampening = new Tone.Signal(options.dampening, Tone.Signal.Units.Frequency);\n\n\t\t\t/**\n\t\t\t *  the resonance control\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.resonance = new Tone.Signal(options.resonance, Tone.Signal.Units.Normal);\n\n\t\t\t/**\n\t\t\t *  scale the resonance value to the normal range\n\t\t\t *  @type {Tone.Scale}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._resScale = new Tone.ScaleExp(0.01, 1 / this._filterDelayCount - 0.001, 0.5);\n\n\t\t\t/**\n\t\t\t *  internal flag for keeping track of when frequency\n\t\t\t *  correction has been used\n\t\t\t *  @type {boolean}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._highFrequencies = false;\n\n\t\t\t/**\n\t\t\t *  internal counter of delayTime\n\t\t\t *  @type {Tone.Time}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._delayTime = options.delayTime;\n\n\t\t\t/**\n\t\t\t *  the feedback node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._feedback = this.context.createGain();\n\n\t\t\t//make the filters\n\t\t\tfor (var i = 0; i < this._filterDelayCount; i++) {\n\t\t\t\tvar filterDelay = new FilterDelay(options.minDelay, this.dampening);\n\t\t\t\tfilterDelay.connect(this._feedback);\n\t\t\t\tthis._filterDelays[i] = filterDelay;\n\t\t\t}\n\n\t\t\t//connections\n\t\t\tthis.input.connect(this._filterDelays[0]);\n\t\t\tthis._feedback.connect(this._filterDelays[0]);\n\t\t\tthis.connectSeries.apply(this, this._filterDelays);\n\t\t\t//resonance control\n\t\t\tthis.resonance.chain(this._resScale, this._feedback.gain);\n\t\t\tthis._feedback.connect(this.output);\n\t\t\t//set the delay to the min value initially\n\t\t\tthis.delayTime = options.delayTime;\n\t\t};\n\n\t\tTone.extend(Tone.LowpassCombFilter);\n\n\t\t/**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.LowpassCombFilter.defaults = {\n\t\t\t\"resonance\" : 0.5,\n\t\t\t\"dampening\" : 3000,\n\t\t\t\"minDelay\" : 0.1,\n\t\t\t\"maxDelay\" : 1,\n\t\t\t\"delayTime\" : 0.1\n\t\t};\n\n\t\t/**\n\t\t * The delay time of the LowpassCombFilter. Auto corrects\n\t\t * for sample offsets for small delay amounts.\n\t\t * @memberOf Tone.LowpassCombFilter#\n\t\t * @type {Tone.Time}\n\t\t * @name delayTime\n\t\t */\n\t\tObject.defineProperty(Tone.LowpassCombFilter.prototype, \"delayTime\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._delayTime;\n\t\t\t},\n\t\t\tset : function(delayAmount){\n\t\t\t\tthis.setDelayTimeAtTime(delayAmount);\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * set the delay time for the comb filter at a specific time. \n\t\t * @param {Tone.Time} delayAmount the amount of delay time\n\t\t * @param {Tone.Time} [time=now] when the delay time should be set\n\t\t */\n\t\tTone.LowpassCombFilter.prototype.setDelayTimeAtTime = function(delayAmount, time){\n\t\t\tthis._delayTime = this.toSeconds(delayAmount);\n\t\t\t//the number of samples to delay by\n\t\t\tvar sampleRate = this.context.sampleRate;\n\t\t\tvar delaySamples = sampleRate * this._delayTime;\n\t\t\t// delayTime corection when frequencies get high\n\t\t\ttime = this.toSeconds(time);\n\t\t\tvar cutoff = 100;\n\t\t\tif (delaySamples < cutoff){\n\t\t\t\tthis._highFrequencies = true;\n\t\t\t\tvar changeNumber = Math.round((delaySamples / cutoff) * this._filterDelayCount);\n\t\t\t\tfor (var i = 0; i < changeNumber; i++) {\n\t\t\t\t\tthis._filterDelays[i].setDelay(1 / sampleRate + this._delayTime, time);\n\t\t\t\t}\n\t\t\t\tthis._delayTime = Math.floor(delaySamples) / sampleRate;\n\t\t\t} else if (this._highFrequencies){\n\t\t\t\tthis._highFrequencies = false;\n\t\t\t\tfor (var j = 0; j < this._filterDelays.length; j++) {\n\t\t\t\t\tthis._filterDelays[j].setDelay(this._delayTime, time);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.LowpassCombFilter} `this`\n\t\t */\n\t\tTone.LowpassCombFilter.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\t//dispose the filter delays\n\t\t\tfor (var i = 0; i < this._filterDelays.length; i++) {\n\t\t\t\tthis._filterDelays[i].dispose();\n\t\t\t\tthis._filterDelays[i] = null;\n\t\t\t}\n\t\t\tthis._filterDelays = null;\n\t\t\tthis.dampening.dispose();\n\t\t\tthis.dampening = null;\n\t\t\tthis.resonance.dispose();\n\t\t\tthis.resonance = null;\n\t\t\tthis._resScale.dispose();\n\t\t\tthis._resScale = null;\n\t\t\tthis._feedback.disconnect();\n\t\t\tthis._feedback = null;\n\t\t\treturn this;\n\t\t};\n\n\t\t// BEGIN HELPER CLASS //\n\n\t\t/**\n\t\t *  FilterDelay\n\t\t *  @private\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t */\n\t\tvar FilterDelay = function(maxDelay, filterFreq){\n\t\t\tthis.delay = this.input = this.context.createDelay(maxDelay);\n\t\t\tthis.delay.delayTime.value = maxDelay;\n\n\t\t\tthis.filter = this.output = this.context.createBiquadFilter();\n\t\t\tfilterFreq.connect(this.filter.frequency);\n\n\t\t\tthis.filter.type = \"lowpass\";\n\t\t\tthis.filter.Q.value = 0;\n\n\t\t\tthis.delay.connect(this.filter);\n\t\t};\n\n\t\tTone.extend(FilterDelay);\n\n\t\tFilterDelay.prototype.setDelay = function(amount, time) {\n\t\t\tthis.delay.delayTime.setValueAtTime(amount, time);\n\t\t};\n\n\t\t/**\n\t\t *  clean up\n\t\t */\n\t\tFilterDelay.prototype.dispose = function(){\n\t\t\tthis.delay.disconnect();\n\t\t\tthis.delay = null;\n\t\t\tthis.filter.disconnect();\n\t\t\tthis.filter = null;\n\t\t};\n\n\t\t// END HELPER CLASS //\n\n\t\treturn Tone.LowpassCombFilter;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class  Merge a left and a right channel into a single stereo channel.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t *  var merge = new Tone.Merge();\n\t\t *  sigLeft.connect(merge.left);\n\t\t *  sigRight.connect(merge.right);\n\t\t */\n\t\tTone.Merge = function(){\n\n\t\t\tTone.call(this, 2, 0);\n\n\t\t\t/**\n\t\t\t *  The left input channel.\n\t\t\t *  Alias for input 0\n\t\t\t *  @type {GainNode}\n\t\t\t */\n\t\t\tthis.left = this.input[0] = this.context.createGain();\n\n\t\t\t/**\n\t\t\t *  The right input channel.\n\t\t\t *  Alias for input 1.\n\t\t\t *  @type {GainNode}\n\t\t\t */\n\t\t\tthis.right = this.input[1] = this.context.createGain();\n\n\t\t\t/**\n\t\t\t *  the merger node for the two channels\n\t\t\t *  @type {ChannelMergerNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._merger = this.output = this.context.createChannelMerger(2);\n\n\t\t\t//connections\n\t\t\tthis.left.connect(this._merger, 0, 0);\n\t\t\tthis.right.connect(this._merger, 0, 1);\n\t\t};\n\n\t\tTone.extend(Tone.Merge);\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.Merge} `this`\n\t\t */\n\t\tTone.Merge.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis.left.disconnect();\n\t\t\tthis.left = null;\n\t\t\tthis.right.disconnect();\n\t\t\tthis.right = null;\n\t\t\tthis._merger.disconnect();\n\t\t\tthis._merger = null;\n\t\t\treturn this;\n\t\t}; \n\n\t\treturn Tone.Merge;\n\t});\n\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class  Get the rms of the input signal with some averaging.\n\t\t *          Can also just get the value of the signal\n\t\t *          or the value in dB. inspired by https://github.com/cwilso/volume-meter/blob/master/volume-meter.js<br><br>\n\t\t *          Note that for signal processing, it's better to use {@link Tone.Follower} which will produce\n\t\t *          an audio-rate envelope follower instead of needing to poll the Meter to get the output.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {number} [channels=1] number of channels being metered\n\t\t *  @param {number} [smoothing=0.8] amount of smoothing applied to the volume\n\t\t *  @param {number} [clipMemory=0.5] number in seconds that a \"clip\" should be remembered\n\t\t */\n\t\tTone.Meter = function(channels, smoothing, clipMemory){\n\t\t\t//extends Unit\n\t\t\tTone.call(this);\n\n\t\t\t/** \n\t\t\t *  The channel count\n\t\t\t *  @type  {number}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._channels = this.defaultArg(channels, 1);\n\n\t\t\t/** \n\t\t\t *  the smoothing value\n\t\t\t *  @type  {number}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._smoothing = this.defaultArg(smoothing, 0.8);\n\n\t\t\t/** \n\t\t\t *  the amount of time a clip is remember for. \n\t\t\t *  @type  {number}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._clipMemory = this.defaultArg(clipMemory, 0.5) * 1000;\n\n\t\t\t/** \n\t\t\t *  the rms for each of the channels\n\t\t\t *  @private\n\t\t\t *  @type {Array<number>}\n\t\t\t */\n\t\t\tthis._volume = new Array(this._channels);\n\n\t\t\t/** \n\t\t\t *  the raw values for each of the channels\n\t\t\t *  @private\n\t\t\t *  @type {Array<number>}\n\t\t\t */\n\t\t\tthis._values = new Array(this._channels);\n\n\t\t\t//zero out the volume array\n\t\t\tfor (var i = 0; i < this._channels; i++){\n\t\t\t\tthis._volume[i] = 0;\n\t\t\t\tthis._values[i] = 0;\n\t\t\t}\n\n\t\t\t/** \n\t\t\t *  last time the values clipped\n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t\t\tthis._lastClip = 0;\n\t\t\t\n\t\t\t/** \n\t\t\t *  @private\n\t\t\t *  @type {ScriptProcessorNode}\n\t\t\t */\n\t\t\tthis._jsNode = this.context.createScriptProcessor(this.bufferSize, this._channels, 1);\n\t\t\tthis._jsNode.onaudioprocess = this._onprocess.bind(this);\n\t\t\t//so it doesn't get garbage collected\n\t\t\tthis._jsNode.noGC();\n\n\t\t\t//signal just passes\n\t\t\tthis.input.connect(this.output);\n\t\t\tthis.input.connect(this._jsNode);\n\t\t};\n\n\t\tTone.extend(Tone.Meter);\n\n\t\t/**\n\t\t *  called on each processing frame\n\t\t *  @private\n\t\t *  @param  {AudioProcessingEvent} event \n\t\t */\n\t\tTone.Meter.prototype._onprocess = function(event){\n\t\t\tvar bufferSize = this._jsNode.bufferSize;\n\t\t\tvar smoothing = this._smoothing;\n\t\t\tfor (var channel = 0; channel < this._channels; channel++){\n\t\t\t\tvar input = event.inputBuffer.getChannelData(channel);\n\t\t\t\tvar sum = 0;\n\t\t\t\tvar total = 0;\n\t\t\t\tvar x;\n\t\t\t\tvar clipped = false;\n\t\t\t\tfor (var i = 0; i < bufferSize; i++){\n\t\t\t\t\tx = input[i];\n\t\t\t\t\tif (!clipped && x > 0.95){\n\t\t\t\t\t\tclipped = true;\n\t\t\t\t\t\tthis._lastClip = Date.now();\n\t\t\t\t\t}\n\t\t\t\t\ttotal += x;\n\t\t\t    \tsum += x * x;\n\t\t\t\t}\n\t\t\t\tvar average = total / bufferSize;\n\t\t\t\tvar rms = Math.sqrt(sum / bufferSize);\n\t\t\t\tthis._volume[channel] = Math.max(rms, this._volume[channel] * smoothing);\n\t\t\t\tthis._values[channel] = average;\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t *  get the rms of the signal\n\t\t *  \t\n\t\t *  @param  {number} [channel=0] which channel\n\t\t *  @return {number}         the value\n\t\t */\n\t\tTone.Meter.prototype.getLevel = function(channel){\n\t\t\tchannel = this.defaultArg(channel, 0);\n\t\t\tvar vol = this._volume[channel];\n\t\t\tif (vol < 0.00001){\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\treturn vol;\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t *  get the value of the signal\n\t\t *  @param  {number=} channel \n\t\t *  @return {number}         \n\t\t */\n\t\tTone.Meter.prototype.getValue = function(channel){\n\t\t\tchannel = this.defaultArg(channel, 0);\n\t\t\treturn this._values[channel];\n\t\t};\n\n\t\t/**\n\t\t *  get the volume of the signal in dB\n\t\t *  @param  {number=} channel \n\t\t *  @return {number}         \n\t\t */\n\t\tTone.Meter.prototype.getDb = function(channel){\n\t\t\treturn this.gainToDb(this.getLevel(channel));\n\t\t};\n\n\t\t/**\n\t\t * @returns {boolean} if the audio has clipped in the last 500ms\n\t\t */\n\t\tTone.Meter.prototype.isClipped = function(){\n\t\t\treturn Date.now() - this._lastClip < this._clipMemory;\n\t\t};\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.Meter} `this`\n\t\t */\n\t\tTone.Meter.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._jsNode.disconnect();\n\t\t\tthis._jsNode.onaudioprocess = null;\n\t\t\tthis._volume = null;\n\t\t\tthis._values = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.Meter;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class Coerces the incoming mono or stereo signal into a stereo signal\n\t\t *         where both left and right channels have the same value. \n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t */\n\t\tTone.Mono = function(){\n\t\t\tTone.call(this, 1, 0);\n\n\t\t\t/**\n\t\t\t *  merge the signal\n\t\t\t *  @type {Tone.Merge}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._merge = this.output = new Tone.Merge();\n\n\t\t\tthis.input.connect(this._merge, 0, 0);\n\t\t\tthis.input.connect(this._merge, 0, 1);\n\t\t\tthis.input.gain.value = this.dbToGain(-10);\n\t\t};\n\n\t\tTone.extend(Tone.Mono);\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.Mono} `this`\n\t\t */\n\t\tTone.Mono.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._merge.dispose();\n\t\t\tthis._merge = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.Mono;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class A compressor with seperate controls over low/mid/high dynamics\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Object} options the low/mid/high compressor settings in a single object\n\t\t *  @example\n\t\t *  var multiband = new Tone.MultibandCompressor({\n\t\t *  \t\"lowFrequency\" : 200,\n\t\t *  \t\"highFrequency\" : 1300\n\t\t *  \t\"low\" : {\n\t\t *  \t\t\"threshold\" : -12\n\t\t *  \t}\n\t\t *  })\n\t\t */\n\t\tTone.MultibandCompressor = function(options){\n\n\t\t\toptions = this.defaultArg(arguments, Tone.MultibandCompressor.defaults);\n\n\t\t\t/**\n\t\t\t *  split the incoming signal into high/mid/low\n\t\t\t *  @type {Tone.MultibandSplit}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._splitter = this.input = new Tone.MultibandSplit({\n\t\t\t\t\"lowFrequency\" : options.lowFrequency,\n\t\t\t\t\"highFrequency\" : options.highFrequency\n\t\t\t});\n\n\t\t\t/**\n\t\t\t *  low/mid crossover frequency\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.lowFrequency = this._splitter.lowFrequency;\n\n\t\t\t/**\n\t\t\t *  mid/high crossover frequency\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.highFrequency = this._splitter.highFrequency;\n\n\t\t\t/**\n\t\t\t *  the output\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis.output = this.context.createGain();\n\n\t\t\t/**\n\t\t\t *  the low compressor\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t\t\tthis.low = new Tone.Compressor(options.low);\n\n\t\t\t/**\n\t\t\t *  the mid compressor\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t\t\tthis.mid = new Tone.Compressor(options.mid);\n\n\t\t\t/**\n\t\t\t *  the high compressor\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t\t\tthis.high = new Tone.Compressor(options.high);\n\n\t\t\t//connect the compressor\n\t\t\tthis._splitter.low.chain(this.low, this.output);\n\t\t\tthis._splitter.mid.chain(this.mid, this.output);\n\t\t\tthis._splitter.high.chain(this.high, this.output);\n\t\t};\n\n\t\tTone.extend(Tone.MultibandCompressor);\n\n\t\t/**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.MultibandCompressor.defaults = {\n\t\t\t\"low\" : Tone.Compressor.defaults,\n\t\t\t\"mid\" : Tone.Compressor.defaults,\n\t\t\t\"high\" : Tone.Compressor.defaults,\n\t\t\t\"lowFrequency\" : 250,\n\t\t\t\"highFrequency\" : 2000\n\t\t};\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.MultibandCompressor} `this`\n\t\t */\n\t\tTone.MultibandCompressor.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._splitter.dispose();\n\t\t\tthis.low.dispose();\n\t\t\tthis.mid.dispose();\n\t\t\tthis.high.dispose();\n\t\t\tthis._splitter = null;\n\t\t\tthis.low = null;\n\t\t\tthis.mid = null;\n\t\t\tthis.high = null;\n\t\t\tthis.lowFrequency = null;\n\t\t\tthis.highFrequency = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.MultibandCompressor;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *\t@class  Split the incoming signal into left and right channels\n\t\t *\t\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t *  var split = new Tone.Split();\n\t\t *  stereoSignal.connect(split);\n\t\t */\n\t\tTone.Split = function(){\n\n\t\t\tTone.call(this, 1, 2);\n\n\t\t\t/** \n\t\t\t *  @type {ChannelSplitterNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._splitter = this.context.createChannelSplitter(2);\n\n\t\t\t/** \n\t\t\t *  left channel output\n\t\t\t *  alais for the first output\n\t\t\t *  @type {GainNode}\n\t\t\t */\n\t\t\tthis.left = this.output[0] = this.context.createGain();\n\n\t\t\t/**\n\t\t\t *  the right channel output\n\t\t\t *  alais for the second output\n\t\t\t *  @type {GainNode}\n\t\t\t */\n\t\t\tthis.right = this.output[1] = this.context.createGain();\n\t\t\t\n\t\t\t//connections\n\t\t\tthis.input.connect(this._splitter);\n\t\t\tthis._splitter.connect(this.left, 0, 0);\n\t\t\tthis._splitter.connect(this.right, 1, 0);\n\t\t};\n\n\t\tTone.extend(Tone.Split);\n\n\t\t/**\n\t\t *  dispose method\n\t\t *  @returns {Tone.Split} `this`\n\t\t */\n\t\tTone.Split.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._splitter.disconnect();\n\t\t\tthis.left.disconnect();\n\t\t\tthis.right.disconnect();\n\t\t\tthis.left = null;\n\t\t\tthis.right = null;\n\t\t\tthis._splitter = null;\n\t\t\treturn this;\n\t\t}; \n\n\t\treturn Tone.Split;\n\t});\n\tToneModule( \n\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  Panner. \n\t\t *  \n\t\t *  @class  Equal Power Gain L/R Panner. Not 3D. \n\t\t *          0 = 100% Left\n\t\t *          1 = 100% Right\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {number} [initialPan=0.5] the initail panner value (defaults to 0.5 = center)\n\t\t *  @example\n\t\t *  var panner = new Tone.Panner(1);\n\t\t *  // ^ pan the input signal hard right. \n\t\t */\n\t\tTone.Panner = function(initialPan){\n\n\t\t\tTone.call(this, 1, 0);\n\t\t\t\n\t\t\t/**\n\t\t\t *  the dry/wet knob\n\t\t\t *  @type {Tone.CrossFade}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._crossFade = new Tone.CrossFade();\n\t\t\t\n\t\t\t/**\n\t\t\t *  @type {Tone.Merge}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._merger = this.output = new Tone.Merge();\n\t\t\t\n\t\t\t/**\n\t\t\t *  @type {Tone.Split}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._splitter = new Tone.Split();\n\t\t\t\n\t\t\t/**\n\t\t\t *  the pan control\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\t\n\t\t\tthis.pan = this._crossFade.fade;\n\n\t\t\t//CONNECTIONS:\n\t\t\tthis.input.connect(this._splitter.left);\n\t\t\tthis.input.connect(this._splitter.right);\n\t\t\t//left channel is dry, right channel is wet\n\t\t\tthis._splitter.connect(this._crossFade, 0, 0);\n\t\t\tthis._splitter.connect(this._crossFade, 1, 1);\n\t\t\t//merge it back together\n\t\t\tthis._crossFade.a.connect(this._merger.left);\n\t\t\tthis._crossFade.b.connect(this._merger.right);\n\n\t\t\t//initial value\n\t\t\tthis.pan.value = this.defaultArg(initialPan, 0.5);\n\t\t};\n\n\t\tTone.extend(Tone.Panner);\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.Panner} `this`\n\t\t */\n\t\tTone.Panner.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._crossFade.dispose();\n\t\t\tthis._crossFade = null;\n\t\t\tthis._splitter.dispose();\n\t\t\tthis._splitter = null;\n\t\t\tthis._merger.dispose();\n\t\t\tthis._merger = null;\n\t\t\tthis.pan = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.Panner;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class A Panner and volume in one.\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @example\n\t\t *  var panVol = new Tone.PanVol(0.25, -12);\n\t\t */\n\t\tTone.PanVol = function(pan, volume){\n\t\t\t/**\n\t\t\t *  the panning node\n\t\t\t *  @type {Tone.Panner}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._panner = this.input = new Tone.Panner(pan);\n\n\t\t\t/**\n\t\t\t * the output node\n\t\t\t * @type {GainNode}\n\t\t\t */\n\t\t\tthis.output = this.context.createGain();\n\n\t\t\t/**\n\t\t\t *  The volume control in decibels. \n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.volume = new Tone.Signal(this.output.gain, Tone.Signal.Units.Decibels);\n\t\t\tthis.volume.value = this.defaultArg(volume, 0);\n\n\t\t\t/**\n\t\t\t *  the panning control\n\t\t\t *  @type {Tone.Panner}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis.pan = this._panner.pan;\n\n\t\t\t//connections\n\t\t\tthis._panner.connect(this.output);\n\t\t};\n\n\t\tTone.extend(Tone.PanVol);\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.PanVol} `this`\n\t\t */\n\t\tTone.PanVol.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._panner.dispose();\n\t\t\tthis._panner = null;\n\t\t\tthis.volume.dispose();\n\t\t\tthis.volume = null;\n\t\t\tthis.pan = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.PanVol;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @deprecated\n\t\t *  @class  Record an input into an array or AudioBuffer. \n\t\t *          it is limited in that the recording length needs to be known beforehand. \n\t\t *          Mostly used internally for testing. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {number} channels \n\t\t */\n\t\tTone.Recorder = function(channels){\n\n\t\t\tconsole.warn(\"Tone.Recorder is deprecated. It will be removed in next version\");\n\n\t\t\tTone.call(this);\n\n\t\t\t/**\n\t\t\t *  the number of channels in the recording\n\t\t\t *  @type {number}\n\t\t\t */\n\t\t\tthis.channels = this.defaultArg(channels, 1);\n\n\t\t\t/**\n\t\t\t *  @private\n\t\t\t *  @type {ScriptProcessorNode}\n\t\t\t */\n\t\t\tthis._jsNode = this.context.createScriptProcessor(this.bufferSize, this.channels, 1);\n\t\t\tthis._jsNode.onaudioprocess = this._audioprocess.bind(this);\n\n\t\t\t/**\n\t\t\t *  Float32Array for each channel\n\t\t\t *  @private\n\t\t\t *  @type {Array<Float32Array>}\n\t\t\t */\n\t\t\tthis._recordBuffers = new Array(this.channels);\n\n\t\t\t/**\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._recordStartSample = 0;\n\n\t\t\t/**\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._recordEndSample = 0;\n\n\t\t\t/**\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._recordDuration = 0;\n\n\t\t\t/**\n\t\t\t *  @type {RecordState}\n\t\t\t */\n\t\t\tthis.state = RecordState.STOPPED;\n\n\t\t\t/** \n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t\t\tthis._recordBufferOffset = 0;\n\n\t\t\t/** \n\t\t\t *  callback invoked when the recording is over\n\t\t\t *  @private\n\t\t\t *  @type {function(Float32Array)}\n\t\t\t */\n\t\t\tthis._callback = function(){};\n\n\t\t\t//connect it up\n\t\t\tthis.input.connect(this._jsNode);\n\t\t\t//pass thru audio\n\t\t\tthis.input.connect(this.output);\n\t\t\t//so it doesn't get garbage collected\n\t\t\tthis._jsNode.noGC();\n\t\t\t//clear it to start\n\t\t\tthis.clear();\n\t\t};\n\n\t\tTone.extend(Tone.Recorder);\n\n\t\t/**\n\t\t *  internal method called on audio process\n\t\t *  \n\t\t *  @private\n\t\t *  @param   {AudioProcessorEvent} event \n\t\t */\n\t\tTone.Recorder.prototype._audioprocess = function(event){\n\t\t\tif (this.state === RecordState.STOPPED){\n\t\t\t\treturn;\n\t\t\t} else if (this.state === RecordState.RECORDING){\n\t\t\t\t//check if it's time yet\n\t\t\t\tvar now = this.defaultArg(event.playbackTime, this.now());\n\t\t\t\tvar processPeriodStart = this.toSamples(now);\n\t\t\t\tvar bufferSize = this._jsNode.bufferSize;\n\t\t\t\tvar processPeriodEnd = processPeriodStart + bufferSize;\n\t\t\t\tvar bufferOffset, len;\n\t\t\t\tif (processPeriodStart > this._recordEndSample){\n\t\t\t\t\tthis.state = RecordState.STOPPED;\n\t\t\t\t\tthis._callback(this._recordBuffers);\n\t\t\t\t} else if (processPeriodStart > this._recordStartSample) {\n\t\t\t\t\tbufferOffset = 0;\n\t\t\t\t\tlen = Math.min(this._recordEndSample - processPeriodStart, bufferSize);\n\t\t\t\t\tthis._recordChannels(event.inputBuffer, bufferOffset, len, bufferSize);\n\t\t\t\t} else if (processPeriodEnd > this._recordStartSample) {\n\t\t\t\t\tlen = processPeriodEnd - this._recordStartSample;\n\t\t\t\t\tbufferOffset = bufferSize - len;\n\t\t\t\t\tthis._recordChannels(event.inputBuffer, bufferOffset, len, bufferSize);\n\t\t\t\t} \n\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t *  record an input channel\n\t\t *  @param   {AudioBuffer} inputBuffer        \n\t\t *  @param   {number} from  \n\t\t *  @param   {number} to  \n\t\t *  @private\n\t\t */\n\t\tTone.Recorder.prototype._recordChannels = function(inputBuffer, from, to, bufferSize){\n\t\t\tvar offset = this._recordBufferOffset;\n\t\t\tvar buffers = this._recordBuffers;\n\t\t\tfor (var channelNum = 0; channelNum < inputBuffer.numberOfChannels; channelNum++){\n\t\t\t\tvar channel = inputBuffer.getChannelData(channelNum);\n\t\t\t\tif ((from === 0) && (to === bufferSize)){\n\t\t\t\t\t//set the whole thing\n\t\t\t\t\tthis._recordBuffers[channelNum].set(channel, offset);\n\t\t\t\t} else {\n\t\t\t\t\tfor (var i = from; i < from + to; i++){\n\t\t\t\t\t\tvar zeroed = i - from; \n\t\t\t\t\t\tbuffers[channelNum][zeroed + offset] = channel[i];\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._recordBufferOffset += to;\n\t\t};\t\n\n\t\t/**\n\t\t *  Record for a certain period of time\n\t\t *  \n\t\t *  will clear the internal buffer before starting\n\t\t *  \n\t\t *  @param  {Tone.Time} duration \n\t\t *  @param  {Tone.Time} wait the wait time before recording\n\t\t *  @param {function(Float32Array)} callback the callback to be invoked when the buffer is done recording\n\t\t *  @returns {Tone.Recorder} `this`\n\t\t */\n\t\tTone.Recorder.prototype.record = function(duration, startTime, callback){\n\t\t\tif (this.state === RecordState.STOPPED){\n\t\t\t\tthis.clear();\n\t\t\t\tthis._recordBufferOffset = 0;\n\t\t\t\tstartTime = this.defaultArg(startTime, 0);\n\t\t\t\tthis._recordDuration = this.toSamples(duration);\n\t\t\t\tthis._recordStartSample = this.toSamples(\"+\"+startTime);\n\t\t\t\tthis._recordEndSample = this._recordStartSample + this._recordDuration;\n\t\t\t\tfor (var i = 0; i < this.channels; i++){\n\t\t\t\t\tthis._recordBuffers[i] = new Float32Array(this._recordDuration);\n\t\t\t\t}\n\t\t\t\tthis.state = RecordState.RECORDING;\n\t\t\t\tthis._callback = this.defaultArg(callback, function(){});\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  clears the recording buffer\n\t\t *  @returns {Tone.PanVol} `this`\n\t\t */\n\t\tTone.Recorder.prototype.clear = function(){\n\t\t\tfor (var i = 0; i < this.channels; i++){\n\t\t\t\tthis._recordBuffers[i] = null;\n\t\t\t}\n\t\t\tthis._recordBufferOffset = 0;\n\t\t\treturn this;\n\t\t};\n\n\n\t\t/**\n\t\t *  true if there is nothing in the buffers\n\t\t *  @return {boolean} \n\t\t */\n\t\tTone.Recorder.prototype.isEmpty = function(){\n\t\t\treturn this._recordBuffers[0] === null;\n\t\t};\n\n\t\t/**\n\t\t *  @return {Array<Float32Array>}\n\t\t */\n\t\tTone.Recorder.prototype.getFloat32Array = function(){\n\t\t\tif (this.isEmpty()){\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\treturn this._recordBuffers;\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t *  @return {AudioBuffer}\n\t\t */\n\t\tTone.Recorder.prototype.getAudioBuffer = function(){\n\t\t\tif (this.isEmpty()){\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\tvar audioBuffer = this.context.createBuffer(this.channels, this._recordBuffers[0].length, this.context.sampleRate);\n\t\t\t\tfor (var channelNum = 0; channelNum < audioBuffer.numberOfChannels; channelNum++){\n\t\t\t\t\tvar channel = audioBuffer.getChannelData(channelNum);\n\t\t\t\t\tchannel.set(this._recordBuffers[channelNum]);\n\t\t\t\t}\n\t\t\t\treturn audioBuffer;\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.PanVol} `this`\n\t\t */\n\t\tTone.Recorder.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._jsNode.disconnect();\n\t\t\tthis._jsNode.onaudioprocess = undefined;\n\t\t\tthis._jsNode = null;\n\t\t\tthis._recordBuffers = null;\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  @enum {string}\n\t\t */\n\t\tvar RecordState = {\n\t\t\tSTOPPED : \"stopped\",\n\t\t\tSCHEDULED : \"scheduled\",\n\t\t\tRECORDING : \"recording\"\n\t\t};\n\n\t\treturn Tone.Recorder;\n\t});\n\tToneModule( \n\t\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class An envelope which can be scaled to any range. \n\t\t *         Useful for applying an envelope to a filter\n\t\t *\n\t\t *  @extends {Tone.Envelope}\n\t\t *  @constructor\n\t\t *  @param {Tone.Time|Object} [attack=0.01]\tthe attack time in seconds\n\t\t *  @param {Tone.Time} [decay=0.1]\tthe decay time in seconds\n\t\t *  @param {number} [sustain=0.5] \ta percentage (0-1) of the full amplitude\n\t\t *  @param {Tone.Time} [release=1]\tthe release time in seconds\n\t\t *  @example\n\t\t *  var scaledEnv = new Tone.ScaledEnvelope({\n\t\t *  \t\"attack\" : 0.2,\n\t\t *  \t\"min\" : 200,\n\t\t *  \t\"max\" : 2000\n\t\t *  });\n\t\t *  scaledEnv.connect(oscillator.frequency);\n\t\t */\n\t\tTone.ScaledEnvelope = function(){\n\n\t\t\t//get all of the defaults\n\t\t\tvar options = this.optionsObject(arguments, [\"attack\", \"decay\", \"sustain\", \"release\"], Tone.Envelope.defaults);\n\t\t\tTone.Envelope.call(this, options);\n\t\t\toptions = this.defaultArg(options, Tone.ScaledEnvelope.defaults);\n\n\t\t\t/** \n\t\t\t *  scale the incoming signal by an exponent\n\t\t\t *  @type {Tone.Pow}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._exp = this.output = new Tone.Pow(options.exponent);\n\n\t\t\t/**\n\t\t\t *  scale the signal to the desired range\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._scale = this.output = new Tone.Scale(options.min, options.max);\n\n\t\t\tthis._sig.chain(this._exp, this._scale);\n\t\t};\n\n\t\tTone.extend(Tone.ScaledEnvelope, Tone.Envelope);\n\n\t\t/**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t */\n\t\tTone.ScaledEnvelope.defaults = {\n\t\t\t\"min\" : 0,\n\t\t\t\"max\" : 1,\n\t\t\t\"exponent\" : 1\n\t\t};\n\n\t\t/**\n\t\t * The envelope's min output value. This is the value which it\n\t\t * starts at. \n\t\t * @memberOf Tone.ScaledEnvelope#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t\tObject.defineProperty(Tone.ScaledEnvelope.prototype, \"min\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._scale.min;\n\t\t\t},\n\t\t\tset : function(min){\n\t\t\t\tthis._scale.min = min;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * The envelope's max output value. In other words, the value\n\t\t * at the peak of the attack portion of the envelope. \n\t\t * @memberOf Tone.ScaledEnvelope#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t\tObject.defineProperty(Tone.ScaledEnvelope.prototype, \"max\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._scale.max;\n\t\t\t},\n\t\t\tset : function(max){\n\t\t\t\tthis._scale.max = max;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * The envelope's exponent value. \n\t\t * @memberOf Tone.ScaledEnvelope#\n\t\t * @type {number}\n\t\t * @name exponent\n\t\t */\n\t\tObject.defineProperty(Tone.ScaledEnvelope.prototype, \"exponent\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._exp.value;\n\t\t\t},\n\t\t\tset : function(exp){\n\t\t\t\tthis._exp.value = exp;\n\t\t\t}\n\t\t});\n\t\t\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.ScaledEnvelope} `this`\n\t\t */\n\t\tTone.ScaledEnvelope.prototype.dispose = function(){\n\t\t\tTone.Envelope.prototype.dispose.call(this);\n\t\t\tthis._scale.dispose();\n\t\t\tthis._scale = null;\n\t\t\tthis._exp.dispose();\n\t\t\tthis._exp = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.ScaledEnvelope;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class  Buffer loading and storage. Tone.Buffer is used internally by all \n\t\t *          classes that make requests for audio files such as {@link Tone.Player},\n\t\t *          {@link Tone.Sampler} and {@link Tone.Convolver} .\n\t\t *          <br><br>Aside from load callbacks from individual buffers, Tone.Buffer \n\t\t *  \t\tprovides static methods which keep track of the loading progress \n\t\t *  \t\tof all of the buffers. These methods are `onload`, `onprogress`,\n\t\t *  \t\tand `onerror`. \n\t\t *\n\t\t *  @constructor \n\t\t *  @param {AudioBuffer|string} url the url to load, or the audio buffer to set\n\t\t */\n\t\tTone.Buffer = function(){\n\n\t\t\tvar options = this.optionsObject(arguments, [\"url\", \"onload\"], Tone.Buffer.defaults);\n\n\t\t\t/**\n\t\t\t *  stores the loaded AudioBuffer\n\t\t\t *  @type {AudioBuffer}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._buffer = null;\n\n\t\t\t/**\n\t\t\t *  the url of the buffer. `undefined` if it was \n\t\t\t *  constructed with a buffer\n\t\t\t *  @type {string}\n\t\t\t *  @readOnly\n\t\t\t */\n\t\t\tthis.url = undefined;\n\n\t\t\t/**\n\t\t\t *  indicates if the buffer is loaded or not\n\t\t\t *  @type {boolean}\n\t\t\t *  @readOnly\n\t\t\t */\n\t\t\tthis.loaded = false;\n\n\t\t\t/**\n\t\t\t *  the callback to invoke when everything is loaded\n\t\t\t *  @type {function}\n\t\t\t */\n\t\t\tthis.onload = options.onload.bind(this, this);\n\n\t\t\tif (options.url instanceof AudioBuffer){\n\t\t\t\tthis._buffer.set(options.url);\n\t\t\t\tthis.onload(this);\n\t\t\t} else if (typeof options.url === \"string\"){\n\t\t\t\tthis.url = options.url;\n\t\t\t\tTone.Buffer._addToQueue(options.url, this);\n\t\t\t}\n\t\t};\n\n\t\tTone.extend(Tone.Buffer);\n\n\t\t/**\n\t\t *  the default parameters\n\t\t *\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.Buffer.defaults = {\n\t\t\t\"url\" : undefined,\n\t\t\t\"onload\" : function(){},\n\t\t};\n\n\t\t/**\n\t\t *  set the buffer\n\t\t *  @param {AudioBuffer|Tone.Buffer} buffer the buffer\n\t\t *  @returns {Tone.Buffer} `this`\n\t\t */\n\t\tTone.Buffer.prototype.set = function(buffer){\n\t\t\tif (buffer instanceof Tone.Buffer){\n\t\t\t\tthis._buffer = buffer.get();\n\t\t\t} else {\n\t\t\t\tthis._buffer = buffer;\n\t\t\t}\n\t\t\tthis.loaded = true;\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  @return {AudioBuffer} the audio buffer\n\t\t */\n\t\tTone.Buffer.prototype.get = function(){\n\t\t\treturn this._buffer;\n\t\t};\n\n\t\t/**\n\t\t *  @param {string} url the url to load\n\t\t *  @param {function=} callback the callback to invoke on load. \n\t\t *                              don't need to set if `onload` is\n\t\t *                              already set.\n\t\t *  @returns {Tone.Buffer} `this`\n\t\t */\n\t\tTone.Buffer.prototype.load = function(url, callback){\n\t\t\tthis.url = url;\n\t\t\tthis.onload = this.defaultArg(callback, this.onload);\n\t\t\tTone.Buffer._addToQueue(url, this);\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  dispose and disconnect\n\t\t *  @returns {Tone.Buffer} `this`\n\t\t */\n\t\tTone.Buffer.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tTone.Buffer._removeFromQueue(this);\n\t\t\tthis._buffer = null;\n\t\t\tthis.onload = null;\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t * the duration of the buffer\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {number}\n\t\t * @name duration\n\t\t * @readOnly\n\t\t */\n\t\tObject.defineProperty(Tone.Buffer.prototype, \"duration\", {\n\t\t\tget : function(){\n\t\t\t\tif (this._buffer){\n\t\t\t\t\treturn this._buffer.duration;\n\t\t\t\t} else {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\n\t\t///////////////////////////////////////////////////////////////////////////\n\t\t// STATIC METHODS\n\t\t///////////////////////////////////////////////////////////////////////////\n\t\t \n\t\t/**\n\t\t *  the static queue for all of the xhr requests\n\t\t *  @type {Array}\n\t\t *  @private\n\t\t */\n\t\tTone.Buffer._queue = [];\n\n\t\t/**\n\t\t *  the array of current downloads\n\t\t *  @type {Array}\n\t\t *  @private\n\t\t */\n\t\tTone.Buffer._currentDownloads = [];\n\n\t\t/**\n\t\t *  the total number of downloads\n\t\t *  @type {number}\n\t\t *  @private\n\t\t */\n\t\tTone.Buffer._totalDownloads = 0;\n\n\t\t/**\n\t\t *  the maximum number of simultaneous downloads\n\t\t *  @static\n\t\t *  @type {number}\n\t\t */\n\t\tTone.Buffer.MAX_SIMULTANEOUS_DOWNLOADS = 6;\n\t\t\n\t\t/**\n\t\t *  Adds a file to be loaded to the loading queue\n\t\t *  @param   {string}   url      the url to load\n\t\t *  @param   {function} callback the callback to invoke once it's loaded\n\t\t *  @private\n\t\t */\n\t\tTone.Buffer._addToQueue = function(url, buffer){\n\t\t\tTone.Buffer._queue.push({\n\t\t\t\turl : url,\n\t\t\t\tBuffer : buffer,\n\t\t\t\tprogress : 0,\n\t\t\t\txhr : null\n\t\t\t});\n\t\t\tthis._totalDownloads++;\n\t\t\tTone.Buffer._next();\n\t\t};\n\n\t\t/**\n\t\t *  Remove an object from the queue's (if it's still there)\n\t\t *  Abort the XHR if it's in progress\n\t\t *  @param {Tone.Buffer} buffer the buffer to remove\n\t\t *  @private\n\t\t */\n\t\tTone.Buffer._removeFromQueue = function(buffer){\n\t\t\tvar i;\n\t\t\tfor (i = 0; i < Tone.Buffer._queue.length; i++){\n\t\t\t\tvar q = Tone.Buffer._queue[i];\n\t\t\t\tif (q.Buffer === buffer){\n\t\t\t\t\tTone.Buffer._queue.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (i = 0; i < Tone.Buffer._currentDownloads.length; i++){\n\t\t\t\tvar dl = Tone.Buffer._currentDownloads[i];\n\t\t\t\tif (dl.Buffer === buffer){\n\t\t\t\t\tTone.Buffer._currentDownloads.splice(i, 1);\n\t\t\t\t\tdl.xhr.abort();\n\t\t\t\t\tdl.xhr.onprogress = null;\n\t\t\t\t\tdl.xhr.onload = null;\n\t\t\t\t\tdl.xhr.onerror = null;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t *  load the next buffer in the queue\n\t\t *  @private\n\t\t */\n\t\tTone.Buffer._next = function(){\n\t\t\tif (Tone.Buffer._queue.length > 0){\n\t\t\t\tif (Tone.Buffer._currentDownloads.length < Tone.Buffer.MAX_SIMULTANEOUS_DOWNLOADS){\n\t\t\t\t\tvar next = Tone.Buffer._queue.shift();\n\t\t\t\t\tTone.Buffer._currentDownloads.push(next);\n\t\t\t\t\tnext.xhr = Tone.Buffer.load(next.url, function(buffer){\n\t\t\t\t\t\t//remove this one from the queue\n\t\t\t\t\t\tvar index = Tone.Buffer._currentDownloads.indexOf(next);\n\t\t\t\t\t\tTone.Buffer._currentDownloads.splice(index, 1);\n\t\t\t\t\t\tnext.Buffer.set(buffer);\n\t\t\t\t\t\tnext.Buffer.onload(next.Buffer);\n\t\t\t\t\t\tTone.Buffer._onprogress();\n\t\t\t\t\t\tTone.Buffer._next();\n\t\t\t\t\t});\n\t\t\t\t\tnext.xhr.onprogress = function(event){\n\t\t\t\t\t\tnext.progress = event.loaded / event.total;\n\t\t\t\t\t\tTone.Buffer._onprogress();\n\t\t\t\t\t};\n\t\t\t\t\tnext.xhr.onerror = Tone.Buffer.onerror;\n\t\t\t\t} \n\t\t\t} else if (Tone.Buffer._currentDownloads.length === 0){\n\t\t\t\tTone.Buffer.onload();\n\t\t\t\t//reset the downloads\n\t\t\t\tTone.Buffer._totalDownloads = 0;\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t *  internal progress event handler\n\t\t *  @private\n\t\t */\n\t\tTone.Buffer._onprogress = function(){\n\t\t\tvar curretDownloadsProgress = 0;\n\t\t\tvar currentDLLen = Tone.Buffer._currentDownloads.length;\n\t\t\tvar inprogress = 0;\n\t\t\tif (currentDLLen > 0){\n\t\t\t\tfor (var i = 0; i < currentDLLen; i++){\n\t\t\t\t\tvar dl = Tone.Buffer._currentDownloads[i];\n\t\t\t\t\tcurretDownloadsProgress += dl.progress;\n\t\t\t\t}\n\t\t\t\tinprogress = curretDownloadsProgress;\n\t\t\t}\n\t\t\tvar currentDownloadProgress = currentDLLen - inprogress;\n\t\t\tvar completed = Tone.Buffer._totalDownloads - Tone.Buffer._queue.length - currentDownloadProgress;\n\t\t\tTone.Buffer.onprogress(completed / Tone.Buffer._totalDownloads);\n\t\t};\n\n\t\t/**\n\t\t *  makes an xhr reqest for the selected url\n\t\t *  Load the audio file as an audio buffer.\n\t\t *  Decodes the audio asynchronously and invokes\n\t\t *  the callback once the audio buffer loads.\n\t\t *  @param {string} url the url of the buffer to load.\n\t\t *                      filetype support depends on the\n\t\t *                      browser.\n\t\t *  @param {function} callback function\n\t\t *  @returns {XMLHttpRequest} returns the XHR\n\t\t */\n\t\tTone.Buffer.load = function(url, callback){\n\t\t\tvar request = new XMLHttpRequest();\n\t\t\trequest.open(\"GET\", url, true);\n\t\t\trequest.responseType = \"arraybuffer\";\n\t\t\t// decode asynchronously\n\t\t\trequest.onload = function() {\n\t\t\t\tTone.context.decodeAudioData(request.response, function(buff) {\n\t\t\t\t\tif(!buff){\n\t\t\t\t\t\tthrow new Error(\"could not decode audio data:\" + url);\n\t\t\t\t\t}\n\t\t\t\t\tcallback(buff);\n\t\t\t\t});\n\t\t\t};\n\t\t\t//send the request\n\t\t\trequest.send();\n\t\t\treturn request;\n\t\t};\n\n\t\t/**\n\t\t *  callback when all of the buffers in the queue have loaded\n\t\t *  @static\n\t\t *  @type {function}\n\t\t *  @example\n\t\t * //invoked when all of the queued samples are done loading\n\t\t * Tone.Buffer.onload = function(){\n\t\t * \tconsole.log(\"everything is loaded\");\n\t\t * };\n\t\t */\n\t\tTone.Buffer.onload = function(){};\n\n\t\t/**\n\t\t *  Callback function is invoked with the progress of all of the loads in the queue. \n\t\t *  The value passed to the callback is between 0-1.\n\t\t *  @static\n\t\t *  @type {function}\n\t\t *  @example\n\t\t * Tone.Buffer.onprogress = function(percent){\n\t\t * \tconsole.log(\"progress:\" + (percent * 100).toFixed(1) + \"%\");\n\t\t * };\n\t\t */\n\t\tTone.Buffer.onprogress = function(){};\n\n\t\t/**\n\t\t *  Callback if one of the buffers in the queue encounters an error. The error\n\t\t *  is passed in as the argument. \n\t\t *  @static\n\t\t *  @type {function}\n\t\t *  @example\n\t\t * Tone.Buffer.onerror = function(e){\n\t\t * \tconsole.log(\"there was an error while loading the buffers: \"+e);\n\t\t * }\n\t\t */\n\t\tTone.Buffer.onerror = function(){};\n\n\t\treturn Tone.Buffer;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  buses are another way of routing audio\n\t\t *\n\t\t *  augments Tone.prototype to include send and recieve\n\t\t */\n\n\t\t /**\n\t\t  *  All of the routes\n\t\t  *  \n\t\t  *  @type {Object}\n\t\t  *  @static\n\t\t  *  @private\n\t\t  */\n\t\tvar Buses = {};\n\n\t\t/**\n\t\t *  send signal to a channel name\n\t\t *  defined in \"Tone/core/Bus\"\n\t\t *\n\t\t *  @param  {string} channelName \n\t\t *  @param  {number} amount      \n\t\t *  @return {GainNode}             \n\t\t */\n\t\tTone.prototype.send = function(channelName, amount){\n\t\t\tif (!Buses.hasOwnProperty(channelName)){\n\t\t\t\tBuses[channelName] = this.context.createGain();\n\t\t\t}\n\t\t\tvar sendKnob = this.context.createGain();\n\t\t\tsendKnob.gain.value = this.defaultArg(amount, 1);\n\t\t\tthis.output.chain(sendKnob, Buses[channelName]);\n\t\t\treturn sendKnob;\t\t\n\t\t};\n\n\t\t/**\n\t\t *  recieve the input from the desired channelName to the input\n\t\t *  defined in \"Tone/core/Bus\"\n\t\t *\n\t\t *  @param  {string} channelName \n\t\t *  @param {AudioNode} [input=this.input] if no input is selected, the\n\t\t *                                         input of the current node is\n\t\t *                                         chosen. \n\t\t *  @returns {Tone} `this`\n\t\t */\n\t\tTone.prototype.receive = function(channelName, input){\n\t\t\tif (!Buses.hasOwnProperty(channelName)){\n\t\t\t\tBuses[channelName] = this.context.createGain();\t\n\t\t\t}\n\t\t\tif (this.isUndef(input)){\n\t\t\t\tinput = this.input;\n\t\t\t}\n\t\t\tBuses[channelName].connect(input);\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  Frequency can be described similar to time, except ultimately the\n\t\t *  values are converted to frequency instead of seconds. A number\n\t\t *  is taken literally as the value in hertz. Additionally any of the \n\t\t *  {@link Tone.Time} encodings can be used. Note names in the form\n\t\t *  of NOTE OCTAVE (i.e. `C4`) are also accepted and converted to their\n\t\t *  frequency value. \n\t\t *  \n\t\t *  @typedef {number|string|Tone.Time} Tone.Frequency\n\t\t */\n\n\t\t/**\n\t\t *  @class  A timed note. Creating a note will register a callback \n\t\t *          which will be invoked on the channel at the time with\n\t\t *          whatever value was specified. \n\t\t *\n\t\t *  @constructor\n\t\t *  @param {number|string} channel the channel name of the note\n\t\t *  @param {Tone.Time} time the time when the note will occur\n\t\t *  @param {string|number|Object|Array} value the value of the note\n\t\t */\n\t\tTone.Note = function(channel, time, value){\n\n\t\t\t/**\n\t\t\t *  the value of the note. This value is returned\n\t\t\t *  when the channel callback is invoked.\n\t\t\t *  \n\t\t\t *  @type {string|number|Object}\n\t\t\t */\n\t\t\tthis.value = value;\n\n\t\t\t/**\n\t\t\t *  the channel name or number\n\t\t\t *  \n\t\t\t *  @type {string|number}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._channel = channel;\n\n\t\t\t/**\n\t\t\t *  an internal reference to the id of the timeline\n\t\t\t *  callback which is set. \n\t\t\t *  \n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._timelineID = Tone.Transport.setTimeline(this._trigger.bind(this), time);\n\t\t};\n\n\t\t/**\n\t\t *  invoked by the timeline\n\t\t *  @private\n\t\t *  @param {number} time the time at which the note should play\n\t\t */\n\t\tTone.Note.prototype._trigger = function(time){\n\t\t\t//invoke the callback\n\t\t\tchannelCallbacks(this._channel, time, this.value);\n\t\t};\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.Note} `this`\n\t\t */\n\t\tTone.Note.prototype.dispose = function(){ \n\t\t\tTone.Tranport.clearTimeline(this._timelineID);\n\t\t\tthis.value = null;\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t\tvar NoteChannels = {};\n\n\t\t/**\n\t\t *  invoke all of the callbacks on a specific channel\n\t\t *  @private\n\t\t */\n\t\tfunction channelCallbacks(channel, time, value){\n\t\t\tif (NoteChannels.hasOwnProperty(channel)){\n\t\t\t\tvar callbacks = NoteChannels[channel];\n\t\t\t\tfor (var i = 0, len = callbacks.length; i < len; i++){\n\t\t\t\t\tvar callback = callbacks[i];\n\t\t\t\t\tif (Array.isArray(value)){\n\t\t\t\t\t\tcallback.apply(window, [time].concat(value));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcallback(time, value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t *  listen to a specific channel, get all of the note callbacks\n\t\t *  @static\n\t\t *  @param {string|number} channel the channel to route note events from\n\t\t *  @param {function(*)} callback callback to be invoked when a note will occur\n\t\t *                                        on the specified channel\n\t\t */\n\t\tTone.Note.route = function(channel, callback){\n\t\t\tif (NoteChannels.hasOwnProperty(channel)){\n\t\t\t\tNoteChannels[channel].push(callback);\n\t\t\t} else {\n\t\t\t\tNoteChannels[channel] = [callback];\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t *  Remove a previously routed callback from a channel. \n\t\t *  @static\n\t\t *  @param {string|number} channel The channel to unroute note events from\n\t\t *  @param {function(*)} callback Callback which was registered to the channel.\n\t\t */\n\t\tTone.Note.unroute = function(channel, callback){\n\t\t\tif (NoteChannels.hasOwnProperty(channel)){\n\t\t\t\tvar channelCallback = NoteChannels[channel];\n\t\t\t\tvar index = channelCallback.indexOf(callback);\n\t\t\t\tif (index !== -1){\n\t\t\t\t\tNoteChannels[channel].splice(index, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t *  Parses a score and registers all of the notes along the timeline. \n\t\t *\n\t\t *  Scores are a JSON object with instruments at the top level\n\t\t *  and an array of time and values. The value of a note can be 0 or more \n\t\t *  parameters. \n\t\t *\n\t\t *  The only requirement for the score format is that the time is the first (or only)\n\t\t *  value in the array. All other values are optional and will be passed into the callback\n\t\t *  function registered using `Note.route(channelName, callback)`.\n\t\t *\n\t\t *  To convert MIDI files to score notation, take a look at utils/MidiToScore.js\n\t\t *\n\t\t *  @example\n\t\t *  //an example JSON score which sets up events on channels\n\t\t *  var score = { \n\t\t *  \t\"synth\"  : [[\"0\", \"C3\"], [\"0:1\", \"D3\"], [\"0:2\", \"E3\"], ... ],\n\t\t *  \t\"bass\"  : [[\"0\", \"C2\"], [\"1:0\", \"A2\"], [\"2:0\", \"C2\"], [\"3:0\", \"A2\"], ... ],\n\t\t *  \t\"kick\"  : [\"0\", \"0:2\", \"1:0\", \"1:2\", \"2:0\", ... ],\n\t\t *  \t//...\n\t\t *  };\n\t\t *  //parse the score into Notes\n\t\t *  Tone.Note.parseScore(score);\n\t\t *  //route all notes on the \"synth\" channel\n\t\t *  Tone.Note.route(\"synth\", function(time, note){\n\t\t *  \t//trigger synth\n\t\t *  });\n\t\t *  @static\n\t\t *  @param {Object} score\n\t\t *  @return {Array<Tone.Note>} an array of all of the notes that were created\n\t\t */\n\t\tTone.Note.parseScore = function(score){\n\t\t\tvar notes = [];\n\t\t\tfor (var inst in score){\n\t\t\t\tvar part = score[inst];\n\t\t\t\tif (inst === \"tempo\"){\n\t\t\t\t\tTone.Transport.bpm.value = part;\n\t\t\t\t} else if (inst === \"timeSignature\"){\n\t\t\t\t\tTone.Transport.timeSignature = part[0] / (part[1] / 4);\n\t\t\t\t} else if (Array.isArray(part)){\n\t\t\t\t\tfor (var i = 0; i < part.length; i++){\n\t\t\t\t\t\tvar noteDescription = part[i];\n\t\t\t\t\t\tvar note;\n\t\t\t\t\t\tif (Array.isArray(noteDescription)){\n\t\t\t\t\t\t\tvar time = noteDescription[0];\n\t\t\t\t\t\t\tvar value = noteDescription.slice(1);\n\t\t\t\t\t\t\tnote = new Tone.Note(inst, time, value);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnote = new Tone.Note(inst, noteDescription);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnotes.push(note);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError(\"score parts must be Arrays\");\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn notes;\n\t\t};\n\n\t\t///////////////////////////////////////////////////////////////////////////\n\t\t//\tMUSIC NOTES\n\t\t//\t\n\t\t//\tAugments Tone.prototype to include note methods\n\t\t///////////////////////////////////////////////////////////////////////////\n\n\t\tvar noteToIndex = { \"c\" : 0, \"c#\" : 1, \"db\" : 1, \"d\" : 2, \"d#\" : 3, \"eb\" : 3, \n\t\t\t\"e\" : 4, \"f\" : 5, \"f#\" : 6, \"gb\" : 6, \"g\" : 7, \"g#\" : 8, \"ab\" : 8, \n\t\t\t\"a\" : 9, \"a#\" : 10, \"bb\" : 10, \"b\" : 11\n\t\t};\n\n\t\tvar noteIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n\t\tvar middleC = 261.6255653005986;\n\n\t\t/**\n\t\t *  convert a note name to frequency (i.e. A4 to 440)\n\t\t *  defined in \"Tone/core/Note\"\n\t\t *  \n\t\t *  @param  {string} note\n\t\t *  @return {number}         \n\t\t */\n\t\tTone.prototype.noteToFrequency = function(note){\n\t\t\t//break apart the note by frequency and octave\n\t\t\tvar parts = note.split(/(\\d+)/);\n\t\t\tif (parts.length === 3){\n\t\t\t\tvar index = noteToIndex[parts[0].toLowerCase()];\n\t\t\t\tvar octave = parts[1];\n\t\t\t\tvar noteNumber = index + parseInt(octave, 10) * 12;\n\t\t\t\treturn Math.pow(2, (noteNumber - 48) / 12) * middleC;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t *  test if a string is in note format: i.e. \"C4\"\n\t\t *  @param  {string|number}  note the note to test\n\t\t *  @return {boolean}      true if it's in the form of a note\n\t\t *  @method isNotation\n\t\t *  @lends Tone.prototype.isNotation\n\t\t */\n\t\tTone.prototype.isNote = ( function(){\n\t\t\tvar noteFormat = new RegExp(/[a-g]{1}([b#]{1}|[b#]{0})[0-9]+$/i);\n\t\t\treturn function(note){\n\t\t\t\tif (typeof note === \"string\"){\n\t\t\t\t\tnote = note.toLowerCase();\n\t\t\t\t} \n\t\t\t\treturn noteFormat.test(note);\n\t\t\t};\n\t\t})();\n\n\t\t/**\n\t\t *  a pointer to the previous toFrequency method\n\t\t *  @private\n\t\t *  @function\n\t\t */\n\t\tTone.prototype._overwrittenToFrequency = Tone.prototype.toFrequency;\n\n\t\t/**\n\t\t *  A method which accepts frequencies in the form\n\t\t *  of notes (`\"C#4\"`), frequencies as strings (\"49hz\"), frequency numbers,\n\t\t *  or Tone.Time and converts them to their frequency as a number in hertz.\n\t\t *  @param  {Tone.Frequency} note the note name or notation\n\t\t *  @param {number=} \tnow \tif passed in, this number will be \n\t\t *                        \t\tused for all 'now' relative timings\n\t\t *  @return {number}      the frequency as a number\n\t\t */\n\t\tTone.prototype.toFrequency = function(note, now){\n\t\t\tif (this.isNote(note)){\n\t\t\t\tnote = this.noteToFrequency(note);\n\t\t\t} \n\t\t\treturn this._overwrittenToFrequency(note, now);\n\t\t};\n\n\t\t/**\n\t\t *  Convert a note name (i.e. A4, C#5, etc to a frequency).\n\t\t *  Defined in \"Tone/core/Note\"\n\t\t *  @param  {number} freq\n\t\t *  @return {string}         \n\t\t */\n\t\tTone.prototype.frequencyToNote = function(freq){\n\t\t\tvar log = Math.log(freq / middleC) / Math.LN2;\n\t\t\tvar noteNumber = Math.round(12 * log) + 48;\n\t\t\tvar octave = Math.floor(noteNumber/12);\n\t\t\tvar noteName = noteIndexToNote[noteNumber % 12];\n\t\t\treturn noteName + octave.toString();\n\t\t};\n\n\t\t/**\n\t\t *  Convert an interval (in semitones) to a frequency ratio.\n\t\t *\n\t\t *  @param  {number} interval the number of semitones above the base note\n\t\t *  @return {number}          the frequency ratio\n\t\t *  @example\n\t\t *  tone.intervalToFrequencyRatio(0); // returns 1\n\t\t *  tone.intervalToFrequencyRatio(12); // returns 2\n\t\t */\n\t\tTone.prototype.intervalToFrequencyRatio = function(interval){\n\t\t\treturn Math.pow(2,(interval/12));\n\t\t};\n\n\t\t/**\n\t\t *  Convert a midi note number into a note name/\n\t\t *\n\t\t *  @param  {number} midiNumber the midi note number\n\t\t *  @return {string}            the note's name and octave\n\t\t *  @example\n\t\t *  tone.midiToNote(60); // returns \"C3\"\n\t\t */\n\t\tTone.prototype.midiToNote = function(midiNumber){\n\t\t\tvar octave = Math.floor(midiNumber / 12) - 2;\n\t\t\tvar note = midiNumber % 12;\n\t\t\treturn noteIndexToNote[note] + octave;\n\t\t};\n\n\t\t/**\n\t\t *  convert a note to it's midi value\n\t\t *  defined in \"Tone/core/Note\"\n\t\t *\n\t\t *  @param  {string} note the note name (i.e. \"C3\")\n\t\t *  @return {number} the midi value of that note\n\t\t *  @example\n\t\t *  tone.noteToMidi(\"C3\"); // returns 60\n\t\t */\n\t\tTone.prototype.noteToMidi = function(note){\n\t\t\t//break apart the note by frequency and octave\n\t\t\tvar parts = note.split(/(\\d+)/);\n\t\t\tif (parts.length === 3){\n\t\t\t\tvar index = noteToIndex[parts[0].toLowerCase()];\n\t\t\t\tvar octave = parts[1];\n\t\t\t\treturn index + (parseInt(octave, 10) + 2) * 12;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t};\n\n\t\treturn Tone.Note;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\t\t\n\t\t/**\n\t\t * \t@class  Effect is the base class for effects. connect the effect between\n\t\t * \t        the effectSend and effectReturn GainNodes. then control the amount of\n\t\t * \t        effect which goes to the output using the dry/wet control.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {number} [initialWet=0] the starting wet value\n\t\t *                                 defaults to 100% wet\n\t\t */\n\t\tTone.Effect = function(){\n\n\t\t\tTone.call(this);\n\n\t\t\t//get all of the defaults\n\t\t\tvar options = this.optionsObject(arguments, [\"wet\"], Tone.Effect.defaults);\n\n\t\t\t/**\n\t\t\t *  the drywet knob to control the amount of effect\n\t\t\t *  @type {Tone.CrossFade}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._dryWet = new Tone.CrossFade(options.wet);\n\n\t\t\t/**\n\t\t\t *  The wet control, i.e. how much of the effected\n\t\t\t *  will pass through to the output. \n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.wet = this._dryWet.fade;\n\n\t\t\t/**\n\t\t\t *  connect the effectSend to the input of hte effect\n\t\t\t *  \n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis.effectSend = this.context.createGain();\n\n\t\t\t/**\n\t\t\t *  connect the output of the effect to the effectReturn\n\t\t\t *  \n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis.effectReturn = this.context.createGain();\n\n\t\t\t//connections\n\t\t\tthis.input.connect(this._dryWet.a);\n\t\t\tthis.input.connect(this.effectSend);\n\t\t\tthis.effectReturn.connect(this._dryWet.b);\n\t\t\tthis._dryWet.connect(this.output);\n\t\t};\n\n\t\tTone.extend(Tone.Effect);\n\n\t\t/**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.Effect.defaults = {\n\t\t\t\"wet\" : 1\n\t\t};\n\n\t\t/**\n\t\t *  bypass the effect\n\t\t *  @returns {Tone.Effect} `this`\n\t\t */\n\t\tTone.Effect.prototype.bypass = function(){\n\t\t\tthis.wet.value = 0;\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  chains the effect in between the effectSend and effectReturn\n\t\t *  @param  {Tone} effect\n\t\t *  @private\n\t\t *  @returns {Tone.Effect} `this`\n\t\t */\n\t\tTone.Effect.prototype.connectEffect = function(effect){\n\t\t\tthis.effectSend.chain(effect, this.effectReturn);\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  tear down\n\t\t *  @returns {Tone.Effect} `this`\n\t\t */\n\t\tTone.Effect.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._dryWet.dispose();\n\t\t\tthis._dryWet = null;\n\t\t\tthis.effectSend.disconnect();\n\t\t\tthis.effectSend = null;\n\t\t\tthis.effectReturn.disconnect();\n\t\t\tthis.effectReturn = null;\n\t\t\tthis.wet = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.Effect;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class AutoPanner is a Tone.Panner with an LFO connected to the pan amount\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {number} [frequency=1] (optional) rate in HZ of the left-right pan\n\t\t *  @example\n\t\t *  var autoPanner = new Tone.AutoPanner(\"4n\");\n\t\t */\n\t\tTone.AutoPanner = function(){\n\n\t\t\tvar options = this.optionsObject(arguments, [\"frequency\"], Tone.AutoPanner.defaults);\n\t\t\tTone.Effect.call(this, options);\n\n\t\t\t/**\n\t\t\t *  the lfo which drives the panning\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._lfo = new Tone.LFO(options.frequency, 0, 1);\n\n\t\t\t/**\n\t\t\t * The amount of panning between left and right. \n\t\t\t * 0 = always center. 1 = full range between left and right. \n\t\t\t * @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.amount = this._lfo.amplitude;\n\n\t\t\t/**\n\t\t\t *  the panner node which does the panning\n\t\t\t *  @type {Tone.Panner}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._panner = new Tone.Panner();\n\n\t\t\t/**\n\t\t\t * How fast the panner modulates\n\t\t\t * @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.frequency = this._lfo.frequency;\n\n\t\t\t//connections\n\t\t\tthis.connectEffect(this._panner);\n\t\t\tthis._lfo.connect(this._panner.pan);\n\t\t\tthis.type = options.type;\n\t\t};\n\n\t\t//extend Effect\n\t\tTone.extend(Tone.AutoPanner, Tone.Effect);\n\n\t\t/**\n\t\t *  defaults\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.AutoPanner.defaults = {\n\t\t\t\"frequency\" : 1,\n\t\t\t\"type\" : \"sine\",\n\t\t\t\"amount\" : 1\n\t\t};\n\t\t\n\t\t/**\n\t\t * Start the panner.\n\t\t * @param {Tone.Time} [time=now] the panner begins.\n\t\t * @returns {Tone.AutoPanner} `this`\n\t\t */\n\t\tTone.AutoPanner.prototype.start = function(time){\n\t\t\tthis._lfo.start(time);\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t * Stop the panner.\n\t\t * @param {Tone.Time} [time=now] the panner stops.\n\t\t * @returns {Tone.AutoPanner} `this`\n\t\t */\n\t\tTone.AutoPanner.prototype.stop = function(time){\n\t\t\tthis._lfo.stop(time);\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t * Sync the panner to the transport.\n\t\t * @returns {Tone.AutoPanner} `this`\n\t\t */\n\t\tTone.AutoPanner.prototype.sync = function(){\n\t\t\tthis._lfo.sync();\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t * Unsync the panner from the transport\n\t\t * @returns {Tone.AutoPanner} `this`\n\t\t */\n\t\tTone.AutoPanner.prototype.unsync = function(){\n\t\t\tthis._lfo.unsync();\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t * Type of oscillator attached to the AutoPanner.\n\t\t * @memberOf Tone.AutoPanner#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t\tObject.defineProperty(Tone.AutoPanner.prototype, \"type\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._lfo.type;\n\t\t\t},\n\t\t\tset : function(type){\n\t\t\t\tthis._lfo.type = type;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.AutoPanner} `this`\n\t\t */\n\t\tTone.AutoPanner.prototype.dispose = function(){\n\t\t\tTone.Effect.prototype.dispose.call(this);\n\t\t\tthis._lfo.dispose();\n\t\t\tthis._lfo = null;\n\t\t\tthis._panner.dispose();\n\t\t\tthis._panner = null;\n\t\t\tthis.frequency = null;\n\t\t\tthis.amount = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.AutoPanner;\n\t});\n\n\tToneModule( \n\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class  AutoWah connects an envelope follower to a bandpass filter.\n\t\t *          Some inspiration from Tuna.js https://github.com/Dinahmoe/tuna\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {number} [baseFrequency=100] the frequency the filter is set \n\t\t *                                       to at the low point of the wah\n\t\t *  @param {number} [octaves=5] the number of octaves above the baseFrequency\n\t\t *                               the filter will sweep to when fully open\n\t\t *  @param {number} [sensitivity=0] the decibel threshold sensitivity for \n\t\t *                                   the incoming signal. Normal range of -40 to 0. \n\t\t *  @example\n\t\t *  var autoWah = new Tone.AutoWah(100, 6, -20);\n\t\t */\n\t\tTone.AutoWah = function(){\n\n\t\t\tvar options = this.optionsObject(arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"], Tone.AutoWah.defaults);\n\t\t\tTone.Effect.call(this, options);\n\n\t\t\t/**\n\t\t\t *  the envelope follower\n\t\t\t *  @type {Tone.Follower}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis.follower = new Tone.Follower(options.follower);\n\n\t\t\t/**\n\t\t\t *  scales the follower value to the frequency domain\n\t\t\t *  @type {Tone}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._sweepRange = new Tone.ScaleExp(0, 1, 0.5);\n\n\t\t\t/**\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._baseFrequency = options.baseFrequency;\n\n\t\t\t/**\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._octaves = options.octaves;\n\n\t\t\t/**\n\t\t\t *  the input gain to adjust the senstivity\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._inputBoost = this.context.createGain();\n\n\t\t\t/**\n\t\t\t *  @type {BiquadFilterNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._bandpass = new Tone.Filter({\n\t\t\t\t\"rolloff\" : -48,\n\t\t\t\t\"frequency\" : 0,\n\t\t\t\t\"Q\" : options.Q,\n\t\t\t});\n\t\t\n\t\t\t/**\n\t\t\t *  @type {Tone.Filter}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._peaking = new Tone.Filter(0, \"peaking\");\n\t\t\tthis._peaking.gain.value = options.gain;\n\n\t\t\t/**\n\t\t\t * the gain of the filter.\n\t\t\t * @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.gain = this._peaking.gain;\n\n\t\t\t/**\n\t\t\t * The quality of the filter.\n\t\t\t * @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.Q = this._bandpass.Q;\n\n\t\t\t//the control signal path\n\t\t\tthis.effectSend.chain(this._inputBoost, this.follower, this._sweepRange);\n\t\t\tthis._sweepRange.connect(this._bandpass.frequency);\n\t\t\tthis._sweepRange.connect(this._peaking.frequency);\n\t\t\t//the filtered path\n\t\t\tthis.effectSend.chain(this._bandpass, this._peaking, this.effectReturn);\n\t\t\t//set the initial value\n\t\t\tthis._setSweepRange();\n\t\t\tthis.sensitivity = options.sensitivity;\n\t\t};\n\n\t\tTone.extend(Tone.AutoWah, Tone.Effect);\n\n\t\t/**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.AutoWah.defaults = {\n\t\t\t\"baseFrequency\" : 100,\n\t\t\t\"octaves\" : 6,\n\t\t\t\"sensitivity\" : 0,\n\t\t\t\"Q\" : 2,\n\t\t\t\"gain\" : 2,\n\t\t\t\"follower\" : {\n\t\t\t\t\"attack\" : 0.3,\n\t\t\t\t\"release\" : 0.5\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * The number of octaves that the filter will sweep.\n\t\t * @memberOf Tone.AutoWah#\n\t\t * @type {number}\n\t\t * @name octaves\n\t\t */\n\t\tObject.defineProperty(Tone.AutoWah.prototype, \"octaves\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._octaves;\n\t\t\t}, \n\t\t\tset : function(octaves){\n\t\t\t\tthis._octaves = octaves;\n\t\t\t\tthis._setSweepRange();\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * The base frequency from which the sweep will start from.\n\t\t * @memberOf Tone.AutoWah#\n\t\t * @type {Tone.Frequency}\n\t\t * @name baseFrequency\n\t\t */\n\t\tObject.defineProperty(Tone.AutoWah.prototype, \"baseFrequency\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._baseFrequency;\n\t\t\t}, \n\t\t\tset : function(baseFreq){\n\t\t\t\tthis._baseFrequency = baseFreq;\n\t\t\t\tthis._setSweepRange();\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * The sensitivity to control how responsive to the input signal the filter is. \n\t\t * in Decibels. \n\t\t * @memberOf Tone.AutoWah#\n\t\t * @type {number}\n\t\t * @name sensitivity\n\t\t */\n\t\tObject.defineProperty(Tone.AutoWah.prototype, \"sensitivity\", {\n\t\t\tget : function(){\n\t\t\t\treturn this.gainToDb(1 / this._inputBoost.gain.value);\n\t\t\t}, \n\t\t\tset : function(sensitivy){\n\t\t\t\tthis._inputBoost.gain.value = 1 / this.dbToGain(sensitivy);\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t *  sets the sweep range of the scaler\n\t\t *  @private\n\t\t */\n\t\tTone.AutoWah.prototype._setSweepRange = function(){\n\t\t\tthis._sweepRange.min = this._baseFrequency;\n\t\t\tthis._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);\n\t\t};\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.AutoWah} `this`\n\t\t */\n\t\tTone.AutoWah.prototype.dispose = function(){\n\t\t\tTone.Effect.prototype.dispose.call(this);\n\t\t\tthis.follower.dispose();\n\t\t\tthis.follower = null;\n\t\t\tthis._sweepRange.dispose();\n\t\t\tthis._sweepRange = null;\n\t\t\tthis._bandpass.dispose();\n\t\t\tthis._bandpass = null;\n\t\t\tthis._peaking.dispose();\n\t\t\tthis._peaking = null;\n\t\t\tthis._inputBoost.disconnect();\n\t\t\tthis._inputBoost = null;\n\t\t\tthis.gain = null;\n\t\t\tthis.Q = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.AutoWah;\n\t});\n\tToneModule( \n\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class Downsample incoming signal to a different bitdepth. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {number} bits 1-8. \n\t\t *  @example\n\t\t *  var crusher = new Tone.BitCrusher(4);\n\t\t */\n\t\tTone.BitCrusher = function(){\n\n\t\t\tvar options = this.optionsObject(arguments, [\"bits\"], Tone.BitCrusher.defaults);\n\t\t\tTone.Effect.call(this, options);\n\n\t\t\tvar invStepSize = 1 / Math.pow(2, options.bits - 1);\n\n\t\t\t/**\n\t\t\t *  Subtract the input signal and the modulus of the input signal\n\t\t\t *  @type {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._subtract = new Tone.Subtract();\n\n\t\t\t/**\n\t\t\t *  The mod function\n\t\t\t *  @type  {Tone.Modulo}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._modulo = new Tone.Modulo(invStepSize);\n\n\t\t\t/**\n\t\t\t *  keeps track of the bits\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._bits = options.bits;\n\n\t\t\t//connect it up\n\t\t\tthis.effectSend.fan(this._subtract, this._modulo);\n\t\t\tthis._modulo.connect(this._subtract, 0, 1);\n\t\t\tthis._subtract.connect(this.effectReturn);\n\t\t};\n\n\t\tTone.extend(Tone.BitCrusher, Tone.Effect);\n\n\t\t/**\n\t\t *  the default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.BitCrusher.defaults = {\n\t\t\t\"bits\" : 4\n\t\t};\n\n\t\t/**\n\t\t * The bit depth of the BitCrusher\n\t\t * @memberOf Tone.BitCrusher#\n\t\t * @type {number}\n\t\t * @name bits\n\t\t */\n\t\tObject.defineProperty(Tone.BitCrusher.prototype, \"bits\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._bits;\n\t\t\t},\n\t\t\tset : function(bits){\n\t\t\t\tthis._bits = bits;\n\t\t\t\tvar invStepSize = 1 / Math.pow(2, bits - 1);\n\t\t\t\tthis._modulo.value = invStepSize;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.BitCrusher} `this`\n\t\t */\n\t\tTone.BitCrusher.prototype.dispose = function(){\n\t\t\tTone.Effect.prototype.dispose.call(this);\n\t\t\tthis._subtract.dispose();\n\t\t\tthis._subtract = null;\n\t\t\tthis._modulo.dispose();\n\t\t\tthis._modulo = null;\n\t\t\treturn this;\n\t\t}; \n\n\t\treturn Tone.BitCrusher;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class A Chebyshev waveshaper. Good for making different types of distortion sounds.\n\t\t *         Note that odd orders sound very different from even ones. order = 1 is no change. \n\t\t *         http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php\n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {number} order The order of the chebyshev polynomial. Normal range between 1-100. \n\t\t *  @example\n\t\t *  var cheby = new Tone.Chebyshev(50);\n\t\t */\n\t\tTone.Chebyshev = function(){\n\n\t\t\tvar options = this.optionsObject(arguments, [\"order\"], Tone.Chebyshev.defaults);\n\t\t\tTone.Effect.call(this);\n\n\t\t\t/**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._shaper = new Tone.WaveShaper(4096);\n\n\t\t\t/**\n\t\t\t * holds onto the order of the filter\n\t\t\t * @type {number}\n\t\t\t * @private\n\t\t\t */\n\t\t\tthis._order = options.order;\n\n\t\t\tthis.connectEffect(this._shaper);\n\t\t\tthis.order = options.order;\n\t\t\tthis.oversample = options.oversample;\n\t\t};\n\n\t\tTone.extend(Tone.Chebyshev, Tone.Effect);\n\n\t\t/**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.Chebyshev.defaults = {\n\t\t\t\"order\" : 1,\n\t\t\t\"oversample\" : \"none\"\n\t\t};\n\t\t\n\t\t/**\n\t\t *  get the coefficient for that degree\n\t\t *  @param {number} x the x value\n\t\t *  @param   {number} degree \n\t\t *  @param {Object} memo memoize the computed value. \n\t\t *                       this speeds up computation greatly. \n\t\t *  @return  {number}       the coefficient \n\t\t *  @private\n\t\t */\n\t\tTone.Chebyshev.prototype._getCoefficient = function(x, degree, memo){\n\t\t\tif (memo.hasOwnProperty(degree)){\n\t\t\t\treturn memo[degree];\n\t\t\t} else if (degree === 0){\n\t\t\t\tmemo[degree] = 0;\n\t\t\t} else if (degree === 1){\n\t\t\t\tmemo[degree] = x;\n\t\t\t} else {\n\t\t\t\tmemo[degree] = 2 * x * this._getCoefficient(x, degree - 1, memo) - this._getCoefficient(x, degree - 2, memo);\n\t\t\t}\n\t\t\treturn memo[degree];\n\t\t};\n\n\t\t/**\n\t\t * The order of the Chebyshev polynomial i.e.\n\t\t * order = 2 -> 2x^2 + 1. order = 3 -> 4x^3 + 3x. \n\t\t * @memberOf Tone.Chebyshev#\n\t\t * @type {number}\n\t\t * @name order\n\t\t */\n\t\tObject.defineProperty(Tone.Chebyshev.prototype, \"order\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._order;\n\t\t\t},\n\t\t\tset : function(order){\n\t\t\t\tthis._order = order;\n\t\t\t\tvar curve = new Array(4096);\n\t\t\t\tvar len = curve.length;\n\t\t\t\tfor (var i = 0; i < len; ++i) {\n\t\t\t\t\tvar x = i * 2 / len - 1;\n\t\t\t\t\tif (x === 0){\n\t\t\t\t\t\t//should output 0 when input is 0\n\t\t\t\t\t\tcurve[i] = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcurve[i] = this._getCoefficient(x, order, {});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._shaper.curve = curve;\n\t\t\t} \n\t\t});\n\n\t\t/**\n\t\t * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n\t\t * @memberOf Tone.Chebyshev#\n\t\t * @type {string}\n\t\t * @name oversample\n\t\t */\n\t\tObject.defineProperty(Tone.Chebyshev.prototype, \"oversample\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._shaper.oversample;\n\t\t\t},\n\t\t\tset : function(oversampling){\n\t\t\t\tthis._shaper.oversample = oversampling;\n\t\t\t} \n\t\t});\n\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.Chebyshev} `this`\n\t\t */\n\t\tTone.Chebyshev.prototype.dispose = function(){\n\t\t\tTone.Effect.prototype.dispose.call(this);\n\t\t\tthis._shaper.dispose();\n\t\t\tthis._shaper = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.Chebyshev;\n\t});\n\tToneModule( \n\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class Creates an effect with an effectSendL/R and effectReturnL/R\n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.Effect}\n\t\t */\n\t\tTone.StereoEffect = function(){\n\n\t\t\tTone.call(this);\n\t\t\t//get the defaults\n\t\t\tvar options = this.optionsObject(arguments, [\"wet\"], Tone.Effect.defaults);\n\n\t\t\t/**\n\t\t\t *  the drywet knob to control the amount of effect\n\t\t\t *  @type {Tone.CrossFade}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._dryWet = new Tone.CrossFade(options.wet);\n\n\t\t\t/**\n\t\t\t *  The wet control, i.e. how much of the effected\n\t\t\t *  will pass through to the output. \n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.wet = this._dryWet.fade;\n\n\t\t\t/**\n\t\t\t *  then split it\n\t\t\t *  @type {Tone.Split}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._split = new Tone.Split();\n\n\t\t\t/**\n\t\t\t *  the effects send LEFT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis.effectSendL = this._split.left;\n\n\t\t\t/**\n\t\t\t *  the effects send RIGHT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis.effectSendR = this._split.right;\n\n\t\t\t/**\n\t\t\t *  the stereo effect merger\n\t\t\t *  @type {Tone.Merge}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._merge = new Tone.Merge();\n\n\t\t\t/**\n\t\t\t *  the effect return LEFT\n\t\t\t *  @type {GainNode}\n\t\t\t */\n\t\t\tthis.effectReturnL = this._merge.left;\n\n\t\t\t/**\n\t\t\t *  the effect return RIGHT\n\t\t\t *  @type {GainNode}\n\t\t\t */\n\t\t\tthis.effectReturnR = this._merge.right;\n\n\t\t\t//connections\n\t\t\tthis.input.connect(this._split);\n\t\t\t//dry wet connections\n\t\t\tthis.input.connect(this._dryWet, 0, 0);\n\t\t\tthis._merge.connect(this._dryWet, 0, 1);\n\t\t\tthis._dryWet.connect(this.output);\n\t\t};\n\n\t\tTone.extend(Tone.StereoEffect, Tone.Effect);\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.StereoEffect} `this`\n\t\t */\n\t\tTone.StereoEffect.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._dryWet.dispose();\n\t\t\tthis._dryWet = null;\n\t\t\tthis._split.dispose();\n\t\t\tthis._split = null;\n\t\t\tthis._merge.dispose();\n\t\t\tthis._merge = null;\n\t\t\tthis.effectSendL = null;\n\t\t\tthis.effectSendR = null;\n\t\t\tthis.effectReturnL = null;\n\t\t\tthis.effectReturnR = null;\n\t\t\tthis.wet = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.StereoEffect;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\t\t\n\t\t/**\n\t\t * \t@class  Feedback Effect (a sound loop between an audio source and its own output)\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {number|Object} [initialFeedback=0.125] the initial feedback value\n\t\t */\n\t\tTone.FeedbackEffect = function(){\n\n\t\t\tvar options = this.optionsObject(arguments, [\"feedback\"]);\n\t\t\toptions = this.defaultArg(options, Tone.FeedbackEffect.defaults);\n\n\t\t\tTone.Effect.call(this, options);\n\n\t\t\t/**\n\t\t\t *  controls the amount of feedback\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.feedback = new Tone.Signal(options.feedback, Tone.Signal.Units.Normal);\n\t\t\t\n\t\t\t/**\n\t\t\t *  the gain which controls the feedback\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._feedbackGain = this.context.createGain();\n\n\t\t\t//the feedback loop\n\t\t\tthis.effectReturn.chain(this._feedbackGain, this.effectSend);\n\t\t\tthis.feedback.connect(this._feedbackGain.gain);\n\t\t};\n\n\t\tTone.extend(Tone.FeedbackEffect, Tone.Effect);\n\n\t\t/**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.FeedbackEffect.defaults = {\n\t\t\t\"feedback\" : 0.125\n\t\t};\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.FeedbackEffect} `this`\n\t\t */\n\t\tTone.FeedbackEffect.prototype.dispose = function(){\n\t\t\tTone.Effect.prototype.dispose.call(this);\n\t\t\tthis.feedback.dispose();\n\t\t\tthis.feedback = null;\n\t\t\tthis._feedbackGain.disconnect();\n\t\t\tthis._feedbackGain = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.FeedbackEffect;\n\t});\n\n\tToneModule( \n\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class Just like a stereo feedback effect, but the feedback is routed from left to right\n\t\t *         and right to left instead of on the same channel.\n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.FeedbackEffect}\n\t\t */\n\t\tTone.StereoXFeedbackEffect = function(){\n\n\t\t\tvar options = this.optionsObject(arguments, [\"feedback\"], Tone.FeedbackEffect.defaults);\n\t\t\tTone.StereoEffect.call(this, options);\n\n\t\t\t/**\n\t\t\t *  controls the amount of feedback\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.feedback = new Tone.Signal(options.feedback);\n\n\t\t\t/**\n\t\t\t *  the left side feeback\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._feedbackLR = this.context.createGain();\n\n\t\t\t/**\n\t\t\t *  the right side feeback\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._feedbackRL = this.context.createGain();\n\n\t\t\t//connect it up\n\t\t\tthis.effectReturnL.chain(this._feedbackLR, this.effectSendR);\n\t\t\tthis.effectReturnR.chain(this._feedbackRL, this.effectSendL);\n\t\t\tthis.feedback.fan(this._feedbackLR.gain, this._feedbackRL.gain);\n\t\t};\n\n\t\tTone.extend(Tone.StereoXFeedbackEffect, Tone.FeedbackEffect);\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.StereoXFeedbackEffect} `this`\n\t\t */\n\t\tTone.StereoXFeedbackEffect.prototype.dispose = function(){\n\t\t\tTone.StereoEffect.prototype.dispose.call(this);\n\t\t\tthis.feedback.dispose();\n\t\t\tthis.feedback = null;\n\t\t\tthis._feedbackLR.disconnect();\n\t\t\tthis._feedbackLR = null;\n\t\t\tthis._feedbackRL.disconnect();\n\t\t\tthis._feedbackRL = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.StereoXFeedbackEffect;\n\t});\n\tToneModule( \n\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class A Chorus effect with feedback. inspiration from https://github.com/Dinahmoe/tuna/blob/master/tuna.js\n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.StereoXFeedbackEffect}\n\t\t *\t@param {number|Object} [frequency=2] the frequency of the effect\n\t\t *\t@param {number} [delayTime=3.5] the delay of the chorus effect in ms\n\t\t *\t@param {number} [depth=0.7] the depth of the chorus\n\t\t *\t@example\n\t\t * \tvar chorus = new Tone.Chorus(4, 2.5, 0.5);\n\t\t */\n\t\tTone.Chorus = function(){\n\n\t\t\tvar options = this.optionsObject(arguments, [\"frequency\", \"delayTime\", \"depth\"], Tone.Chorus.defaults);\n\t\t\tTone.StereoXFeedbackEffect.call(this, options);\n\n\t\t\t/**\n\t\t\t *  the depth of the chorus\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._depth = options.depth;\n\n\t\t\t/**\n\t\t\t *  the delayTime\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._delayTime = options.delayTime / 1000;\n\n\t\t\t/**\n\t\t\t *  the lfo which controls the delayTime\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._lfoL = new Tone.LFO(options.rate, 0, 1);\n\n\t\t\t/**\n\t\t\t *  another LFO for the right side with a 180 degree phase diff\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._lfoR = new Tone.LFO(options.rate, 0, 1);\n\t\t\tthis._lfoR.phase = 180;\n\n\t\t\t/**\n\t\t\t *  delay for left\n\t\t\t *  @type {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._delayNodeL = this.context.createDelay();\n\n\t\t\t/**\n\t\t\t *  delay for right\n\t\t\t *  @type {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._delayNodeR = this.context.createDelay();\n\n\t\t\t/**\n\t\t\t * The frequency the chorus will modulate at. \n\t\t\t * @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.frequency = this._lfoL.frequency;\n\n\t\t\t//connections\n\t\t\tthis.connectSeries(this.effectSendL, this._delayNodeL, this.effectReturnL);\n\t\t\tthis.connectSeries(this.effectSendR, this._delayNodeR, this.effectReturnR);\n\t\t\t//and pass through\n\t\t\tthis.effectSendL.connect(this.effectReturnL);\n\t\t\tthis.effectSendR.connect(this.effectReturnR);\n\t\t\t//lfo setup\n\t\t\tthis._lfoL.connect(this._delayNodeL.delayTime);\n\t\t\tthis._lfoR.connect(this._delayNodeR.delayTime);\n\t\t\t//start the lfo\n\t\t\tthis._lfoL.start();\n\t\t\tthis._lfoR.start();\n\t\t\t//have one LFO frequency control the other\n\t\t\tthis._lfoL.frequency.connect(this._lfoR.frequency);\n\t\t\t//set the initial values\n\t\t\tthis.depth = this._depth;\n\t\t\tthis.frequency.value = options.frequency;\n\t\t\tthis.type = options.type;\n\t\t};\n\n\t\tTone.extend(Tone.Chorus, Tone.StereoXFeedbackEffect);\n\n\t\t/**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.Chorus.defaults = {\n\t\t\t\"frequency\" : 1.5, \n\t\t\t\"delayTime\" : 3.5,\n\t\t\t\"depth\" : 0.7,\n\t\t\t\"feedback\" : 0.1,\n\t\t\t\"type\" : \"sine\"\n\t\t};\n\n\t\t/**\n\t\t * The depth of the effect. \n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {number}\n\t\t * @name depth\n\t\t */\n\t\tObject.defineProperty(Tone.Chorus.prototype, \"depth\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._depth;\n\t\t\t},\n\t\t\tset : function(depth){\n\t\t\t\tthis._depth = depth;\n\t\t\t\tvar deviation = this._delayTime * depth;\n\t\t\t\tthis._lfoL.min = this._delayTime - deviation;\n\t\t\t\tthis._lfoL.max = this._delayTime + deviation;\n\t\t\t\tthis._lfoR.min = this._delayTime - deviation;\n\t\t\t\tthis._lfoR.max = this._delayTime + deviation;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * The delayTime in milliseconds\n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {number}\n\t\t * @name delayTime\n\t\t */\n\t\tObject.defineProperty(Tone.Chorus.prototype, \"delayTime\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._delayTime * 1000;\n\t\t\t},\n\t\t\tset : function(delayTime){\n\t\t\t\tthis._delayTime = delayTime / 1000;\n\t\t\t\tthis.depth = this._depth;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * The lfo type for the chorus. \n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t\tObject.defineProperty(Tone.Chorus.prototype, \"type\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._lfoL.type;\n\t\t\t},\n\t\t\tset : function(type){\n\t\t\t\tthis._lfoL.type = type;\n\t\t\t\tthis._lfoR.type = type;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.Chorus} `this`\n\t\t */\n\t\tTone.Chorus.prototype.dispose = function(){\n\t\t\tTone.StereoXFeedbackEffect.prototype.dispose.call(this);\n\t\t\tthis._lfoL.dispose();\n\t\t\tthis._lfoL = null;\n\t\t\tthis._lfoR.dispose();\n\t\t\tthis._lfoR = null;\n\t\t\tthis._delayNodeL.disconnect();\n\t\t\tthis._delayNodeL = null;\n\t\t\tthis._delayNodeR.disconnect();\n\t\t\tthis._delayNodeR = null;\n\t\t\tthis.frequency = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.Chorus;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class  Convolver wrapper for reverb and emulation.\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {string|AudioBuffer=} url\n\t\t *  @example\n\t\t *  var convolver = new Tone.Convolver(\"./path/to/ir.wav\");\n\t\t */\n\t\tTone.Convolver = function(url){\n\n\t\t\tTone.Effect.apply(this, arguments);\n\n\t\t  \t/**\n\t\t\t *  convolver node\n\t\t\t *  @type {ConvolverNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._convolver = this.context.createConvolver();\n\n\t\t\t/**\n\t\t\t *  the convolution buffer\n\t\t\t *  @type {Tone.Buffer}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._buffer = new Tone.Buffer(url, function(buffer){\n\t\t\t\tthis.buffer = buffer;\n\t\t\t}.bind(this));\n\n\t\t\tthis.connectEffect(this._convolver);\n\t\t};\n\n\t\tTone.extend(Tone.Convolver, Tone.Effect);\n\n\t\t/**\n\t\t *  The convolver's buffer\n\t\t *  @memberOf Tone.Convolver#\n\t\t *  @type {AudioBuffer}\n\t\t *  @name buffer\n\t\t */\n\t\tObject.defineProperty(Tone.Convolver.prototype, \"buffer\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._buffer.get();\n\t\t\t},\n\t\t\tset : function(buffer){\n\t\t\t\tthis._buffer.set(buffer);\n\t\t\t\tthis._convolver.buffer = buffer;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t *  Load an impulse response url as an audio buffer.\n\t\t *  Decodes the audio asynchronously and invokes\n\t\t *  the callback once the audio buffer loads.\n\t\t *  @param {string} url the url of the buffer to load.\n\t\t *                      filetype support depends on the\n\t\t *                      browser.\n\t\t *  @param  {function=} callback\n\t\t *  @returns {Tone.Convolver} `this`\n\t\t */\n\t\tTone.Convolver.prototype.load = function(url, callback){\n\t\t\tthis._buffer.load(url, function(buff){\n\t\t\t\tthis.buffer = buff;\n\t\t\t\tif (callback){\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}.bind(this));\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  dispose and disconnect\n\t\t *  @returns {Tone.Convolver} `this`\n\t\t */\n\t\tTone.Convolver.prototype.dispose = function(){\n\t\t\tTone.Effect.prototype.dispose.call(this);\n\t\t\tthis._convolver.disconnect();\n\t\t\tthis._convolver = null;\n\t\t\tthis._buffer.dispose();\n\t\t\tthis._buffer = null;\n\t\t\treturn this;\n\t\t}; \n\n\t\treturn Tone.Convolver;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class A simple distortion effect using the waveshaper node\n\t\t *         algorithm from http://stackoverflow.com/a/22313408\n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {number} distortion the amount of distortion (nominal range of 0-1)\n\t\t *  @example\n\t\t *  var dist = new Tone.Distortion(0.8);\n\t\t */\n\t\tTone.Distortion = function(){\n\n\t\t\tvar options = this.optionsObject(arguments, [\"distortion\"], Tone.Distortion.defaults);\n\n\t\t\tTone.Effect.call(this);\n\n\t\t\t/**\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._shaper = new Tone.WaveShaper(4096);\n\n\t\t\t/**\n\t\t\t * holds the distortion amount\n\t\t\t * @type {number}\n\t\t\t * @private\n\t\t\t */\n\t\t\tthis._distortion = options.distortion;\n\n\t\t\tthis.connectEffect(this._shaper);\n\t\t\tthis.distortion = options.distortion;\n\t\t\tthis.oversample = options.oversample;\n\t\t};\n\n\t\tTone.extend(Tone.Distortion, Tone.Effect);\n\n\t\t/**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.Distortion.defaults = {\n\t\t\t\"distortion\" : 0.4,\n\t\t\t\"oversample\" : \"none\"\n\t\t};\n\n\t\t/**\n\t\t * The amount of distortion. Range between 0-1. \n\t\t * @memberOf Tone.Distortion#\n\t\t * @type {number}\n\t\t * @name distortion\n\t\t */\n\t\tObject.defineProperty(Tone.Distortion.prototype, \"distortion\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._distortion;\n\t\t\t},\n\t\t\tset : function(amount){\n\t\t\t\tthis._distortion = amount;\n\t\t\t\tvar k = amount * 100;\n\t\t\t\tvar deg = Math.PI / 180;\n\t\t\t\tthis._shaper.setMap(function(x){\n\t\t\t\t\tif (Math.abs(x) < 0.001){\n\t\t\t\t\t\t//should output 0 when input is 0\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn ( 3 + k ) * x * 20 * deg / ( Math.PI + k * Math.abs(x) );\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} \n\t\t});\n\n\t\t/**\n\t\t * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n\t\t * @memberOf Tone.Distortion#\n\t\t * @type {string}\n\t\t * @name oversample\n\t\t */\n\t\tObject.defineProperty(Tone.Distortion.prototype, \"oversample\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._shaper.oversample;\n\t\t\t},\n\t\t\tset : function(oversampling){\n\t\t\t\tthis._shaper.oversample = oversampling;\n\t\t\t} \n\t\t});\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.Distortion} `this`\n\t\t */\n\t\tTone.Distortion.prototype.dispose = function(){\n\t\t\tTone.Effect.prototype.dispose.call(this);\n\t\t\tthis._shaper.dispose();\n\t\t\tthis._shaper = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.Distortion;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\t\t\n\t\t/**\n\t\t *  @class  A feedback delay\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.FeedbackEffect}\n\t\t *  @param {Tone.Time} [delayTime=0.25] The delay time in seconds. \n\t\t *  @param {number=} feedback The amount of the effected signal which \n\t\t *                            is fed back through the delay.\n\t\t *  @example\n\t\t *  var feedbackDelay = new Tone.FeedbackDelay(\"8n\", 0.25);\n\t\t */\n\t\tTone.FeedbackDelay = function(){\n\t\t\t\n\t\t\tvar options = this.optionsObject(arguments, [\"delayTime\", \"feedback\"], Tone.FeedbackDelay.defaults);\n\t\t\tTone.FeedbackEffect.call(this, options);\n\n\t\t\t/**\n\t\t\t *  Tone.Signal to control the delay amount\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.delayTime = new Tone.Signal(options.delayTime, Tone.Signal.Units.Time);\n\n\t\t\t/**\n\t\t\t *  the delay node\n\t\t\t *  @type {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._delayNode = this.context.createDelay(4);\n\n\t\t\t// connect it up\n\t\t\tthis.connectEffect(this._delayNode);\n\t\t\tthis.delayTime.connect(this._delayNode.delayTime);\n\t\t};\n\n\t\tTone.extend(Tone.FeedbackDelay, Tone.FeedbackEffect);\n\n\t\t/**\n\t\t *  The default values. \n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.FeedbackDelay.defaults = {\n\t\t\t\"delayTime\" : 0.25,\n\t\t};\n\t\t\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.FeedbackDelay} `this`\n\t\t */\n\t\tTone.FeedbackDelay.prototype.dispose = function(){\n\t\t\tTone.FeedbackEffect.prototype.dispose.call(this);\n\t\t\tthis.delayTime.dispose();\n\t\t\tthis._delayNode.disconnect();\n\t\t\tthis._delayNode = null;\n\t\t\tthis.delayTime = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.FeedbackDelay;\n\t});\n\tToneModule( \n\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  an array of comb filter delay values from Freeverb implementation\n\t\t *  @static\n\t\t *  @private\n\t\t *  @type {Array}\n\t\t */\n\t\tvar combFilterTunings = [1557 / 44100, 1617 / 44100, 1491 / 44100, 1422 / 44100, 1277 / 44100, 1356 / 44100, 1188 / 44100, 1116 / 44100];\n\n\t\t/**\n\t\t *  an array of allpass filter frequency values from Freeverb implementation\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t\tvar allpassFilterFrequencies = [225, 556, 441, 341];\n\n\t\t/**\n\t\t *  @class Reverb based on the Freeverb\n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {number} [roomSize=0.7] correlated to the decay time. \n\t\t *                                 value between (0,1)\n\t\t *  @param {number} [dampening=0.5] filtering which is applied to the reverb. \n\t\t *                                  value between [0,1]\n\t\t *  @example\n\t\t *  var freeverb = new Tone.Freeverb(0.4, 0.2);\n\t\t */\n\t\tTone.Freeverb = function(){\n\n\t\t\tvar options = this.optionsObject(arguments, [\"roomSize\", \"dampening\"], Tone.Freeverb.defaults);\n\t\t\tTone.StereoEffect.call(this, options);\n\n\t\t\t/**\n\t\t\t *  the roomSize value between (0,1)\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.roomSize = new Tone.Signal(options.roomSize);\n\n\t\t\t/**\n\t\t\t *  the amount of dampening\n\t\t\t *  value between [0,1]\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.dampening = new Tone.Signal(options.dampening);\n\n\t\t\t/**\n\t\t\t *  scale the dampening\n\t\t\t *  @type {Tone.ScaleExp}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._dampeningScale = new Tone.ScaleExp(100, 8000, 0.5);\n\n\t\t\t/**\n\t\t\t *  the comb filters\n\t\t\t *  @type {Array.<Tone.LowpassCombFilter>}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._combFilters = [];\n\n\t\t\t/**\n\t\t\t *  the allpass filters on the left\n\t\t\t *  @type {Array.<BiqaudFilterNode>}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._allpassFiltersL = [];\n\n\t\t\t/**\n\t\t\t *  the allpass filters on the right\n\t\t\t *  @type {Array.<BiqaudFilterNode>}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._allpassFiltersR = [];\n\n\t\t\t//make the allpass filters on teh right\n\t\t\tfor (var l = 0; l < allpassFilterFrequencies.length; l++){\n\t\t\t\tvar allpassL = this.context.createBiquadFilter();\n\t\t\t\tallpassL.type = \"allpass\";\n\t\t\t\tallpassL.frequency.value = allpassFilterFrequencies[l];\n\t\t\t\tthis._allpassFiltersL.push(allpassL);\n\t\t\t}\n\n\t\t\t//make the allpass filters on the left\n\t\t\tfor (var r = 0; r < allpassFilterFrequencies.length; r++){\n\t\t\t\tvar allpassR = this.context.createBiquadFilter();\n\t\t\t\tallpassR.type = \"allpass\";\n\t\t\t\tallpassR.frequency.value = allpassFilterFrequencies[r];\n\t\t\t\tthis._allpassFiltersR.push(allpassR);\n\t\t\t}\n\n\t\t\t//make the comb filters\n\t\t\tfor (var c = 0; c < combFilterTunings.length; c++){\n\t\t\t\tvar lfpf = new Tone.LowpassCombFilter(combFilterTunings[c]);\n\t\t\t\tif (c < combFilterTunings.length / 2){\n\t\t\t\t\tthis.effectSendL.chain(lfpf, this._allpassFiltersL[0]);\n\t\t\t\t} else {\n\t\t\t\t\tthis.effectSendR.chain(lfpf, this._allpassFiltersR[0]);\n\t\t\t\t}\n\t\t\t\tthis.roomSize.connect(lfpf.resonance);\n\t\t\t\tthis._dampeningScale.connect(lfpf.dampening);\n\t\t\t\tthis._combFilters.push(lfpf);\n\t\t\t}\n\n\t\t\t//chain the allpass filters togetehr\n\t\t\tthis.connectSeries.apply(this, this._allpassFiltersL);\n\t\t\tthis.connectSeries.apply(this, this._allpassFiltersR);\n\t\t\tthis._allpassFiltersL[this._allpassFiltersL.length - 1].connect(this.effectReturnL);\n\t\t\tthis._allpassFiltersR[this._allpassFiltersR.length - 1].connect(this.effectReturnR);\n\t\t\tthis.dampening.connect(this._dampeningScale);\n\t\t};\n\n\t\tTone.extend(Tone.Freeverb, Tone.StereoEffect);\n\n\t\t/**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.Freeverb.defaults = {\n\t\t\t\"roomSize\" : 0.7, \n\t\t\t\"dampening\" : 0.5\n\t\t};\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.Freeverb} `this`\n\t\t */\n\t\tTone.Freeverb.prototype.dispose = function(){\n\t\t\tTone.StereoEffect.prototype.dispose.call(this);\n\t\t\tfor (var al = 0; al < this._allpassFiltersL.length; al++) {\n\t\t\t\tthis._allpassFiltersL[al].disconnect();\n\t\t\t\tthis._allpassFiltersL[al] = null;\n\t\t\t}\n\t\t\tthis._allpassFiltersL = null;\n\t\t\tfor (var ar = 0; ar < this._allpassFiltersR.length; ar++) {\n\t\t\t\tthis._allpassFiltersR[ar].disconnect();\n\t\t\t\tthis._allpassFiltersR[ar] = null;\n\t\t\t}\n\t\t\tthis._allpassFiltersR = null;\n\t\t\tfor (var cf = 0; cf < this._combFilters.length; cf++) {\n\t\t\t\tthis._combFilters[cf].dispose();\n\t\t\t\tthis._combFilters[cf] = null;\n\t\t\t}\n\t\t\tthis._combFilters = null;\n\t\t\tthis.roomSize.dispose();\n\t\t\tthis.dampening.dispose();\n\t\t\tthis._dampeningScale.dispose();\n\t\t\tthis.roomSize = null;\n\t\t\tthis.dampening = null;\n\t\t\tthis._dampeningScale = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.Freeverb;\n\t});\n\tToneModule( \n\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  an array of the comb filter delay time values\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t\tvar combFilterDelayTimes = [1687 / 25000, 1601 / 25000, 2053 / 25000, 2251 / 25000];\n\n\t\t/**\n\t\t *  the resonances of each of the comb filters\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t\tvar combFilterResonances = [0.773, 0.802, 0.753, 0.733];\n\n\t\t/**\n\t\t *  the allpass filter frequencies\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t\tvar allpassFilterFreqs = [347, 113, 37];\n\n\t\t/**\n\t\t *  @class a simple Schroeder Reverberators tuned by John Chowning in 1970\n\t\t *         made up of 3 allpass filters and 4 feedback comb filters. \n\t\t *         https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html\n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {number} roomSize Coorelates to the decay time. Value between 0,1\n\t\t *  @example\n\t\t *  var freeverb = new Tone.Freeverb(0.4);\n\t\t */\n\t\tTone.JCReverb = function(){\n\n\t\t\tvar options = this.optionsObject(arguments, [\"roomSize\"], Tone.JCReverb.defaults);\n\t\t\tTone.StereoEffect.call(this, options);\n\n\t\t\t/**\n\t\t\t *  room size control values between [0,1]\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.roomSize = new Tone.Signal(options.roomSize, Tone.Signal.Units.Normal);\n\n\t\t\t/**\n\t\t\t *  scale the room size\n\t\t\t *  @type {Tone.Scale}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._scaleRoomSize = new Tone.Scale(-0.733, 0.197);\n\n\t\t\t/**\n\t\t\t *  a series of allpass filters\n\t\t\t *  @type {Array.<BiquadFilterNode>}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._allpassFilters = [];\n\n\t\t\t/**\n\t\t\t *  parallel feedback comb filters\n\t\t\t *  @type {Array.<Tone.FeedbackCombFilter>}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._feedbackCombFilters = [];\n\n\t\t\t//make the allpass filters\n\t\t\tfor (var af = 0; af < allpassFilterFreqs.length; af++) {\n\t\t\t\tvar allpass = this.context.createBiquadFilter();\n\t\t\t\tallpass.type = \"allpass\";\n\t\t\t\tallpass.frequency.value = allpassFilterFreqs[af];\n\t\t\t\tthis._allpassFilters.push(allpass);\n\t\t\t}\n\n\t\t\t//and the comb filters\n\t\t\tfor (var cf = 0; cf < combFilterDelayTimes.length; cf++) {\n\t\t\t\tvar fbcf = new Tone.FeedbackCombFilter(combFilterDelayTimes[cf], 0.1);\n\t\t\t\tthis._scaleRoomSize.connect(fbcf.resonance);\n\t\t\t\tfbcf.resonance.value = combFilterResonances[cf];\n\t\t\t\tthis._allpassFilters[this._allpassFilters.length - 1].connect(fbcf);\n\t\t\t\tif (cf < combFilterDelayTimes.length / 2){\n\t\t\t\t\tfbcf.connect(this.effectReturnL);\n\t\t\t\t} else {\n\t\t\t\t\tfbcf.connect(this.effectReturnR);\n\t\t\t\t}\n\t\t\t\tthis._feedbackCombFilters.push(fbcf);\n\t\t\t}\n\n\t\t\t//chain the allpass filters together\n\t\t\tthis.roomSize.connect(this._scaleRoomSize);\n\t\t\tthis.connectSeries.apply(this, this._allpassFilters);\n\t\t\tthis.effectSendL.connect(this._allpassFilters[0]);\n\t\t\tthis.effectSendR.connect(this._allpassFilters[0]);\n\t\t};\n\n\t\tTone.extend(Tone.JCReverb, Tone.StereoEffect);\n\n\t\t/**\n\t\t *  the default values\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.JCReverb.defaults = {\n\t\t\t\"roomSize\" : 0.5\n\t\t};\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.JCReverb} `this`\n\t\t */\n\t\tTone.JCReverb.prototype.dispose = function(){\n\t\t\tTone.StereoEffect.prototype.dispose.call(this);\n\t\t\tfor (var apf = 0; apf < this._allpassFilters.length; apf++) {\n\t\t\t\tthis._allpassFilters[apf].disconnect();\n\t\t\t\tthis._allpassFilters[apf] = null;\n\t\t\t}\n\t\t\tthis._allpassFilters = null;\n\t\t\tfor (var fbcf = 0; fbcf < this._feedbackCombFilters.length; fbcf++) {\n\t\t\t\tthis._feedbackCombFilters[fbcf].dispose();\n\t\t\t\tthis._feedbackCombFilters[fbcf] = null;\n\t\t\t}\n\t\t\tthis._feedbackCombFilters = null;\n\t\t\tthis.roomSize.dispose();\n\t\t\tthis.roomSize = null;\n\t\t\tthis._scaleRoomSize.dispose();\n\t\t\tthis._scaleRoomSize = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.JCReverb;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class Applies a Mid/Side seperation and recombination\n\t\t *         http://musicdsp.org/showArchiveComment.php?ArchiveID=173\n\t\t *         http://www.kvraudio.com/forum/viewtopic.php?t=212587\n\t\t *         M = (L+R)/sqrt(2);   // obtain mid-signal from left and right\n\t\t *         S = (L-R)/sqrt(2);   // obtain side-signal from left and righ\n\t\t *         // amplify mid and side signal seperately:\n\t\t *         M/S send/return\n\t\t *         L = (M+S)/sqrt(2);   // obtain left signal from mid and side\n\t\t *         R = (M-S)/sqrt(2);   // obtain right signal from mid and side\n\t\t *\n\t\t *  @extends {Tone.StereoEffect}\n\t\t *  @constructor\n\t\t */\n\t\tTone.MidSideEffect = function(){\n\t\t\tTone.StereoEffect.call(this);\n\n\t\t\t/**\n\t\t\t *  a constant signal equal to 1 / sqrt(2)\n\t\t\t *  @type {Tone.Signal}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._sqrtTwo = new Tone.Signal(1 / Math.sqrt(2));\n\n\t\t\t/**\n\t\t\t *  the mid send.\n\t\t\t *  connect to mid processing\n\t\t\t *  @type {Tone.Expr}\n\t\t\t */\n\t\t\tthis.midSend = new Tone.Expr(\"($0 + $1) * $2\");\n\n\t\t\t/**\n\t\t\t *  the side send.\n\t\t\t *  connect to side processing\n\t\t\t *  @type {Tone.Expr}\n\t\t\t */\n\t\t\tthis.sideSend = new Tone.Expr(\"($0 - $1) * $2\");\n\n\t\t\t/**\n\t\t\t *  recombine the mid/side into Left\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._left = new Tone.Expr(\"($0 + $1) * $2\");\n\n\t\t\t/**\n\t\t\t *  recombine the mid/side into Right\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._right = new Tone.Expr(\"($0 - $1) * $2\");\n\n\t\t\t/**\n\t\t\t *  the mid return connection\n\t\t\t *  @type {GainNode}\n\t\t\t */\n\t\t\tthis.midReturn = this.context.createGain();\n\n\t\t\t/**\n\t\t\t *  the side return connection\n\t\t\t *  @type {GainNode}\n\t\t\t */\n\t\t\tthis.sideReturn = this.context.createGain();\n\n\t\t\t//connections\n\t\t\tthis.effectSendL.connect(this.midSend, 0, 0);\n\t\t\tthis.effectSendR.connect(this.midSend, 0, 1);\n\t\t\tthis.effectSendL.connect(this.sideSend, 0, 0);\n\t\t\tthis.effectSendR.connect(this.sideSend, 0, 1);\n\t\t\tthis._left.connect(this.effectReturnL);\n\t\t\tthis._right.connect(this.effectReturnR);\n\t\t\tthis.midReturn.connect(this._left, 0, 0);\n\t\t\tthis.sideReturn.connect(this._left, 0, 1);\n\t\t\tthis.midReturn.connect(this._right, 0, 0);\n\t\t\tthis.sideReturn.connect(this._right, 0, 1);\n\t\t\tthis._sqrtTwo.connect(this.midSend, 0, 2);\n\t\t\tthis._sqrtTwo.connect(this.sideSend, 0, 2);\n\t\t\tthis._sqrtTwo.connect(this._left, 0, 2);\n\t\t\tthis._sqrtTwo.connect(this._right, 0, 2);\n\t\t};\n\n\t\tTone.extend(Tone.MidSideEffect, Tone.StereoEffect);\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.MidSideEffect} `this`\n\t\t */\n\t\tTone.MidSideEffect.prototype.dispose = function(){\n\t\t\tTone.StereoEffect.prototype.dispose.call(this);\n\t\t\tthis._sqrtTwo.dispose();\n\t\t\tthis._sqrtTwo = null;\n\t\t\tthis.midSend.dispose();\n\t\t\tthis.midSend = null;\n\t\t\tthis.sideSend.dispose();\n\t\t\tthis.sideSend = null;\n\t\t\tthis._left.dispose();\n\t\t\tthis._left = null;\n\t\t\tthis._right.dispose();\n\t\t\tthis._right = null;\n\t\t\tthis.midReturn.disconnect();\n\t\t\tthis.midReturn = null;\n\t\t\tthis.sideReturn.disconnect();\n\t\t\tthis.sideReturn = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.MidSideEffect;\n\t});\n\tToneModule( \n\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class A Phaser effect. inspiration from https://github.com/Dinahmoe/tuna/\n\t\t *\n\t\t *\t@extends {Tone.StereoEffect}\n\t\t *\t@constructor\n\t\t *\t@param {number|Object} [frequency=0.5] the speed of the phasing\n\t\t *\t@param {number} [depth=10] the depth of the effect\n\t\t *\t@param {number} [baseFrequency=400] the base frequency of the filters\n\t\t *\t@example\n\t\t * \tvar phaser = new Tone.Phaser(0.4, 12, 550);\n\t\t */\n\t\tTone.Phaser = function(){\n\n\t\t\t//set the defaults\n\t\t\tvar options = this.optionsObject(arguments, [\"frequency\", \"depth\", \"baseFrequency\"], Tone.Phaser.defaults);\n\t\t\tTone.StereoEffect.call(this, options);\n\n\t\t\t/**\n\t\t\t *  the lfo which controls the frequency on the left side\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._lfoL = new Tone.LFO(options.frequency, 0, 1);\n\n\t\t\t/**\n\t\t\t *  the lfo which controls the frequency on the right side\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._lfoR = new Tone.LFO(options.frequency, 0, 1);\n\t\t\tthis._lfoR.phase = 180;\n\n\t\t\t/**\n\t\t\t *  the base modulation frequency\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._baseFrequency = options.baseFrequency;\n\n\t\t\t/**\n\t\t\t *  the depth of the phasing\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._depth = options.depth;\n\t\t\t\n\t\t\t/**\n\t\t\t *  the array of filters for the left side\n\t\t\t *  @type {Array.<Tone.Filter>}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._filtersL = this._makeFilters(options.stages, this._lfoL, options.Q);\n\n\t\t\t/**\n\t\t\t *  the array of filters for the left side\n\t\t\t *  @type {Array.<Tone.Filter>}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._filtersR = this._makeFilters(options.stages, this._lfoR, options.Q);\n\n\t\t\t/**\n\t\t\t * the frequency of the effect\n\t\t\t * @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.frequency = this._lfoL.frequency;\n\t\t\tthis.frequency.value = options.frequency;\n\t\t\t\n\t\t\t//connect them up\n\t\t\tthis.effectSendL.connect(this._filtersL[0]);\n\t\t\tthis.effectSendR.connect(this._filtersR[0]);\n\t\t\tthis._filtersL[options.stages - 1].connect(this.effectReturnL);\n\t\t\tthis._filtersR[options.stages - 1].connect(this.effectReturnR);\n\t\t\tthis.effectSendL.connect(this.effectReturnL);\n\t\t\tthis.effectSendR.connect(this.effectReturnR);\n\t\t\t//control the frequency with one LFO\n\t\t\tthis._lfoL.frequency.connect(this._lfoR.frequency);\n\t\t\t//set the options\n\t\t\tthis.baseFrequency = options.baseFrequency;\n\t\t\tthis.depth = options.depth;\n\t\t\t//start the lfo\n\t\t\tthis._lfoL.start();\n\t\t\tthis._lfoR.start();\n\t\t};\n\n\t\tTone.extend(Tone.Phaser, Tone.StereoEffect);\n\n\t\t/**\n\t\t *  defaults\n\t\t *  @static\n\t\t *  @type {object}\n\t\t */\n\t\tTone.Phaser.defaults = {\n\t\t\t\"frequency\" : 0.5,\n\t\t\t\"depth\" : 10,\n\t\t\t\"stages\" : 4,\n\t\t\t\"Q\" : 100,\n\t\t\t\"baseFrequency\" : 400,\n\t\t};\n\n\t\t/**\n\t\t *  @param {number} stages\n\t\t *  @returns {Array} the number of filters all connected together\n\t\t *  @private\n\t\t */\n\t\tTone.Phaser.prototype._makeFilters = function(stages, connectToFreq, Q){\n\t\t\tvar filters = new Array(stages);\n\t\t\t//make all the filters\n\t\t\tfor (var i = 0; i < stages; i++){\n\t\t\t\tvar filter = this.context.createBiquadFilter();\n\t\t\t\tfilter.type = \"allpass\";\n\t\t\t\tfilter.Q.value = Q;\n\t\t\t\tconnectToFreq.connect(filter.frequency);\n\t\t\t\tfilters[i] = filter;\n\t\t\t}\n\t\t\tthis.connectSeries.apply(this, filters);\n\t\t\treturn filters;\n\t\t};\n\n\t\t/**\n\t\t * The depth of the effect. \n\t\t * @memberOf Tone.Phaser#\n\t\t * @type {number}\n\t\t * @name depth\n\t\t */\n\t\tObject.defineProperty(Tone.Phaser.prototype, \"depth\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._depth;\n\t\t\t},\n\t\t\tset : function(depth){\n\t\t\t\tthis._depth = depth;\n\t\t\t\tvar max = this._baseFrequency + this._baseFrequency * depth;\n\t\t\t\tthis._lfoL.max = max;\n\t\t\t\tthis._lfoR.max = max;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * The the base frequency of the filters. \n\t\t * @memberOf Tone.Phaser#\n\t\t * @type {string}\n\t\t * @name baseFrequency\n\t\t */\n\t\tObject.defineProperty(Tone.Phaser.prototype, \"baseFrequency\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._baseFrequency;\n\t\t\t},\n\t\t\tset : function(freq){\n\t\t\t\tthis._baseFrequency = freq;\t\n\t\t\t\tthis._lfoL.min = freq;\n\t\t\t\tthis._lfoR.min = freq;\n\t\t\t\tthis.depth = this._depth;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.Phaser} `this`\n\t\t */\n\t\tTone.Phaser.prototype.dispose = function(){\n\t\t\tTone.StereoEffect.prototype.dispose.call(this);\n\t\t\tthis._lfoL.dispose();\n\t\t\tthis._lfoL = null;\n\t\t\tthis._lfoR.dispose();\n\t\t\tthis._lfoR = null;\n\t\t\tfor (var i = 0; i < this._filtersL.length; i++){\n\t\t\t\tthis._filtersL[i].disconnect();\n\t\t\t\tthis._filtersL[i] = null;\n\t\t\t}\n\t\t\tthis._filtersL = null;\n\t\t\tfor (var j = 0; j < this._filtersR.length; j++){\n\t\t\t\tthis._filtersR[j].disconnect();\n\t\t\t\tthis._filtersR[j] = null;\n\t\t\t}\n\t\t\tthis._filtersR = null;\n\t\t\tthis.frequency = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.Phaser;\n\t});\n\tToneModule( \n\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class  PingPongDelay is a dual delay effect where the echo is heard\n\t\t *          first in one channel and next in the opposite channel\n\t\t *\n\t\t * \t@constructor\n\t\t * \t@extends {Tone.StereoXFeedbackEffect}\n\t\t *  @param {Tone.Time|Object} [delayTime=0.25] is the interval between consecutive echos\n\t\t *  @param {number=} feedback The amount of the effected signal which \n\t\t *                            is fed back through the delay.\n\t\t *  @example\n\t\t *  var pingPong = new Tone.PingPongDelay(\"4n\", 0.2);\n\t\t */\n\t\tTone.PingPongDelay = function(){\n\t\t\t\n\t\t\tvar options = this.optionsObject(arguments, [\"delayTime\", \"feedback\"], Tone.PingPongDelay.defaults);\n\t\t\tTone.StereoXFeedbackEffect.call(this, options);\n\n\t\t\t/**\n\t\t\t *  the delay node on the left side\n\t\t\t *  @type {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._leftDelay = this.context.createDelay(options.maxDelayTime);\n\n\t\t\t/**\n\t\t\t *  the delay node on the right side\n\t\t\t *  @type {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._rightDelay = this.context.createDelay(options.maxDelayTime);\n\n\t\t\t/**\n\t\t\t *  the predelay on the right side\n\t\t\t *  @type {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._rightPreDelay = this.context.createDelay(options.maxDelayTime);\n\n\t\t\t/**\n\t\t\t *  the delay time signal\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.delayTime = new Tone.Signal(options.delayTime, Tone.Signal.Units.Time);\n\n\t\t\t//connect it up\n\t\t\tthis.effectSendL.chain(this._leftDelay, this.effectReturnL);\n\t\t\tthis.effectSendR.chain(this._rightPreDelay, this._rightDelay, this.effectReturnR);\n\t\t\tthis.delayTime.fan(this._leftDelay.delayTime, this._rightDelay.delayTime, this._rightPreDelay.delayTime);\n\t\t\t//rearranged the feedback to be after the rightPreDelay\n\t\t\tthis._feedbackLR.disconnect();\n\t\t\tthis._feedbackLR.connect(this._rightDelay);\n\t\t};\n\n\t\tTone.extend(Tone.PingPongDelay, Tone.StereoXFeedbackEffect);\n\n\t\t/**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.PingPongDelay.defaults = {\n\t\t\t\"delayTime\" : 0.25,\n\t\t\t\"maxDelayTime\" : 1\n\t\t};\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.PingPongDelay} `this`\n\t\t */\n\t\tTone.PingPongDelay.prototype.dispose = function(){\n\t\t\tTone.StereoXFeedbackEffect.prototype.dispose.call(this);\n\t\t\tthis._leftDelay.disconnect();\n\t\t\tthis._leftDelay = null;\n\t\t\tthis._rightDelay.disconnect();\n\t\t\tthis._rightDelay = null;\n\t\t\tthis._rightPreDelay.disconnect();\n\t\t\tthis._rightPreDelay = null;\n\t\t\tthis.delayTime.dispose();\n\t\t\tthis.delayTime = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.PingPongDelay;\n\t});\n\tToneModule( \n\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class A stereo feedback effect where the feedback is on the same channel\n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.FeedbackEffect}\n\t\t */\n\t\tTone.StereoFeedbackEffect = function(){\n\n\t\t\tvar options = this.optionsObject(arguments, [\"feedback\"], Tone.FeedbackEffect.defaults);\n\t\t\tTone.StereoEffect.call(this, options);\n\n\t\t\t/**\n\t\t\t *  controls the amount of feedback\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.feedback = new Tone.Signal(options.feedback);\n\n\t\t\t/**\n\t\t\t *  the left side feeback\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._feedbackL = this.context.createGain();\n\n\t\t\t/**\n\t\t\t *  the right side feeback\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._feedbackR = this.context.createGain();\n\n\t\t\t//connect it up\n\t\t\tthis.effectReturnL.chain(this._feedbackL, this.effectSendL);\n\t\t\tthis.effectReturnR.chain(this._feedbackR, this.effectSendR);\n\t\t\tthis.feedback.fan(this._feedbackL.gain, this._feedbackR.gain);\n\t\t};\n\n\t\tTone.extend(Tone.StereoFeedbackEffect, Tone.FeedbackEffect);\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.StereoFeedbackEffect} `this`\n\t\t */\n\t\tTone.StereoFeedbackEffect.prototype.dispose = function(){\n\t\t\tTone.StereoEffect.prototype.dispose.call(this);\n\t\t\tthis.feedback.dispose();\n\t\t\tthis.feedback = null;\n\t\t\tthis._feedbackL.disconnect();\n\t\t\tthis._feedbackL = null;\n\t\t\tthis._feedbackR.disconnect();\n\t\t\tthis._feedbackR = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.StereoFeedbackEffect;\n\t});\n\tToneModule( \n\t\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class Applies a width factor (0-1) to the mid/side seperation. \n\t\t *         0 is all mid and 1 is all side. <br><br>\n\t\t *         http://musicdsp.org/showArchiveComment.php?ArchiveID=173<br><br>\n\t\t *         http://www.kvraudio.com/forum/viewtopic.php?t=212587<br><br>\n\t\t *         M *= 2*(1-width)<br><br>\n\t\t *         S *= 2*width<br><br>\n\t\t *\n\t\t *  @extends {Tone.MidSideEffect}\n\t\t *  @constructor\n\t\t *  @param {number|Object} [width=0.5] the stereo width. A width of 0 is mono and 1 is stereo. 0.5 is no change.\n\t\t */\n\t\tTone.StereoWidener = function(){\n\n\t\t\tvar options = this.optionsObject(arguments, [\"width\"], Tone.StereoWidener.defaults);\n\t\t\tTone.MidSideEffect.call(this, options);\n\n\t\t\t/**\n\t\t\t *  The width control. 0 = 100% mid. 1 = 100% side. \n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.width = new Tone.Signal(0.5, Tone.Signal.Units.Normal);\n\n\t\t\t/**\n\t\t\t *  Mid multiplier\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._midMult = new Tone.Expr(\"$0 * ($1 * (1 - $2))\");\n\n\t\t\t/**\n\t\t\t *  Side multiplier\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._sideMult = new Tone.Expr(\"$0 * ($1 * $2)\");\n\n\t\t\t/**\n\t\t\t *  constant output of 2\n\t\t\t *  @type {Tone}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._two = new Tone.Signal(2);\n\n\t\t\t//the mid chain\n\t\t\tthis._two.connect(this._midMult, 0, 1);\n\t\t\tthis.width.connect(this._midMult, 0, 2);\n\t\t\t//the side chain\n\t\t\tthis._two.connect(this._sideMult, 0, 1);\n\t\t\tthis.width.connect(this._sideMult, 0, 2);\n\t\t\t//connect it to the effect send/return\n\t\t\tthis.midSend.chain(this._midMult, this.midReturn);\n\t\t\tthis.sideSend.chain(this._sideMult, this.sideReturn);\n\t\t};\n\n\t\tTone.extend(Tone.StereoWidener, Tone.MidSideEffect);\n\n\t\t/**\n\t\t *  the default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.StereoWidener.defaults = {\n\t\t\t\"width\" : 0.5\n\t\t};\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.StereoWidener} `this`\n\t\t */\n\t\tTone.StereoWidener.prototype.dispose = function(){\n\t\t\tTone.MidSideEffect.prototype.dispose.call(this);\n\t\t\tthis.width.dispose();\n\t\t\tthis.width = null;\n\t\t\tthis._midMult.dispose();\n\t\t\tthis._midMult = null;\n\t\t\tthis._sideMult.dispose();\n\t\t\tthis._sideMult = null;\n\t\t\tthis._two.dispose();\n\t\t\tthis._two = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.StereoWidener;\n\t});\n\tToneModule(\n\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class Pulse Oscillator with control over width\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @param {number} [frequency=440] the frequency of the oscillator\n\t\t *  @param {number} [width = 0.2] the width of the pulse\n\t\t *  @example\n\t\t *  var pulse = new Tone.PulseOscillator(\"E5\", 0.4);\n\t\t */\n\t\tTone.PulseOscillator = function(){\n\n\t\t\tvar options = this.optionsObject(arguments, [\"frequency\", \"width\"], Tone.Oscillator.defaults);\n\t\t\tTone.Source.call(this, options);\n\n\t\t\t/**\n\t\t\t *  the width of the pulse\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.width = new Tone.Signal(options.width, Tone.Signal.Units.Normal);\n\n\t\t\t/**\n\t\t\t *  gate the width amount\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._widthGate = this.context.createGain();\n\n\t\t\t/**\n\t\t\t *  the sawtooth oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._sawtooth = new Tone.Oscillator({\n\t\t\t\tfrequency : options.frequency,\n\t\t\t\tdetune : options.detune,\n\t\t\t\ttype : \"sawtooth\",\n\t\t\t\tphase : options.phase\n\t\t\t});\n\n\t\t\t/**\n\t\t\t *  The frequency in hertz\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.frequency = this._sawtooth.frequency;\n\n\t\t\t/**\n\t\t\t *  The detune in cents. \n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.detune = this._sawtooth.detune;\n\n\t\t\t/**\n\t\t\t *  Threshold the signal to turn it into a square\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._thresh = new Tone.WaveShaper(function(val){\n\t\t\t\tif (val < 0){\n\t\t\t\t\treturn -1;\n\t\t\t\t} else {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t//connections\n\t\t\tthis._sawtooth.chain(this._thresh, this.output);\n\t\t\tthis.width.chain(this._widthGate, this._thresh);\n\t\t};\n\n\t\tTone.extend(Tone.PulseOscillator, Tone.Oscillator);\n\n\t\t/**\n\t\t *  The default parameters.\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.PulseOscillator.defaults = {\n\t\t\t\"frequency\" : 440,\n\t\t\t\"detune\" : 0,\n\t\t\t\"phase\" : 0,\n\t\t\t\"width\" : 0.2,\n\t\t};\n\n\t\t/**\n\t\t *  start the oscillator\n\t\t *  @param  {Tone.Time} time \n\t\t *  @private\n\t\t */\n\t\tTone.PulseOscillator.prototype._start = function(time){\n\t\t\ttime = this.toSeconds(time);\n\t\t\tthis._sawtooth.start(time);\n\t\t\tthis._widthGate.gain.setValueAtTime(1, time);\n\t\t};\n\n\t\t/**\n\t\t *  stop the oscillator\n\t\t *  @param  {Tone.Time} time \n\t\t *  @private\n\t\t */\n\t\tTone.PulseOscillator.prototype._stop = function(time){\n\t\t\ttime = this.toSeconds(time);\n\t\t\tthis._sawtooth.stop(time);\n\t\t\t//the width is still connected to the output. \n\t\t\t//that needs to be stopped also\n\t\t\tthis._widthGate.gain.setValueAtTime(0, time);\n\t\t};\n\n\t\t/**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.PulseOscillator#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t\tObject.defineProperty(Tone.PulseOscillator.prototype, \"phase\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._sawtooth.phase;\n\t\t\t}, \n\t\t\tset : function(phase){\n\t\t\t\tthis._sawtooth.phase = phase;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * The type of the oscillator. Always returns \"pulse\".\n\t\t * @readOnly\n\t\t * @memberOf Tone.PulseOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t\tObject.defineProperty(Tone.PulseOscillator.prototype, \"type\", {\n\t\t\tget : function(){\n\t\t\t\treturn \"pulse\";\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t *  Clean up method\n\t\t *  @return {Tone.PulseOscillator} `this`\n\t\t */\n\t\tTone.PulseOscillator.prototype.dispose = function(){\n\t\t\tTone.Source.prototype.dispose.call(this);\n\t\t\tthis._sawtooth.dispose();\n\t\t\tthis._sawtooth = null;\n\t\t\tthis.width.dispose();\n\t\t\tthis.width = null;\n\t\t\tthis._widthGate.disconnect();\n\t\t\tthis._widthGate = null;\n\t\t\tthis._thresh.disconnect();\n\t\t\tthis._thresh = null;\n\t\t\tthis.frequency = null;\n\t\t\tthis.detune = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.PulseOscillator;\n\t});\n\tToneModule( \n\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class takes an array of Oscillator descriptions and mixes them together\n\t\t *         with the same detune and frequency controls. \n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {frequency} frequency frequency of the oscillator (meaningless for noise types)\n\t\t *  @param {number} modulationFrequency the modulation frequency of the oscillator\n\t\t *  @example\n\t\t *  var pwm = new Tone.PWMOscillator(\"Ab3\", 0.3);\n\t\t */\n\t\tTone.PWMOscillator = function(){\n\t\t\tvar options = this.optionsObject(arguments, [\"frequency\", \"modulationFrequency\"], Tone.PWMOscillator.defaults);\n\t\t\tTone.Source.call(this, options);\n\n\t\t\t/**\n\t\t\t *  the pulse oscillator\n\t\t\t */\n\t\t\tthis._pulse = new Tone.PulseOscillator(options.modulationFrequency);\n\t\t\t//change the pulse oscillator type\n\t\t\tthis._pulse._sawtooth.type = \"sine\";\n\n\t\t\t/**\n\t\t\t *  the modulator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._modulator = new Tone.Oscillator({\n\t\t\t\t\"frequency\" : options.frequency,\n\t\t\t\t\"detune\" : options.detune\n\t\t\t});\n\n\t\t\t/**\n\t\t\t *  Scale the oscillator so it doesn't go silent \n\t\t\t *  at the extreme values.\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._scale = new Tone.Multiply(1.01);\n\n\t\t\t/**\n\t\t\t *  the frequency control\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.frequency = this._modulator.frequency;\n\n\t\t\t/**\n\t\t\t *  the detune control\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.detune = this._modulator.detune;\n\n\t\t\t/**\n\t\t\t *  the modulation rate of the oscillator\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.modulationFrequency = this._pulse.frequency;\t\n\n\t\t\t//connections\n\t\t\tthis._modulator.chain(this._scale, this._pulse.width);\n\t\t\tthis._pulse.connect(this.output);\n\t\t};\n\n\t\tTone.extend(Tone.PWMOscillator, Tone.Oscillator);\n\n\t\t/**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t\tTone.PWMOscillator.defaults = {\n\t\t\t\"frequency\" : 440,\n\t\t\t\"detune\" : 0,\n\t\t\t\"modulationFrequency\" : 0.4,\n\t\t};\n\n\t\t/**\n\t\t *  start the oscillator\n\t\t *  @param  {Tone.Time} [time=now]\n\t\t *  @private\n\t\t */\n\t\tTone.PWMOscillator.prototype._start = function(time){\n\t\t\ttime = this.toSeconds(time);\n\t\t\tthis._modulator.start(time);\n\t\t\tthis._pulse.start(time);\n\t\t};\n\n\t\t/**\n\t\t *  stop the oscillator\n\t\t *  @param  {Tone.Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t\tTone.PWMOscillator.prototype._stop = function(time){\n\t\t\ttime = this.toSeconds(time);\n\t\t\tthis._modulator.stop(time);\n\t\t\tthis._pulse.stop(time);\n\t\t};\n\n\t\t/**\n\t\t * The type of the oscillator. Always returns \"pwm\".\n\t\t * @readOnly\n\t\t * @memberOf Tone.PWMOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t\tObject.defineProperty(Tone.PWMOscillator.prototype, \"type\", {\n\t\t\tget : function(){\n\t\t\t\treturn \"pwm\";\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.PWMOscillator#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t\tObject.defineProperty(Tone.PWMOscillator.prototype, \"phase\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._modulator.phase;\n\t\t\t}, \n\t\t\tset : function(phase){\n\t\t\t\tthis._modulator.phase = phase;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @return {Tone.PWMOscillator} `this`\n\t\t */\n\t\tTone.PWMOscillator.prototype.dispose = function(){\n\t\t\tTone.Source.prototype.dispose.call(this);\n\t\t\tthis._pulse.dispose();\n\t\t\tthis._pulse = null;\n\t\t\tthis._scale.dispose();\n\t\t\tthis._scale = null;\n\t\t\tthis._modulator.dispose();\n\t\t\tthis._modulator = null;\n\t\t\tthis.frequency = null;\n\t\t\tthis.detune = null;\n\t\t\tthis.modulationFrequency = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.PWMOscillator;\n\t});\n\tToneModule( \n\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,\n\t\t *         and Tone.PWMOscillator which allows it to have the types: \n\t\t *         sine, square, triangle, sawtooth, pulse or pwm. \n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {frequency} frequency frequency of the oscillator (meaningless for noise types)\n\t\t *  @param {string} type the type of the oscillator\n\t\t *  @example\n\t\t *  var omniOsc = new Tone.OmniOscillator(\"C#4\", \"pwm\");\n\t\t */\n\t\tTone.OmniOscillator = function(){\n\t\t\tvar options = this.optionsObject(arguments, [\"frequency\", \"type\"], Tone.OmniOscillator.defaults);\n\t\t\tTone.Source.call(this, options);\n\n\t\t\t/**\n\t\t\t *  the frequency control\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.frequency = new Tone.Signal(options.frequency, Tone.Signal.Units.Frequency);\n\n\t\t\t/**\n\t\t\t *  the detune control\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.detune = new Tone.Signal(options.detune);\n\n\t\t\t/**\n\t\t\t *  the type of the oscillator source\n\t\t\t *  @type {string}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._sourceType = undefined;\n\n\t\t\t/**\n\t\t\t *  the oscillator\n\t\t\t *  @type {Tone.Oscillator|Tone.PWMOscillator|Tone.PulseOscillator}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._oscillator = null;\n\n\t\t\t//set the oscillator\n\t\t\tthis.type = options.type;\n\t\t};\n\n\t\tTone.extend(Tone.OmniOscillator, Tone.Oscillator);\n\n\t\t/**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t\tTone.OmniOscillator.defaults = {\n\t\t\t\"frequency\" : 440,\n\t\t\t\"detune\" : 0,\n\t\t\t\"type\" : \"sine\",\n\t\t\t\"width\" : 0.4, //only applies if the oscillator is set to \"pulse\",\n\t\t\t\"modulationFrequency\" : 0.4, //only applies if the oscillator is set to \"pwm\",\n\t\t};\n\n\t\t/**\n\t\t *  @enum {string}\n\t\t *  @private\n\t\t */\n\t\tvar OmniOscType = {\n\t\t\tPulseOscillator : \"PulseOscillator\",\n\t\t\tPWMOscillator : \"PWMOscillator\",\n\t\t\tOscillator : \"Oscillator\"\n\t\t};\n\n\t\t/**\n\t\t *  start the oscillator\n\t\t *  @param {Tone.Time} [time=now] the time to start the oscillator\n\t\t *  @private\n\t\t */\n\t\tTone.OmniOscillator.prototype._start = function(time){\n\t\t\tthis._oscillator.start(time);\n\t\t};\n\n\t\t/**\n\t\t *  start the oscillator\n\t\t *  @param {Tone.Time} [time=now] the time to start the oscillator\n\t\t *  @private\n\t\t */\n\t\tTone.OmniOscillator.prototype._stop = function(time){\n\t\t\tthis._oscillator.stop(time);\n\t\t};\n\n\t\t/**\n\t\t * The type of the oscillator. sine, square, triangle, sawtooth, pwm, or pulse. \n\t\t *  \n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t\tObject.defineProperty(Tone.OmniOscillator.prototype, \"type\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._oscillator.type;\n\t\t\t}, \n\t\t\tset : function(type){\n\t\t\t\tif (type === \"sine\" || type === \"square\" || type === \"triangle\" || type === \"sawtooth\"){\n\t\t\t\t\tif (this._sourceType !== OmniOscType.Oscillator){\n\t\t\t\t\t\tthis._sourceType = OmniOscType.Oscillator;\n\t\t\t\t\t\tthis._createNewOscillator(Tone.Oscillator);\n\t\t\t\t\t}\n\t\t\t\t\tthis._oscillator.type = type;\n\t\t\t\t} else if (type === \"pwm\"){\n\t\t\t\t\tif (this._sourceType !== OmniOscType.PWMOscillator){\n\t\t\t\t\t\tthis._sourceType = OmniOscType.PWMOscillator;\n\t\t\t\t\t\tthis._createNewOscillator(Tone.PWMOscillator);\n\t\t\t\t\t}\n\t\t\t\t} else if (type === \"pulse\"){\n\t\t\t\t\tif (this._sourceType !== OmniOscType.PulseOscillator){\n\t\t\t\t\t\tthis._sourceType = OmniOscType.PulseOscillator;\n\t\t\t\t\t\tthis._createNewOscillator(Tone.PulseOscillator);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError(\"Tone.OmniOscillator does not support type \"+type);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t *  connect the oscillator to the frequency and detune signals\n\t\t *  @private\n\t\t */\n\t\tTone.OmniOscillator.prototype._createNewOscillator = function(OscillatorConstructor){\n\t\t\t//short delay to avoid clicks on the change\n\t\t\tvar now = this.now() + this.bufferTime;\n\t\t\tif (this._oscillator !== null){\n\t\t\t\tvar oldOsc = this._oscillator;\n\t\t\t\toldOsc.stop(now);\n\t\t\t\toldOsc.onended = function(){\n\t\t\t\t\toldOsc.dispose();\n\t\t\t\t\toldOsc = null;\n\t\t\t\t};\n\t\t\t}\n\t\t\tthis._oscillator = new OscillatorConstructor();\n\t\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\t\tthis.detune.connect(this._oscillator.detune);\n\t\t\tthis._oscillator.connect(this.output);\n\t\t\tif (this.state === Tone.Source.State.STARTED){\n\t\t\t\tthis._oscillator.start(now);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * The phase of the oscillator in degrees\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t\tObject.defineProperty(Tone.OmniOscillator.prototype, \"phase\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._oscillator.phase;\n\t\t\t}, \n\t\t\tset : function(phase){\n\t\t\t\tthis._oscillator.phase = phase;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * The width of the oscillator (only if the oscillator is set to pulse)\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Tone.Signal}\n\t\t * @name width\n\t\t * @example\n\t\t * var omniOsc = new Tone.OmniOscillator(440, \"pulse\");\n\t\t * //can access the width attribute only if type === \"pulse\"\n\t\t * omniOsc.width.value = 0.2; \n\t\t */\n\t\tObject.defineProperty(Tone.OmniOscillator.prototype, \"width\", {\n\t\t\tget : function(){\n\t\t\t\tif (this._sourceType === OmniOscType.PulseOscillator){\n\t\t\t\t\treturn this._oscillator.width;\n\t\t\t\t} \n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * The modulationFrequency Signal of the oscillator \n\t\t * (only if the oscillator type is set to pwm).\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Tone.Signal}\n\t\t * @name modulationFrequency\n\t\t * @example\n\t\t * var omniOsc = new Tone.OmniOscillator(440, \"pwm\");\n\t\t * //can access the modulationFrequency attribute only if type === \"pwm\"\n\t\t * omniOsc.modulationFrequency.value = 0.2; \n\t\t */\n\t\tObject.defineProperty(Tone.OmniOscillator.prototype, \"modulationFrequency\", {\n\t\t\tget : function(){\n\t\t\t\tif (this._sourceType === OmniOscType.PWMOscillator){\n\t\t\t\t\treturn this._oscillator.modulationFrequency;\n\t\t\t\t} \n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @return {Tone.OmniOscillator} `this`\n\t\t */\n\t\tTone.OmniOscillator.prototype.dispose = function(){\n\t\t\tTone.Source.prototype.dispose.call(this);\n\t\t\tthis.detune.dispose();\n\t\t\tthis.detune = null;\n\t\t\tthis.frequency.dispose();\n\t\t\tthis.frequency = null;\n\t\t\tthis._oscillator.dispose();\n\t\t\tthis._oscillator = null;\n\t\t\tthis._sourceType = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.OmniOscillator;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class  Base-class for all instruments\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t */\n\t\tTone.Instrument = function(){\n\n\t\t\t/**\n\t\t\t *  the output\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis.output = this.context.createGain();\n\n\t\t\t/**\n\t\t\t * the volume of the output in decibels\n\t\t\t * @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.volume = new Tone.Signal(this.output.gain, Tone.Signal.Units.Decibels);\n\t\t};\n\n\t\tTone.extend(Tone.Instrument);\n\n\t\t/**\n\t\t *  @abstract\n\t\t *  @param {string|number} note the note to trigger\n\t\t *  @param {Tone.Time} [time=now] the time to trigger the ntoe\n\t\t *  @param {number} [velocity=1] the velocity to trigger the note\n\t\t */\n\t\tTone.Instrument.prototype.triggerAttack = function(){};\n\n\t\t/**\n\t\t *  @abstract\n\t\t *  @param {Tone.Time} [time=now] when to trigger the release\n\t\t */\n\t\tTone.Instrument.prototype.triggerRelease = function(){};\n\n\t\t/**\n\t\t *  trigger the attack and then the release\n\t\t *  @param  {string|number} note     the note to trigger\n\t\t *  @param  {Tone.Time} duration the duration of the note\n\t\t *  @param {Tone.Time} [time=now]     the time of the attack\n\t\t *  @param  {number} velocity the velocity\n\t\t *  @returns {Tone.Instrument} `this`\n\t\t */\n\t\tTone.Instrument.prototype.triggerAttackRelease = function(note, duration, time, velocity){\n\t\t\ttime = this.toSeconds(time);\n\t\t\tduration = this.toSeconds(duration);\n\t\t\tthis.triggerAttack(note, time, velocity);\n\t\t\tthis.triggerRelease(time + duration);\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.Instrument} `this`\n\t\t */\n\t\tTone.Instrument.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis.volume.dispose();\n\t\t\tthis.volume = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.Instrument;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class  this is a base class for monophonic instruments. \n\t\t *          it defines their interfaces\n\t\t *\n\t\t *  @constructor\n\t\t *  @abstract\n\t\t *  @extends {Tone.Instrument}\n\t\t */\n\t\tTone.Monophonic = function(options){\n\n\t\t\tTone.Instrument.call(this);\n\n\t\t\t//get the defaults\n\t\t\toptions = this.defaultArg(options, Tone.Monophonic.defaults);\n\n\t\t\t/**\n\t\t\t *  The glide time between notes. \n\t\t\t *  @type {Tone.Time}\n\t\t\t */\n\t\t\tthis.portamento = options.portamento;\n\t\t};\n\n\t\tTone.extend(Tone.Monophonic, Tone.Instrument);\n\n\t\t/**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.Monophonic.defaults = {\n\t\t\t\"portamento\" : 0\n\t\t};\n\n\t\t/**\n\t\t *  trigger the attack. start the note, at the time with the velocity\n\t\t *  \n\t\t *  @param  {string|string} note     the note\n\t\t *  @param  {Tone.Time} [time=now]     the time, if not given is now\n\t\t *  @param  {number} [velocity=1] velocity defaults to 1\n\t\t *  @returns {Tone.Monophonic} `this`\n\t\t */\n\t\tTone.Monophonic.prototype.triggerAttack = function(note, time, velocity) {\n\t\t\ttime = this.toSeconds(time);\n\t\t\tthis.triggerEnvelopeAttack(time, velocity);\n\t\t\tthis.setNote(note, time);\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  trigger the release portion of the envelope\n\t\t *  @param  {Tone.Time} [time=now] if no time is given, the release happens immediatly\n\t\t *  @returns {Tone.Monophonic} `this`\n\t\t */\n\t\tTone.Monophonic.prototype.triggerRelease = function(time){\n\t\t\tthis.triggerEnvelopeRelease(time);\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  override this method with the actual method\n\t\t *  @abstract\n\t\t *  @param {Tone.Time} [time=now] the time the attack should happen\n\t\t *  @param {number} [velocity=1] the velocity of the envelope\n\t\t *  @returns {Tone.Monophonic} `this`\n\t\t */\t\n\t\tTone.Monophonic.prototype.triggerEnvelopeAttack = function() {};\n\n\t\t/**\n\t\t *  override this method with the actual method\n\t\t *  @abstract\n\t\t *  @param {Tone.Time} [time=now] the time the attack should happen\n\t\t *  @param {number} [velocity=1] the velocity of the envelope\n\t\t *  @returns {Tone.Monophonic} `this`\n\t\t */\t\n\t\tTone.Monophonic.prototype.triggerEnvelopeRelease = function() {};\n\n\t\t/**\n\t\t *  set the note to happen at a specific time\n\t\t *  @param {number|string} note if the note is a string, it will be \n\t\t *                              parsed as (NoteName)(Octave) i.e. A4, C#3, etc\n\t\t *                              otherwise it will be considered as the frequency\n\t\t *  @returns {Tone.Monophonic} `this`\n\t\t */\n\t\tTone.Monophonic.prototype.setNote = function(note, time){\n\t\t\ttime = this.toSeconds(time);\n\t\t\tif (this.portamento > 0){\n\t\t\t\tvar currentNote = this.frequency.value;\n\t\t\t\tthis.frequency.setValueAtTime(currentNote, time);\n\t\t\t\tvar portTime = this.toSeconds(this.portamento);\n\t\t\t\tthis.frequency.exponentialRampToValueAtTime(note, time + portTime);\n\t\t\t} else {\n\t\t\t\tthis.frequency.setValueAtTime(note, time);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.Monophonic;\n\t});\n\tToneModule( \n\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class  the MonoSynth is a single oscillator, monophonic synthesizer\n\t\t *          with a filter, and two envelopes (on the filter and the amplitude). \n\t\t *\n\t\t * Flow: \n\t\t * \n\t\t * <pre>\n\t\t * OmniOscillator+-->AmplitudeEnvelope+-->Filter \n\t\t *                                          ^    \n\t\t *                                          |    \n\t\t *                         ScaledEnvelope+--+\n\t\t * </pre>\n\t\t *  \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} options the options available for the synth \n\t\t *                          see defaults below\n\t\t */\n\t\tTone.MonoSynth = function(options){\n\n\t\t\t//get the defaults\n\t\t\toptions = this.defaultArg(options, Tone.MonoSynth.defaults);\n\t\t\tTone.Monophonic.call(this, options);\n\n\t\t\t/**\n\t\t\t *  the first oscillator\n\t\t\t *  @type {Tone.OmniOscillator}\n\t\t\t */\n\t\t\tthis.oscillator = new Tone.OmniOscillator(options.oscillator);\n\n\t\t\t/**\n\t\t\t *  the frequency control signal\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.frequency = this.oscillator.frequency;\n\n\t\t\t/**\n\t\t\t *  the detune control signal\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.detune = this.oscillator.detune;\n\n\t\t\t/**\n\t\t\t *  the filter\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t\t\tthis.filter = new Tone.Filter(options.filter);\n\n\t\t\t/**\n\t\t\t *  the filter envelope\n\t\t\t *  @type {Tone.Envelope}\n\t\t\t */\n\t\t\tthis.filterEnvelope = new Tone.ScaledEnvelope(options.filterEnvelope);\n\n\t\t\t/**\n\t\t\t *  the amplitude envelope\n\t\t\t *  @type {Tone.Envelope}\n\t\t\t */\n\t\t\tthis.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\n\t\t\t//connect the oscillators to the output\n\t\t\tthis.oscillator.chain(this.filter, this.envelope, this.output);\n\t\t\t//start the oscillators\n\t\t\tthis.oscillator.start();\n\t\t\t//connect the filter envelope\n\t\t\tthis.filterEnvelope.connect(this.filter.frequency);\n\t\t};\n\n\t\tTone.extend(Tone.MonoSynth, Tone.Monophonic);\n\n\t\t/**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.MonoSynth.defaults = {\n\t\t\t\"oscillator\" : {\n\t\t\t\t\"type\" : \"square\"\n\t\t\t},\n\t\t\t\"filter\" : {\n\t\t\t\t\"Q\" : 6,\n\t\t\t\t\"type\" : \"lowpass\",\n\t\t\t\t\"rolloff\" : -24\n\t\t\t},\n\t\t\t\"envelope\" : {\n\t\t\t\t\"attack\" : 0.005,\n\t\t\t\t\"decay\" : 0.1,\n\t\t\t\t\"sustain\" : 0.9,\n\t\t\t\t\"release\" : 1\n\t\t\t},\n\t\t\t\"filterEnvelope\" : {\n\t\t\t\t\"attack\" : 0.06,\n\t\t\t\t\"decay\" : 0.2,\n\t\t\t\t\"sustain\" : 0.5,\n\t\t\t\t\"release\" : 2,\n\t\t\t\t\"min\" : 20,\n\t\t\t\t\"max\" : 4000,\n\t\t\t\t\"exponent\" : 2\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t *  start the attack portion of the envelope\n\t\t *  @param {Tone.Time} [time=now] the time the attack should start\n\t\t *  @param {number} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.MonoSynth} `this`\n\t\t */\n\t\tTone.MonoSynth.prototype.triggerEnvelopeAttack = function(time, velocity){\n\t\t\t//the envelopes\n\t\t\tthis.envelope.triggerAttack(time, velocity);\n\t\t\tthis.filterEnvelope.triggerAttack(time);\t\n\t\t\treturn this;\t\n\t\t};\n\n\t\t/**\n\t\t *  start the release portion of the envelope\n\t\t *  @param {Tone.Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.MonoSynth} `this`\n\t\t */\n\t\tTone.MonoSynth.prototype.triggerEnvelopeRelease = function(time){\n\t\t\tthis.envelope.triggerRelease(time);\n\t\t\tthis.filterEnvelope.triggerRelease(time);\n\t\t\treturn this;\n\t\t};\n\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.MonoSynth} `this`\n\t\t */\n\t\tTone.MonoSynth.prototype.dispose = function(){\n\t\t\tTone.Monophonic.prototype.dispose.call(this);\n\t\t\tthis.oscillator.dispose();\n\t\t\tthis.oscillator = null;\n\t\t\tthis.envelope.dispose();\n\t\t\tthis.envelope = null;\n\t\t\tthis.filterEnvelope.dispose();\n\t\t\tthis.filterEnvelope = null;\n\t\t\tthis.filter.dispose();\n\t\t\tthis.filter = null;\n\t\t\tthis.frequency = null;\n\t\t\tthis.detune = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.MonoSynth;\n\t});\n\tToneModule( \n\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class  the AMSynth is an amplitude modulation synthesizer\n\t\t *          composed of two MonoSynths where one MonoSynth is the \n\t\t *          carrier and the second is the modulator.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} options the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t *  var synth = new Tone.AMSynth();\n\t\t */\n\t\tTone.AMSynth = function(options){\n\n\t\t\toptions = this.defaultArg(options, Tone.AMSynth.defaults);\n\t\t\tTone.Monophonic.call(this, options);\n\n\t\t\t/**\n\t\t\t *  the first voice\n\t\t\t *  @type {Tone.MonoSynth}\n\t\t\t */\n\t\t\tthis.carrier = new Tone.MonoSynth(options.carrier);\n\t\t\tthis.carrier.volume.value = -10;\n\n\t\t\t/**\n\t\t\t *  the second voice\n\t\t\t *  @type {Tone.MonoSynth}\n\t\t\t */\n\t\t\tthis.modulator = new Tone.MonoSynth(options.modulator);\n\t\t\tthis.modulator.volume.value = -10;\n\n\t\t\t/**\n\t\t\t *  the frequency control\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.frequency = new Tone.Signal(440, Tone.Signal.Units.Frequency);\n\n\t\t\t/**\n\t\t\t *  the ratio between the two voices\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._harmonicity = new Tone.Multiply(options.harmonicity);\n\n\t\t\t/**\n\t\t\t *  convert the -1,1 output to 0,1\n\t\t\t *  @type {Tone.AudioToGain}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._modulationScale = new Tone.AudioToGain();\n\n\t\t\t/**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._modulationNode = this.context.createGain();\n\n\t\t\t//control the two voices frequency\n\t\t\tthis.frequency.connect(this.carrier.frequency);\n\t\t\tthis.frequency.chain(this._harmonicity, this.modulator.frequency);\n\t\t\tthis.modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t\t\tthis.carrier.chain(this._modulationNode, this.output);\n\t\t};\n\n\t\tTone.extend(Tone.AMSynth, Tone.Monophonic);\n\n\t\t/**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.AMSynth.defaults = {\n\t\t\t\"harmonicity\" : 3,\n\t\t\t\"carrier\" : {\n\t\t\t\t\"volume\" : -10,\n\t\t\t\t\"portamento\" : 0,\n\t\t\t\t\"oscillator\" : {\n\t\t\t\t\t\"type\" : \"sine\"\n\t\t\t\t},\n\t\t\t\t\"envelope\" : {\n\t\t\t\t\t\"attack\" : 0.01,\n\t\t\t\t\t\"decay\" : 0.01,\n\t\t\t\t\t\"sustain\" : 1,\n\t\t\t\t\t\"release\" : 0.5\n\t\t\t\t},\n\t\t\t\t\"filterEnvelope\" : {\n\t\t\t\t\t\"attack\" : 0.01,\n\t\t\t\t\t\"decay\" : 0.0,\n\t\t\t\t\t\"sustain\" : 1,\n\t\t\t\t\t\"release\" : 0.5,\n\t\t\t\t\t\"min\" : 20000,\n\t\t\t\t\t\"max\" : 20000\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"modulator\" : {\n\t\t\t\t\"volume\" : -10,\n\t\t\t\t\"portamento\" : 0,\n\t\t\t\t\"oscillator\" : {\n\t\t\t\t\t\"type\" : \"square\"\n\t\t\t\t},\n\t\t\t\t\"envelope\" : {\n\t\t\t\t\t\"attack\" : 2,\n\t\t\t\t\t\"decay\" : 0.0,\n\t\t\t\t\t\"sustain\" : 1,\n\t\t\t\t\t\"release\" : 0.5\n\t\t\t\t},\n\t\t\t\t\"filterEnvelope\" : {\n\t\t\t\t\t\"attack\" : 4,\n\t\t\t\t\t\"decay\" : 0.2,\n\t\t\t\t\t\"sustain\" : 0.5,\n\t\t\t\t\t\"release\" : 0.5,\n\t\t\t\t\t\"min\" : 20,\n\t\t\t\t\t\"max\" : 1500\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t *  trigger the attack portion of the note\n\t\t *  \n\t\t *  @param  {Tone.Time} [time=now] the time the note will occur\n\t\t *  @param {number} [velocity=1] the velocity of the note\n\t\t *  @returns {Tone.AMSynth} `this`\n\t\t */\n\t\tTone.AMSynth.prototype.triggerEnvelopeAttack = function(time, velocity){\n\t\t\t//the port glide\n\t\t\ttime = this.toSeconds(time);\n\t\t\t//the envelopes\n\t\t\tthis.carrier.envelope.triggerAttack(time, velocity);\n\t\t\tthis.modulator.envelope.triggerAttack(time);\n\t\t\tthis.carrier.filterEnvelope.triggerAttack(time);\n\t\t\tthis.modulator.filterEnvelope.triggerAttack(time);\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  trigger the release portion of the note\n\t\t *  \n\t\t *  @param  {Tone.Time} [time=now] the time the note will release\n\t\t *  @returns {Tone.AMSynth} `this`\n\t\t */\n\t\tTone.AMSynth.prototype.triggerEnvelopeRelease = function(time){\n\t\t\tthis.carrier.triggerRelease(time);\n\t\t\tthis.modulator.triggerRelease(time);\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t * The ratio between the two carrier and the modulator. \n\t\t * @memberOf Tone.AMSynth#\n\t\t * @type {number}\n\t\t * @name harmonicity\n\t\t */\n\t\tObject.defineProperty(Tone.AMSynth.prototype, \"harmonicity\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._harmonicity.value;\n\t\t\t},\n\t\t\tset : function(harm){\n\t\t\t\tthis._harmonicity.value = harm;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.AMSynth} `this`\n\t\t */\n\t\tTone.AMSynth.prototype.dispose = function(){\n\t\t\tTone.Monophonic.prototype.dispose.call(this);\n\t\t\tthis.carrier.dispose();\n\t\t\tthis.carrier = null;\n\t\t\tthis.modulator.dispose();\n\t\t\tthis.modulator = null;\n\t\t\tthis.frequency.dispose();\n\t\t\tthis.frequency = null;\n\t\t\tthis._harmonicity.dispose();\n\t\t\tthis._harmonicity = null;\n\t\t\tthis._modulationScale.dispose();\n\t\t\tthis._modulationScale = null;\n\t\t\tthis._modulationNode.disconnect();\n\t\t\tthis._modulationNode = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.AMSynth;\n\t});\n\tToneModule( \n\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class  the DuoSynth is a monophonic synth composed of two \n\t\t *          MonoSynths run in parallel with control over the \n\t\t *          frequency ratio between the two voices and vibrato effect.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} options the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t *  var duoSynth = new Tone.DuoSynth();\n\t\t */\n\t\tTone.DuoSynth = function(options){\n\n\t\t\toptions = this.defaultArg(options, Tone.DuoSynth.defaults);\n\t\t\tTone.Monophonic.call(this, options);\n\n\t\t\t/**\n\t\t\t *  the first voice\n\t\t\t *  @type {Tone.MonoSynth}\n\t\t\t */\n\t\t\tthis.voice0 = new Tone.MonoSynth(options.voice0);\n\t\t\tthis.voice0.volume.value = -10;\n\n\t\t\t/**\n\t\t\t *  the second voice\n\t\t\t *  @type {Tone.MonoSynth}\n\t\t\t */\n\t\t\tthis.voice1 = new Tone.MonoSynth(options.voice1);\n\t\t\tthis.voice1.volume.value = -10;\n\n\t\t\t/**\n\t\t\t *  The vibrato LFO. \n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._vibrato = new Tone.LFO(options.vibratoRate, -50, 50);\n\t\t\tthis._vibrato.start();\n\n\t\t\t/**\n\t\t\t * the vibrato frequency\n\t\t\t * @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.vibratoRate = this._vibrato.frequency;\n\n\t\t\t/**\n\t\t\t *  the vibrato gain\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._vibratoGain = this.context.createGain();\n\n\t\t\t/**\n\t\t\t * The amount of vibrato\n\t\t\t * @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.vibratoAmount = new Tone.Signal(this._vibratoGain.gain, Tone.Signal.Units.Gain);\n\t\t\tthis.vibratoAmount.value = options.vibratoAmount;\n\n\t\t\t/**\n\t\t\t *  the delay before the vibrato starts\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._vibratoDelay = this.toSeconds(options.vibratoDelay);\n\n\t\t\t/**\n\t\t\t *  the frequency control\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.frequency = new Tone.Signal(440, Tone.Signal.Units.Frequency);\n\n\t\t\t/**\n\t\t\t *  the ratio between the two voices\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._harmonicity = new Tone.Multiply(options.harmonicity);\n\n\t\t\t//control the two voices frequency\n\t\t\tthis.frequency.connect(this.voice0.frequency);\n\t\t\tthis.frequency.chain(this._harmonicity, this.voice1.frequency);\n\t\t\tthis._vibrato.connect(this._vibratoGain);\n\t\t\tthis._vibratoGain.fan(this.voice0.detune, this.voice1.detune);\n\t\t\tthis.voice0.connect(this.output);\n\t\t\tthis.voice1.connect(this.output);\n\t\t};\n\n\t\tTone.extend(Tone.DuoSynth, Tone.Monophonic);\n\n\t\t/**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.DuoSynth.defaults = {\n\t\t\t\"vibratoAmount\" : 0.5,\n\t\t\t\"vibratoRate\" : 5,\n\t\t\t\"vibratoDelay\" : 1,\n\t\t\t\"harmonicity\" : 1.5,\n\t\t\t\"voice0\" : {\n\t\t\t\t\"volume\" : -10,\n\t\t\t\t\"portamento\" : 0,\n\t\t\t\t\"oscillator\" : {\n\t\t\t\t\t\"type\" : \"sine\"\n\t\t\t\t},\n\t\t\t\t\"filterEnvelope\" : {\n\t\t\t\t\t\"attack\" : 0.01,\n\t\t\t\t\t\"decay\" : 0.0,\n\t\t\t\t\t\"sustain\" : 1,\n\t\t\t\t\t\"release\" : 0.5\n\t\t\t\t},\n\t\t\t\t\"envelope\" : {\n\t\t\t\t\t\"attack\" : 0.01,\n\t\t\t\t\t\"decay\" : 0.0,\n\t\t\t\t\t\"sustain\" : 1,\n\t\t\t\t\t\"release\" : 0.5\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"voice1\" : {\n\t\t\t\t\"volume\" : -10,\n\t\t\t\t\"portamento\" : 0,\n\t\t\t\t\"oscillator\" : {\n\t\t\t\t\t\"type\" : \"sine\"\n\t\t\t\t},\n\t\t\t\t\"filterEnvelope\" : {\n\t\t\t\t\t\"attack\" : 0.01,\n\t\t\t\t\t\"decay\" : 0.0,\n\t\t\t\t\t\"sustain\" : 1,\n\t\t\t\t\t\"release\" : 0.5\n\t\t\t\t},\n\t\t\t\t\"envelope\" : {\n\t\t\t\t\t\"attack\" : 0.01,\n\t\t\t\t\t\"decay\" : 0.0,\n\t\t\t\t\t\"sustain\" : 1,\n\t\t\t\t\t\"release\" : 0.5\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t *  start the attack portion of the envelopes\n\t\t *  \n\t\t *  @param {Tone.Time} [time=now] the time the attack should start\n\t\t *  @param {number} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.DuoSynth} `this`\n\t\t */\n\t\tTone.DuoSynth.prototype.triggerEnvelopeAttack = function(time, velocity){\n\t\t\ttime = this.toSeconds(time);\n\t\t\tthis.voice0.envelope.triggerAttack(time, velocity);\n\t\t\tthis.voice1.envelope.triggerAttack(time, velocity);\n\t\t\tthis.voice0.filterEnvelope.triggerAttack(time);\n\t\t\tthis.voice1.filterEnvelope.triggerAttack(time);\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  start the release portion of the envelopes\n\t\t *  \n\t\t *  @param {Tone.Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.DuoSynth} `this`\n\t\t */\n\t\tTone.DuoSynth.prototype.triggerEnvelopeRelease = function(time){\n\t\t\tthis.voice0.triggerRelease(time);\n\t\t\tthis.voice1.triggerRelease(time);\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t * The ratio between the two carrier and the modulator. \n\t\t * @memberOf Tone.DuoSynth#\n\t\t * @type {number}\n\t\t * @name harmonicity\n\t\t */\n\t\tObject.defineProperty(Tone.DuoSynth.prototype, \"harmonicity\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._harmonicity.value;\n\t\t\t},\n\t\t\tset : function(harm){\n\t\t\t\tthis._harmonicity.value = harm;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.DuoSynth} `this`\n\t\t */\n\t\tTone.DuoSynth.prototype.dispose = function(){\n\t\t\tTone.Monophonic.prototype.dispose.call(this);\n\t\t\tthis.voice0.dispose();\n\t\t\tthis.voice0 = null;\n\t\t\tthis.voice1.dispose();\n\t\t\tthis.voice1 = null;\n\t\t\tthis.frequency.dispose();\n\t\t\tthis.frequency = null;\n\t\t\tthis._vibrato.dispose();\n\t\t\tthis._vibrato = null;\n\t\t\tthis._vibratoGain.disconnect();\n\t\t\tthis._vibratoGain = null;\n\t\t\tthis._harmonicity.dispose();\n\t\t\tthis._harmonicity = null;\n\t\t\tthis.vibratoAmount.dispose();\n\t\t\tthis.vibratoAmount = null;\n\t\t\tthis.vibratoRate = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.DuoSynth;\n\t});\n\tToneModule( \n\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class  the FMSynth is composed of two MonoSynths where one MonoSynth is the \n\t\t *          carrier and the second is the modulator.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} options the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t *  var fmSynth = new Tone.FMSynth();\n\t\t */\n\t\tTone.FMSynth = function(options){\n\n\t\t\toptions = this.defaultArg(options, Tone.FMSynth.defaults);\n\t\t\tTone.Monophonic.call(this, options);\n\n\t\t\t/**\n\t\t\t *  the first voice\n\t\t\t *  @type {Tone.MonoSynth}\n\t\t\t */\n\t\t\tthis.carrier = new Tone.MonoSynth(options.carrier);\n\t\t\tthis.carrier.volume.value = -10;\n\n\t\t\t/**\n\t\t\t *  the second voice\n\t\t\t *  @type {Tone.MonoSynth}\n\t\t\t */\n\t\t\tthis.modulator = new Tone.MonoSynth(options.modulator);\n\t\t\tthis.modulator.volume.value = -10;\n\n\t\t\t/**\n\t\t\t *  the frequency control\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.frequency = new Tone.Signal(440, Tone.Signal.Units.Frequency);\n\n\t\t\t/**\n\t\t\t *  the ratio between the two voices\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._harmonicity = new Tone.Multiply(options.harmonicity);\n\n\t\t\t/**\n\t\t\t *  \n\t\t\t *\n\t\t\t *\t@type {Tone.Multiply}\n\t\t\t *\t@private\n\t\t\t */\n\t\t\tthis._modulationIndex = new Tone.Multiply(options.modulationIndex);\n\n\t\t\t/**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._modulationNode = this.context.createGain();\n\n\t\t\t//control the two voices frequency\n\t\t\tthis.frequency.connect(this.carrier.frequency);\n\t\t\tthis.frequency.chain(this._harmonicity, this.modulator.frequency);\n\t\t\tthis.frequency.chain(this._modulationIndex, this._modulationNode);\n\t\t\tthis.modulator.connect(this._modulationNode.gain);\n\t\t\tthis._modulationNode.gain.value = 0;\n\t\t\tthis._modulationNode.connect(this.carrier.frequency);\n\t\t\tthis.carrier.connect(this.output);\n\t\t};\n\n\t\tTone.extend(Tone.FMSynth, Tone.Monophonic);\n\n\t\t/**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.FMSynth.defaults = {\n\t\t\t\"harmonicity\" : 3,\n\t\t\t\"modulationIndex\" : 10,\n\t\t\t\"carrier\" : {\n\t\t\t\t\"volume\" : -10,\n\t\t\t\t\"portamento\" : 0,\n\t\t\t\t\"oscillator\" : {\n\t\t\t\t\t\"type\" : \"sine\"\n\t\t\t\t},\n\t\t\t\t\"envelope\" : {\n\t\t\t\t\t\"attack\" : 0.01,\n\t\t\t\t\t\"decay\" : 0.0,\n\t\t\t\t\t\"sustain\" : 1,\n\t\t\t\t\t\"release\" : 0.5\n\t\t\t\t},\n\t\t\t\t\"filterEnvelope\" : {\n\t\t\t\t\t\"attack\" : 0.01,\n\t\t\t\t\t\"decay\" : 0.0,\n\t\t\t\t\t\"sustain\" : 1,\n\t\t\t\t\t\"release\" : 0.5,\n\t\t\t\t\t\"min\" : 20000,\n\t\t\t\t\t\"max\" : 20000\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"modulator\" : {\n\t\t\t\t\"volume\" : -10,\n\t\t\t\t\"portamento\" : 0,\n\t\t\t\t\"oscillator\" : {\n\t\t\t\t\t\"type\" : \"triangle\"\n\t\t\t\t},\n\t\t\t\t\"envelope\" : {\n\t\t\t\t\t\"attack\" : 0.01,\n\t\t\t\t\t\"decay\" : 0.0,\n\t\t\t\t\t\"sustain\" : 1,\n\t\t\t\t\t\"release\" : 0.5\n\t\t\t\t},\n\t\t\t\t\"filterEnvelope\" : {\n\t\t\t\t\t\"attack\" : 0.01,\n\t\t\t\t\t\"decay\" : 0.0,\n\t\t\t\t\t\"sustain\" : 1,\n\t\t\t\t\t\"release\" : 0.5,\n\t\t\t\t\t\"min\" : 20000,\n\t\t\t\t\t\"max\" : 20000\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t *  trigger the attack portion of the note\n\t\t *  \n\t\t *  @param  {Tone.Time} [time=now] the time the note will occur\n\t\t *  @param {number} [velocity=1] the velocity of the note\n\t\t *  @returns {Tone.FMSynth} `this`\n\t\t */\n\t\tTone.FMSynth.prototype.triggerEnvelopeAttack = function(time, velocity){\n\t\t\t//the port glide\n\t\t\ttime = this.toSeconds(time);\n\t\t\t//the envelopes\n\t\t\tthis.carrier.envelope.triggerAttack(time, velocity);\n\t\t\tthis.modulator.envelope.triggerAttack(time);\n\t\t\tthis.carrier.filterEnvelope.triggerAttack(time);\n\t\t\tthis.modulator.filterEnvelope.triggerAttack(time);\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  trigger the release portion of the note\n\t\t *  \n\t\t *  @param  {Tone.Time} [time=now] the time the note will release\n\t\t *  @returns {Tone.FMSynth} `this`\n\t\t */\n\t\tTone.FMSynth.prototype.triggerEnvelopeRelease = function(time){\n\t\t\tthis.carrier.triggerRelease(time);\n\t\t\tthis.modulator.triggerRelease(time);\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t * The ratio between the two carrier and the modulator. \n\t\t * @memberOf Tone.FMSynth#\n\t\t * @type {number}\n\t\t * @name harmonicity\n\t\t */\n\t\tObject.defineProperty(Tone.FMSynth.prototype, \"harmonicity\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._harmonicity.value;\n\t\t\t},\n\t\t\tset : function(harm){\n\t\t\t\tthis._harmonicity.value = harm;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the \n\t\t *  ratio of the frequency of the modulating signal (mf) to the amplitude of the \n\t\t *  modulating signal (ma) -- as in ma/mf. \n\t\t * @memberOf Tone.FMSynth#\n\t\t * @type {number}\n\t\t * @name modulationIndex\n\t\t */\n\t\tObject.defineProperty(Tone.FMSynth.prototype, \"modulationIndex\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._modulationIndex.value;\n\t\t\t},\n\t\t\tset : function(mod){\n\t\t\t\tthis._modulationIndex.value = mod;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.FMSynth} `this`\n\t\t */\n\t\tTone.FMSynth.prototype.dispose = function(){\n\t\t\tTone.Monophonic.prototype.dispose.call(this);\n\t\t\tthis.carrier.dispose();\n\t\t\tthis.carrier = null;\n\t\t\tthis.modulator.dispose();\n\t\t\tthis.modulator = null;\n\t\t\tthis.frequency.dispose();\n\t\t\tthis.frequency = null;\n\t\t\tthis._modulationIndex.dispose();\n\t\t\tthis._modulationIndex = null;\n\t\t\tthis._harmonicity.dispose();\n\t\t\tthis._harmonicity = null;\n\t\t\tthis._modulationNode.disconnect();\n\t\t\tthis._modulationNode = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.FMSynth;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\t\t\n\t\t/**\n\t\t *  @class  Audio file player with start, loop, stop.\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Source} \n\t\t *  @param {string|AudioBuffer} url Either the AudioBuffer or the url from\n\t\t *                                  which to load the AudioBuffer\n\t\t *  @param {function=} onload The function to invoke when the buffer is loaded. \n\t\t *                            Recommended to use {@link Tone.Buffer#onload} instead.\n\t\t *  @example\n\t\t *  var player = new Tone.Player(\"./path/to/sample.mp3\");\n\t\t */\n\t\tTone.Player = function(){\n\t\t\t\n\t\t\tvar options = this.optionsObject(arguments, [\"url\", \"onload\"], Tone.Player.defaults);\n\t\t\tTone.Source.call(this, options);\n\n\t\t\t/**\n\t\t\t *  @private\n\t\t\t *  @type {AudioBufferSourceNode}\n\t\t\t */\n\t\t\tthis._source = null;\n\t\t\t\n\t\t\t/**\n\t\t\t *  the buffer\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Buffer}\n\t\t\t */\n\t\t\tthis._buffer = new Tone.Buffer(options.url, options.onload.bind(null, this));\n\n\t\t\t/**\n\t\t\t *  if the buffer should loop once it's over\n\t\t\t *  @type {boolean}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._loop = options.loop;\n\n\t\t\t/**\n\t\t\t *  if 'loop' is true, the loop will start at this position\n\t\t\t *  @type {Tone.Time}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._loopStart = options.loopStart;\n\n\t\t\t/**\n\t\t\t *  if 'loop' is true, the loop will end at this position\n\t\t\t *  @type {Tone.Time}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._loopEnd = options.loopEnd;\n\n\t\t\t/**\n\t\t\t *  the playback rate\n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t\t\tthis._playbackRate = options.playbackRate;\n\n\t\t\t/**\n\t\t\t *  Enabling retrigger will allow a player to be restarted\n\t\t\t *  before the the previous 'start' is done playing.\n\t\t\t *  @type {boolean}\n\t\t\t */\n\t\t\tthis.retrigger = options.retrigger;\n\t\t};\n\n\t\tTone.extend(Tone.Player, Tone.Source);\n\t\t\n\t\t/**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.Player.defaults = {\n\t\t\t\"onload\" : function(){},\n\t\t\t\"playbackRate\" : 1,\n\t\t\t\"loop\" : false,\n\t\t\t\"loopStart\" : 0,\n\t\t\t\"loopEnd\" : 0,\n\t\t\t\"retrigger\" : false,\n\t\t};\n\n\t\t/**\n\t\t *  Load the audio file as an audio buffer.\n\t\t *  Decodes the audio asynchronously and invokes\n\t\t *  the callback once the audio buffer loads. \n\t\t *  Note: this does not need to be called, if a url\n\t\t *  was passed in to the constructor. Only use this\n\t\t *  if you want to manually load a new url. \n\t\t * @param {string} url The url of the buffer to load.\n\t\t *                     filetype support depends on the\n\t\t *                     browser.\n\t\t *  @param  {function(Tone.Player)=} callback\n\t\t *  @returns {Tone.Player} `this`\n\t\t */\n\t\tTone.Player.prototype.load = function(url, callback){\n\t\t\tthis._buffer.load(url, callback.bind(this, this));\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  play the buffer between the desired positions\n\t\t *  \n\t\t *  @private\n\t\t *  @param  {Tone.Time} [startTime=now] when the player should start.\n\t\t *  @param  {Tone.Time} [offset=0] the offset from the beginning of the sample\n\t\t *                                 to start at. \n\t\t *  @param  {Tone.Time=} duration how long the sample should play. If no duration\n\t\t *                                is given, it will default to the full length \n\t\t *                                of the sample (minus any offset)\n\t\t *  @returns {Tone.Player} `this`\n\t\t */\n\t\tTone.Player.prototype._start = function(startTime, offset, duration){\n\t\t\tif (this._buffer.loaded){\n\t\t\t\t//if it's a loop the default offset is the loopstart point\n\t\t\t\tif (this._loop){\n\t\t\t\t\toffset = this.defaultArg(offset, this._loopStart);\n\t\t\t\t\toffset = this.toSeconds(offset);\n\t\t\t\t} else {\n\t\t\t\t\t//otherwise the default offset is 0\n\t\t\t\t\toffset = this.defaultArg(offset, 0);\n\t\t\t\t}\n\t\t\t\tduration = this.defaultArg(duration, this._buffer.duration - offset);\n\t\t\t\t//the values in seconds\n\t\t\t\tstartTime = this.toSeconds(startTime);\n\t\t\t\tduration = this.toSeconds(duration);\n\t\t\t\t//make the source\n\t\t\t\tthis._source = this.context.createBufferSource();\n\t\t\t\tthis._source.buffer = this._buffer.get();\n\t\t\t\t//set the looping properties\n\t\t\t\tif (this._loop){\n\t\t\t\t\tthis._source.loop = this._loop;\n\t\t\t\t\tthis._source.loopStart = this.toSeconds(this._loopStart);\n\t\t\t\t\tthis._source.loopEnd = this.toSeconds(this._loopEnd);\n\t\t\t\t} else {\n\t\t\t\t\tthis._nextStop = startTime + duration;\n\t\t\t\t}\n\t\t\t\t//and other properties\n\t\t\t\tthis._source.playbackRate.value = this._playbackRate;\n\t\t\t\tthis._source.onended = this.onended;\n\t\t\t\tthis._source.connect(this.output);\n\t\t\t\t//start it\n\t\t\t\tthis._source.start(startTime, offset, duration);\n\t\t\t} else {\n\t\t\t\tthrow Error(\"tried to start Player before the buffer was loaded\");\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  Stop playback.\n\t\t *  @private\n\t\t *  @param  {Tone.Time} [time=now]\n\t\t *  @returns {Tone.Player} `this`\n\t\t */\n\t\tTone.Player.prototype._stop = function(time){\n\t\t\tif (this._source){\n\t\t\t\tthis._source.stop(this.toSeconds(time));\n\t\t\t\tthis._source = null;\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  Set the loop start and end. Will only loop if `loop` is \n\t\t *  set to `true`. \n\t\t *  @param {Tone.Time} loopStart The loop end time\n\t\t *  @param {Tone.Time} loopEnd The loop end time\n\t\t *  @returns {Tone.Player} `this`\n\t\t *  @example\n\t\t *  player.setLoopPoints(0.2, 0.3);\n\t\t *  player.loop = true;\n\t\t */\n\t\tTone.Player.prototype.setLoopPoints = function(loopStart, loopEnd){\n\t\t\tthis.loopStart = loopStart;\n\t\t\tthis.loopEnd = loopEnd;\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t * If `loop` is true, the loop will start at this position. \n\t\t * @memberOf Tone.Player#\n\t\t * @type {Tone.Time}\n\t\t * @name loopStart\n\t\t */\n\t\tObject.defineProperty(Tone.Player.prototype, \"loopStart\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._loopStart;\n\t\t\t}, \n\t\t\tset : function(loopStart){\n\t\t\t\tthis._loopStart = loopStart;\n\t\t\t\tif (this._source){\n\t\t\t\t\tthis._source.loopStart = this.toSeconds(loopStart);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * If `loop` is true, the loop will end at this position.\n\t\t * @memberOf Tone.Player#\n\t\t * @type {Tone.Time}\n\t\t * @name loopEnd\n\t\t */\n\t\tObject.defineProperty(Tone.Player.prototype, \"loopEnd\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._loopEnd;\n\t\t\t}, \n\t\t\tset : function(loopEnd){\n\t\t\t\tthis._loopEnd = loopEnd;\n\t\t\t\tif (this._source){\n\t\t\t\t\tthis._source.loopEnd = this.toSeconds(loopEnd);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * The audio buffer belonging to the player. \n\t\t * @memberOf Tone.Player#\n\t\t * @type {AudioBuffer}\n\t\t * @name buffer\n\t\t */\n\t\tObject.defineProperty(Tone.Player.prototype, \"buffer\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._buffer;\n\t\t\t}, \n\t\t\tset : function(buffer){\n\t\t\t\tthis._buffer.set(buffer);\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * If the buffer should loop once it's over. \n\t\t * @memberOf Tone.Player#\n\t\t * @type {boolean}\n\t\t * @name loop\n\t\t */\n\t\tObject.defineProperty(Tone.Player.prototype, \"loop\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._loop;\n\t\t\t}, \n\t\t\tset : function(loop){\n\t\t\t\tthis._loop = loop;\n\t\t\t\tif (this._source){\n\t\t\t\t\tthis._source.loop = loop;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * The playback speed. 1 is normal speed. \n\t\t * Note that this is not a Tone.Signal because of a bug in Blink. \n\t\t * Please star this issue if this an important thing to you: \n\t\t * https://code.google.com/p/chromium/issues/detail?id=311284\n\t\t * \n\t\t * @memberOf Tone.Player#\n\t\t * @type {number}\n\t\t * @name playbackRate\n\t\t */\n\t\tObject.defineProperty(Tone.Player.prototype, \"playbackRate\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._playbackRate;\n\t\t\t}, \n\t\t\tset : function(rate){\n\t\t\t\tthis._playbackRate = rate;\n\t\t\t\tif (this._source) {\n\t\t\t\t\tthis._source.playbackRate.value = rate;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t *  dispose and disconnect\n\t\t *  @return {Tone.Player} `this`\n\t\t */\n\t\tTone.Player.prototype.dispose = function(){\n\t\t\tTone.Source.prototype.dispose.call(this);\n\t\t\tif (this._source !== null){\n\t\t\t\tthis._source.disconnect();\n\t\t\t\tthis._source = null;\n\t\t\t}\n\t\t\tthis._buffer.dispose();\n\t\t\tthis._buffer = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.Player;\n\t});\n\n\tToneModule( \n\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class A simple sampler instrument which plays an audio buffer \n\t\t *         through an amplitude envelope and a filter envelope. Nested\n\t\t *         lists will be flattened.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object|string} urls the urls of the audio file\n\t\t *  @param {Object} options the options object for the synth\n\t\t *  @example\n\t\t *  var sampler = new Sampler({\n\t\t *  \tA : {\n\t\t *  \t\t1 : {\"./audio/casio/A1.mp3\",\n\t\t *  \t\t2 : \"./audio/casio/A2.mp3\",\n\t\t *  \t},\n\t\t *  \t\"B.1\" : \"./audio/casio/B1.mp3\",\n\t\t *  });\n\t\t *  //...once samples have loaded\n\t\t *  sampler.triggerAttack(\"A.1\", time, velocity);\n\t\t */\n\t\tTone.Sampler = function(urls, options){\n\n\t\t\tTone.Instrument.call(this);\n\t\t\toptions = this.defaultArg(options, Tone.Sampler.defaults);\n\n\t\t\t/**\n\t\t\t *  the sample player\n\t\t\t *  @type {Tone.Player}\n\t\t\t */\n\t\t\tthis.player = new Tone.Player(options.player);\n\t\t\tthis.player.retrigger = true;\n\n\t\t\t/**\n\t\t\t *  the buffers\n\t\t\t *  @type {Object<Tone.Buffer>}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._buffers = {};\n\n\t\t\t/**\n\t\t\t *  The amplitude envelope. \n\t\t\t *  @type {Tone.Envelope}\n\t\t\t */\n\t\t\tthis.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\n\t\t\t/**\n\t\t\t *  The filter envelope. \n\t\t\t *  @type {Tone.Envelope}\n\t\t\t */\n\t\t\tthis.filterEnvelope = new Tone.ScaledEnvelope(options.filterEnvelope);\n\n\t\t\t/**\n\t\t\t *  The name of the current sample. \n\t\t\t *  @type {string}\n\t\t\t */\n\t\t\tthis._sample = options.sample;\n\n\t\t\t/**\n\t\t\t * the private reference to the pitch\n\t\t\t * @type {number}\n\t\t\t * @private\n\t\t\t */\n\t\t\tthis._pitch = options.pitch;\n\n\t\t\t/**\n\t\t\t *  The filter.\n\t\t\t *  @type {BiquadFilterNode}\n\t\t\t */\n\t\t\tthis.filter = new Tone.Filter(options.filter);\n\n\t\t\t//connections / setup\n\t\t\tthis._loadBuffers(urls);\n\t\t\tthis.pitch = options.pitch;\n\t\t\tthis.player.chain(this.filter, this.envelope, this.output);\n\t\t\tthis.filterEnvelope.connect(this.filter.frequency);\n\t\t};\n\n\t\tTone.extend(Tone.Sampler, Tone.Instrument);\n\n\t\t/**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t */\n\t\tTone.Sampler.defaults = {\n\t\t\t\"sample\" : 0,\n\t\t\t\"pitch\" : 0,\n\t\t\t\"player\" : {\n\t\t\t\t\"loop\" : false,\n\t\t\t},\n\t\t\t\"envelope\" : {\n\t\t\t\t\"attack\" : 0.001,\n\t\t\t\t\"decay\" : 0,\n\t\t\t\t\"sustain\" : 1,\n\t\t\t\t\"release\" : 0.1\n\t\t\t},\n\t\t\t\"filterEnvelope\" : {\n\t\t\t\t\"attack\" : 0.001,\n\t\t\t\t\"decay\" : 0.001,\n\t\t\t\t\"sustain\" : 1,\n\t\t\t\t\"release\" : 0.5,\n\t\t\t\t\"min\" : 20,\n\t\t\t\t\"max\" : 20000,\n\t\t\t\t\"exponent\" : 2,\n\t\t\t},\n\t\t\t\"filter\" : {\n\t\t\t\t\"type\" : \"lowpass\"\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t *  load the buffers\n\t\t *  @param   {Object} urls   the urls\n\t\t *  @private\n\t\t */\n\t\tTone.Sampler.prototype._loadBuffers = function(urls){\n\t\t\tif (typeof urls === \"string\"){\n\t\t\t\tthis._buffers[\"0\"] = new Tone.Buffer(urls, function(){\n\t\t\t\t\tthis.sample = \"0\";\n\t\t\t\t}.bind(this));\n\t\t\t} else {\n\t\t\t\turls = this._flattenUrls(urls);\n\t\t\t\tfor (var buffName in urls){\n\t\t\t\t\tthis._sample = buffName;\n\t\t\t\t\tvar urlString = urls[buffName];\n\t\t\t\t\tthis._buffers[buffName] = new Tone.Buffer(urlString);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t *  flatten an object into a single depth object\n\t\t *  https://gist.github.com/penguinboy/762197\n\t\t *  @param   {Object} ob \t\n\t\t *  @return  {Object}    \n\t\t *  @private\n\t\t */\n\t\tTone.Sampler.prototype._flattenUrls = function(ob) {\n\t\t\tvar toReturn = {};\n\t\t\tfor (var i in ob) {\n\t\t\t\tif (!ob.hasOwnProperty(i)) continue;\n\t\t\t\tif ((typeof ob[i]) == \"object\") {\n\t\t\t\t\tvar flatObject = this._flattenUrls(ob[i]);\n\t\t\t\t\tfor (var x in flatObject) {\n\t\t\t\t\t\tif (!flatObject.hasOwnProperty(x)) continue;\n\t\t\t\t\t\ttoReturn[i + \".\" + x] = flatObject[x];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttoReturn[i] = ob[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn toReturn;\n\t\t};\n\n\t\t/**\n\t\t *  start the sample.\n\t\t *  @param {string=} sample the name of the samle to trigger, defaults to\n\t\t *                          the last sample used\n\t\t *  @param {Tone.Time} [time=now] the time when the note should start\n\t\t *  @param {number} [velocity=1] the velocity of the note\n\t\t *  @returns {Tone.Sampler} `this`\n\t\t */\n\t\tTone.Sampler.prototype.triggerAttack = function(name, time, velocity){\n\t\t\ttime = this.toSeconds(time);\n\t\t\tif (name){\n\t\t\t\tthis.sample = name;\n\t\t\t}\n\t\t\tthis.player.start(time, 0);\n\t\t\tthis.envelope.triggerAttack(time, velocity);\n\t\t\tthis.filterEnvelope.triggerAttack(time);\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  start the release portion of the sample\n\t\t *  \n\t\t *  @param {Tone.Time} [time=now] the time when the note should release\n\t\t *  @returns {Tone.Sampler} `this`\n\t\t */\n\t\tTone.Sampler.prototype.triggerRelease = function(time){\n\t\t\ttime = this.toSeconds(time);\n\t\t\tthis.filterEnvelope.triggerRelease(time);\n\t\t\tthis.envelope.triggerRelease(time);\n\t\t\tthis.player.stop(this.toSeconds(this.envelope.release) + time);\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t * The name of the sample to trigger.\n\t\t * @memberOf Tone.Sampler#\n\t\t * @type {number|string}\n\t\t * @name sample\n\t\t */\n\t\tObject.defineProperty(Tone.Sampler.prototype, \"sample\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._sample;\n\t\t\t},\n\t\t\tset : function(name){\n\t\t\t\tif (this._buffers.hasOwnProperty(name)){\n\t\t\t\t\tthis._sample = name;\n\t\t\t\t\tthis.player.buffer = this._buffers[name];\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(\"Sampler does not have a sample named \"+name);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * Repitch the sampled note by some interval (measured\n\t\t * in semi-tones). \n\t\t * @memberOf Tone.Sampler#\n\t\t * @type {number}\n\t\t * @name pitch\n\t\t * @example\n\t\t * sampler.pitch = -12; //down one octave\n\t\t * sampler.pitch = 7; //up a fifth\n\t\t */\n\t\tObject.defineProperty(Tone.Sampler.prototype, \"pitch\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._pitch;\n\t\t\t},\n\t\t\tset : function(interval){\n\t\t\t\tthis._pitch = interval;\n\t\t\t\tthis.player.playbackRate = this.intervalToFrequencyRatio(interval);\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.Sampler} `this`\n\t\t */\n\t\tTone.Sampler.prototype.dispose = function(){\n\t\t\tTone.Instrument.prototype.dispose.call(this);\n\t\t\tthis.player.dispose();\n\t\t\tthis.filterEnvelope.dispose();\n\t\t\tthis.envelope.dispose();\n\t\t\tthis.filter.dispose();\n\t\t\tthis.player = null;\n\t\t\tthis.filterEnvelope = null;\n\t\t\tthis.envelope = null;\n\t\t\tthis.filter = null;\n\t\t\tfor (var sample in this._buffers){\n\t\t\t\tthis._buffers[sample].dispose();\n\t\t\t\tthis._buffers[sample] = null;\n\t\t\t}\n\t\t\tthis._buffers = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.Sampler;\n\t});\n\n\tToneModule( \n\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class Deprecated.\n\t\t *\n\t\t *  @constructor\n\t\t *  @deprecated Use Tone.PolySynth with Tone.Sampler as the voice.\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} samples the samples used in this\n\t\t *  @param {function} onload the callback to invoke when all \n\t\t *                           of the samples have been loaded\n\t\t */\n\t\tTone.MultiSampler = function(samples, onload){\n\n\t\t\tconsole.warn(\"Tone.MultiSampler is deprecated - use Tone.PolySynth with Tone.Sampler as the voice\");\n\t\t \tTone.Instrument.call(this);\n\n\t\t \t/**\n\t\t \t *  the array of voices\n\t\t \t *  @type {Tone.Sampler}\n\t\t \t */\n\t\t\tthis.samples = {};\n\n\t\t\t//make the samples\n\t\t\tthis._createSamples(samples, onload);\n\t\t};\n\n\t\tTone.extend(Tone.MultiSampler, Tone.Instrument);\n\n\t\t/**\n\t\t *  creates all of the samples and tracks their loading\n\t\t *  \n\t\t *  @param   {Object} samples the samples\n\t\t *  @param   {function} onload  the onload callback\n\t\t *  @private\n\t\t */\n\t\tTone.MultiSampler.prototype._createSamples = function(samples, onload){\n\t\t\t//object which tracks the number of loaded samples\n\t\t\tvar loadCounter = {\n\t\t\t\ttotal : 0,\n\t\t\t\tloaded : 0\n\t\t\t};\n\t\t\t//get the count\n\t\t\tfor (var s in samples){ //jshint ignore:line\n\t\t\t\tloadCounter.total++;\n\t\t\t}\n\t\t\t//the function to invoke when a sample is loaded\n\t\t\tvar onSampleLoad = function(){\n\t\t\t\tloadCounter.loaded++;\n\t\t\t\tif (loadCounter.loaded === loadCounter.total){\n\t\t\t\t\tif (onload){\n\t\t\t\t\t\tonload();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tfor (var samp in samples){\n\t\t\t\tvar url = samples[samp];\n\t\t\t\tvar sampler = new Tone.Sampler(url, onSampleLoad);\n\t\t\t\tsampler.connect(this.output);\n\t\t\t\tthis.samples[samp] = sampler;\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t *  start a sample\n\t\t *  \n\t\t *  @param  {string} sample the note name to start\n\t\t *  @param {Tone.Time} [time=now] the time when the note should start\n\t\t *  @param {number} [velocity=1] the velocity of the note\n\t\t */\n\t\tTone.MultiSampler.prototype.triggerAttack = function(sample, time, velocity){\n\t\t\tif (this.samples.hasOwnProperty(sample)){\n\t\t\t\tthis.samples[sample].triggerAttack(0, time, velocity);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t *  start the release portion of the note\n\t\t *  \n\t\t *  @param  {string} sample the note name to release\n\t\t *  @param {Tone.Time} [time=now] the time when the note should release\n\t\t */\n\t\tTone.MultiSampler.prototype.triggerRelease = function(sample, time){\n\t\t\tif (this.samples.hasOwnProperty(sample)){\n\t\t\t\tthis.samples[sample].triggerRelease(time);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t  *  start the release portion of the note\n\t\t  *  \n\t\t  *  @param  {string} sample the note name to release\n\t\t  *  @param {Tone.Time} duration the duration of the note\n\t\t  *  @param {Tone.Time} [time=now] the time when the note should start\n\t\t  *  @param {number} [velocity=1] the velocity of the note\n\t\t  */\n\t\tTone.MultiSampler.prototype.triggerAttackRelease = function(sample, duration, time, velocity){\n\t\t\tif (this.samples.hasOwnProperty(sample)){\n\t\t\t\ttime = this.toSeconds(time);\n\t\t\t\tduration = this.toSeconds(duration);\n\t\t\t\tvar samp = this.samples[sample];\n\t\t\t\tsamp.triggerAttack(0, time, velocity);\n\t\t\t\tsamp.triggerRelease(time + duration);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t *  sets all the samplers with these settings\n\t\t *  @param {object} params the parameters to be applied \n\t\t *                         to all internal samplers\n\t\t */\n\t\tTone.MultiSampler.prototype.set = function(params){\n\t\t\tfor (var samp in this.samples){\n\t\t\t\tthis.samples[samp].set(params);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t *  clean up\n\t\t */\n\t\tTone.MultiSampler.prototype.dispose = function(){\n\t\t\tTone.Instrument.prototype.dispose.call(this);\n\t\t\tfor (var samp in this.samples){\n\t\t\t\tthis.samples[samp].dispose();\n\t\t\t\tthis.samples[samp] = null;\n\t\t\t}\n\t\t\tthis.samples = null;\n\t\t};\n\n\t\treturn Tone.MultiSampler;\n\t});\n\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class  Noise generator. \n\t\t *          Uses looped noise buffers to save on performance. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Source}\n\t\t *  @param {string} type the noise type (white|pink|brown)\n\t\t *  @example\n\t\t *  var noise = new Tone.Noise(\"pink\");\n\t\t */\n\t\tTone.Noise = function(){\n\n\t\t\tvar options = this.optionsObject(arguments, [\"type\"], Tone.Noise.defaults);\n\t\t\tTone.Source.call(this, options);\n\n\t\t\t/**\n\t\t\t *  @private\n\t\t\t *  @type {AudioBufferSourceNode}\n\t\t\t */\n\t\t\tthis._source = null;\n\t\t\t\n\t\t\t/**\n\t\t\t *  the buffer\n\t\t\t *  @private\n\t\t\t *  @type {AudioBuffer}\n\t\t\t */\n\t\t\tthis._buffer = null;\n\n\t\t\tthis.type = options.type;\n\t\t};\n\n\t\tTone.extend(Tone.Noise, Tone.Source);\n\n\t\t/**\n\t\t *  the default parameters\n\t\t *\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.Noise.defaults = {\n\t\t\t\"type\" : \"white\",\n\t\t};\n\n\t\t/**\n\t\t * The type of the noise. Can be \"white\", \"brown\", or \"pink\". \n\t\t * @memberOf Tone.Noise#\n\t\t * @type {string}\n\t\t * @name type\n\t\t * @example\n\t\t * noise.type = \"white\";\n\t\t */\n\t\tObject.defineProperty(Tone.Noise.prototype, \"type\", {\n\t\t\tget : function(){\n\t\t\t\tif (this._buffer === _whiteNoise){\n\t\t\t\t\treturn \"white\";\n\t\t\t\t} else if (this._buffer === _brownNoise){\n\t\t\t\t\treturn \"brown\";\n\t\t\t\t} else if (this._buffer === _pinkNoise){\n\t\t\t\t\treturn \"pink\";\n\t\t\t\t}\n\t\t\t}, \n\t\t\tset : function(type){\n\t\t\t\tif (this.type !== type){\n\t\t\t\t\tswitch (type){\n\t\t\t\t\t\tcase \"white\" : \n\t\t\t\t\t\t\tthis._buffer = _whiteNoise;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"pink\" : \n\t\t\t\t\t\t\tthis._buffer = _pinkNoise;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"brown\" : \n\t\t\t\t\t\t\tthis._buffer = _brownNoise;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault : \n\t\t\t\t\t\t\tthis._buffer = _whiteNoise;\n\t\t\t\t\t}\n\t\t\t\t\t//if it's playing, stop and restart it\n\t\t\t\t\tif (this.state === Tone.Source.State.STARTED){\n\t\t\t\t\t\tvar now = this.now() + this.bufferTime;\n\t\t\t\t\t\t//remove the listener\n\t\t\t\t\t\tthis._source.onended = undefined;\n\t\t\t\t\t\tthis._stop(now);\n\t\t\t\t\t\tthis._start(now);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t *  internal start method\n\t\t *  \n\t\t *  @param {Tone.Time} time\n\t\t *  @private\n\t\t */\n\t\tTone.Noise.prototype._start = function(time){\t\t\n\t\t\tthis._source = this.context.createBufferSource();\n\t\t\tthis._source.buffer = this._buffer;\n\t\t\tthis._source.loop = true;\n\t\t\tthis.connectSeries(this._source, this.output);\n\t\t\tthis._source.start(this.toSeconds(time));\n\t\t\tthis._source.onended = this.onended;\n\t\t};\n\n\t\t/**\n\t\t *  internal stop method\n\t\t *  \n\t\t *  @param {Tone.Time} time\n\t\t *  @private\n\t\t */\n\t\tTone.Noise.prototype._stop = function(time){\n\t\t\tif (this._source){\n\t\t\t\tthis._source.stop(this.toSeconds(time));\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t *  dispose all the components\n\t\t *  @returns {Tone.Noise} `this`\n\t\t */\n\t\tTone.Noise.prototype.dispose = function(){\n\t\t\tTone.Source.prototype.dispose.call(this);\n\t\t\tif (this._source !== null){\n\t\t\t\tthis._source.disconnect();\n\t\t\t\tthis._source = null;\n\t\t\t}\n\t\t\tthis._buffer = null;\n\t\t\treturn this;\n\t\t};\n\n\n\t\t///////////////////////////////////////////////////////////////////////////\n\t\t// THE BUFFERS\n\t\t// borred heavily from http://noisehack.com/generate-noise-web-audio-api/\n\t\t///////////////////////////////////////////////////////////////////////////\n\n\t\t/**\n\t\t *\tstatic noise buffers\n\t\t *  \n\t\t *  @static\n\t\t *  @private\n\t\t *  @type {AudioBuffer}\n\t\t */\n\t\tvar _pinkNoise = null, _brownNoise = null, _whiteNoise = null;\n\n\t\tTone._initAudioContext(function(audioContext){\n\n\t\t\tvar sampleRate = audioContext.sampleRate;\n\t\t\t\n\t\t\t//four seconds per buffer\n\t\t\tvar bufferLength = sampleRate * 4;\n\n\t\t\t//fill the buffers\n\t\t\t_pinkNoise = (function() {\n\t\t\t\tvar buffer = audioContext.createBuffer(2, bufferLength, sampleRate);\n\t\t\t\tfor (var channelNum = 0; channelNum < buffer.numberOfChannels; channelNum++){\n\t\t\t\t\tvar channel = buffer.getChannelData(channelNum);\n\t\t\t\t\tvar b0, b1, b2, b3, b4, b5, b6;\n\t\t\t\t\tb0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n\t\t\t\t\tfor (var i = 0; i < bufferLength; i++) {\n\t\t\t\t\t\tvar white = Math.random() * 2 - 1;\n\t\t\t\t\t\tb0 = 0.99886 * b0 + white * 0.0555179;\n\t\t\t\t\t\tb1 = 0.99332 * b1 + white * 0.0750759;\n\t\t\t\t\t\tb2 = 0.96900 * b2 + white * 0.1538520;\n\t\t\t\t\t\tb3 = 0.86650 * b3 + white * 0.3104856;\n\t\t\t\t\t\tb4 = 0.55000 * b4 + white * 0.5329522;\n\t\t\t\t\t\tb5 = -0.7616 * b5 - white * 0.0168980;\n\t\t\t\t\t\tchannel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n\t\t\t\t\t\tchannel[i] *= 0.11; // (roughly) compensate for gain\n\t\t\t\t\t\tb6 = white * 0.115926;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn buffer;\n\t\t\t}());\n\n\t\t\t_brownNoise = (function() {\n\t\t\t\tvar buffer = audioContext.createBuffer(2, bufferLength, sampleRate);\n\t\t\t\tfor (var channelNum = 0; channelNum < buffer.numberOfChannels; channelNum++){\n\t\t\t\t\tvar channel = buffer.getChannelData(channelNum);\n\t\t\t\t\tvar lastOut = 0.0;\n\t\t\t\t\tfor (var i = 0; i < bufferLength; i++) {\n\t\t\t\t\t\tvar white = Math.random() * 2 - 1;\n\t\t\t\t\t\tchannel[i] = (lastOut + (0.02 * white)) / 1.02;\n\t\t\t\t\t\tlastOut = channel[i];\n\t\t\t\t\t\tchannel[i] *= 3.5; // (roughly) compensate for gain\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn buffer;\n\t\t\t})();\n\n\t\t\t_whiteNoise = (function(){\n\t\t\t\tvar buffer = audioContext.createBuffer(2, bufferLength, sampleRate);\n\t\t\t\tfor (var channelNum = 0; channelNum < buffer.numberOfChannels; channelNum++){\n\t\t\t\t\tvar channel = buffer.getChannelData(channelNum);\n\t\t\t\t\tfor (var i = 0; i < bufferLength; i++){\n\t\t\t\t\t\tchannel[i] =  Math.random() * 2 - 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn buffer;\n\t\t\t}());\n\t\t});\n\n\t\treturn Tone.Noise;\n\t});\n\tToneModule( \n\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class  the NoiseSynth is a single oscillator, monophonic synthesizer\n\t\t *          with a filter, and two envelopes (on the filter and the amplitude)\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} options the options available for the synth \n\t\t *                          see defaults below\n\t\t * @example\n\t\t * var noiseSynth = new Tone.NoiseSynth();\n\t\t */\n\t\tTone.NoiseSynth = function(options){\n\n\t\t\t//get the defaults\n\t\t\toptions = this.defaultArg(options, Tone.NoiseSynth.defaults);\n\t\t\tTone.Instrument.call(this);\n\n\t\t\t/**\n\t\t\t *  The noise source. Set the type by setting\n\t\t\t *  `noiseSynth.noise.type`. \n\t\t\t *  @type {Tone.Noise}\n\t\t\t */\n\t\t\tthis.noise = new Tone.Noise();\n\n\t\t\t/**\n\t\t\t *  The filter .\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t\t\tthis.filter = new Tone.Filter(options.filter);\n\n\t\t\t/**\n\t\t\t *  The filter envelope. \n\t\t\t *  @type {Tone.Envelope}\n\t\t\t */\n\t\t\tthis.filterEnvelope = new Tone.ScaledEnvelope(options.filterEnvelope);\n\n\t\t\t/**\n\t\t\t *  The amplitude envelope. \n\t\t\t *  @type {Tone.Envelope}\n\t\t\t */\n\t\t\tthis.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\n\t\t\t//connect the noise to the output\n\t\t\tthis.noise.chain(this.filter, this.envelope, this.output);\n\t\t\t//start the noise\n\t\t\tthis.noise.start();\n\t\t\t//connect the filter envelope\n\t\t\tthis.filterEnvelope.connect(this.filter.frequency);\n\t\t};\n\n\t\tTone.extend(Tone.NoiseSynth, Tone.Instrument);\n\n\t\t/**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.NoiseSynth.defaults = {\n\t\t\t\"noise\" : {\n\t\t\t\t\"type\" : \"white\"\n\t\t\t},\n\t\t\t\"filter\" : {\n\t\t\t\t\"Q\" : 6,\n\t\t\t\t\"type\" : \"highpass\",\n\t\t\t\t\"rolloff\" : -24\n\t\t\t},\n\t\t\t\"envelope\" : {\n\t\t\t\t\"attack\" : 0.005,\n\t\t\t\t\"decay\" : 0.1,\n\t\t\t\t\"sustain\" : 0.0,\n\t\t\t},\n\t\t\t\"filterEnvelope\" : {\n\t\t\t\t\"attack\" : 0.06,\n\t\t\t\t\"decay\" : 0.2,\n\t\t\t\t\"sustain\" : 0,\n\t\t\t\t\"release\" : 2,\n\t\t\t\t\"min\" : 20,\n\t\t\t\t\"max\" : 4000,\n\t\t\t\t\"exponent\" : 2\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t *  start the attack portion of the envelope\n\t\t *  @param {Tone.Time} [time=now] the time the attack should start\n\t\t *  @param {number} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.NoiseSynth} `this`\n\t\t */\n\t\tTone.NoiseSynth.prototype.triggerAttack = function(time, velocity){\n\t\t\t//the envelopes\n\t\t\tthis.envelope.triggerAttack(time, velocity);\n\t\t\tthis.filterEnvelope.triggerAttack(time);\t\n\t\t\treturn this;\t\n\t\t};\n\n\t\t/**\n\t\t *  start the release portion of the envelope\n\t\t *  @param {Tone.Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.NoiseSynth} `this`\n\t\t */\n\t\tTone.NoiseSynth.prototype.triggerRelease = function(time){\n\t\t\tthis.envelope.triggerRelease(time);\n\t\t\tthis.filterEnvelope.triggerRelease(time);\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  trigger the attack and then the release\n\t\t *  @param  {Tone.Time} duration the duration of the note\n\t\t *  @param  {Tone.Time} [time=now]     the time of the attack\n\t\t *  @param  {number} [velocity=1] the velocity\n\t\t *  @returns {Tone.NoiseSynth} `this`\n\t\t */\n\t\tTone.NoiseSynth.prototype.triggerAttackRelease = function(duration, time, velocity){\n\t\t\ttime = this.toSeconds(time);\n\t\t\tduration = this.toSeconds(duration);\n\t\t\tthis.triggerAttack(time, velocity);\n\t\t\tconsole.log(time + duration);\n\t\t\tthis.triggerRelease(time + duration);\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.NoiseSynth} `this`\n\t\t */\n\t\tTone.NoiseSynth.prototype.dispose = function(){\n\t\t\tTone.Instrument.prototype.dispose.call(this);\n\t\t\tthis.noise.dispose();\n\t\t\tthis.noise = null;\n\t\t\tthis.envelope.dispose();\n\t\t\tthis.envelope = null;\n\t\t\tthis.filterEnvelope.dispose();\n\t\t\tthis.filterEnvelope = null;\n\t\t\tthis.filter.dispose();\n\t\t\tthis.filter = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.NoiseSynth;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class Karplus-String string synthesis. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} options see the defaults\n\t\t *  @example\n\t\t *  var plucky = new Tone.PluckSynth();\n\t\t */\n\t\tTone.PluckSynth = function(options){\n\n\t\t\toptions = this.defaultArg(options, Tone.PluckSynth.defaults);\n\t\t\tTone.Instrument.call(this);\n\n\t\t\t/**\n\t\t\t *  @type {Tone.Noise}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._noise = new Tone.Noise(\"pink\");\n\n\t\t\t/**\n\t\t\t *  The amount of noise at the attack. \n\t\t\t *  Nominal range of [0.1, 20]\n\t\t\t *  @type {number}\n\t\t\t */\n\t\t\tthis.attackNoise = 1;\n\n\t\t\t/**\n\t\t\t *  the LFCF\n\t\t\t *  @type {Tone.LowpassCombFilter}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._lfcf = new Tone.LowpassCombFilter(1 / 440);\n\n\t\t\t/**\n\t\t\t *  the resonance control\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.resonance = this._lfcf.resonance;\n\n\t\t\t/**\n\t\t\t *  the dampening control. i.e. the lowpass filter frequency of the comb filter\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.dampening = this._lfcf.dampening;\n\n\t\t\t//connections\n\t\t\tthis._noise.connect(this._lfcf);\n\t\t\tthis._lfcf.connect(this.output);\n\t\t};\n\n\t\tTone.extend(Tone.PluckSynth, Tone.Instrument);\n\n\t\t/**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.PluckSynth.defaults = {\n\t\t\t\"attackNoise\" : 1,\n\t\t\t\"dampening\" : 4000,\n\t\t\t\"resonance\" : 0.5\n\t\t};\n\n\t\t/**\n\t\t *  trigger the attack portion\n\t\t *  @param {string|number} note the note name or frequency\n\t\t *  @param {Tone.Time} [time=now] the time of the note\n\t\t *  @returns {Tone.PluckSynth} `this`\n\t\t */\n\t\tTone.PluckSynth.prototype.triggerAttack = function(note, time) {\n\t\t\tnote = this.toFrequency(note);\n\t\t\ttime = this.toSeconds(time);\n\t\t\tvar delayAmount = 1 / note;\n\t\t\tthis._lfcf.setDelayTimeAtTime(delayAmount, time);\t\t\n\t\t\tthis._noise.start(time);\n\t\t\tthis._noise.stop(time + delayAmount * this.attackNoise);\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.PluckSynth} `this`\n\t\t */\n\t\tTone.PluckSynth.prototype.dispose = function(){\n\t\t\tTone.Instrument.prototype.dispose.call(this);\n\t\t\tthis._noise.dispose();\n\t\t\tthis._lfcf.dispose();\n\t\t\tthis._noise = null;\n\t\t\tthis._lfcf = null;\n\t\t\tthis.dampening = null;\n\t\t\tthis.resonance = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.PluckSynth;\n\t});\n\tToneModule( \n\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class  Creates a polyphonic synthesizer out of \n\t\t *          the monophonic voice which is passed in. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {number|Object} [polyphony=4] the number of voices to create\n\t\t *  @param {function} [voice=Tone.MonoSynth] the constructor of the voices\n\t\t *                                            uses Tone.MonoSynth by default\n\t\t *  @example\n\t\t *  //a polysynth composed of 6 Voices of MonoSynth\n\t\t *  var synth = new Tone.PolySynth(6, Tone.MonoSynth);\n\t\t *  //set a MonoSynth preset\n\t\t *  synth.setPreset(\"Pianoetta\");\n\t\t */\n\t\tTone.PolySynth = function(){\n\n\t\t\tTone.Instrument.call(this);\n\n\t\t\tvar options = this.optionsObject(arguments, [\"polyphony\", \"voice\"], Tone.PolySynth.defaults);\n\n\t\t\t/**\n\t\t\t *  the array of voices\n\t\t\t *  @type {Array}\n\t\t\t */\n\t\t\tthis.voices = new Array(options.polyphony);\n\n\t\t\t/**\n\t\t\t *  the queue of free voices\n\t\t\t *  @private\n\t\t\t *  @type {Array}\n\t\t\t */\n\t\t\tthis._freeVoices = [];\n\n\t\t\t/**\n\t\t\t *  keeps track of which notes are down\n\t\t\t *  @private\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t\tthis._activeVoices = {};\n\n\t\t\t//create the voices\n\t\t\tfor (var i = 0; i < options.polyphony; i++){\n\t\t\t\tvar v = new options.voice(arguments[2], arguments[3]);\n\t\t\t\tthis.voices[i] = v;\n\t\t\t\tv.connect(this.output);\n\t\t\t}\n\n\t\t\t//make a copy of the voices\n\t\t\tthis._freeVoices = this.voices.slice(0);\n\t\t\t//get the prototypes and properties\n\t\t};\n\n\t\tTone.extend(Tone.PolySynth, Tone.Instrument);\n\n\t\t/**\n\t\t *  the defaults\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t\tTone.PolySynth.defaults = {\n\t\t\t\"polyphony\" : 4,\n\t\t\t\"voice\" : Tone.MonoSynth\n\t\t};\n\n\t\t/**\n\t\t * Pull properties from the \n\t\t */\n\n\t\t/**\n\t\t *  trigger the attack\n\t\t *  @param  {string|number|Object|Array} value the value of the note(s) to start.\n\t\t *                                             if the value is an array, it will iterate\n\t\t *                                             over the array to play each of the notes\n\t\t *  @param  {Tone.Time} [time=now]  the start time of the note\n\t\t *  @param {number} [velocity=1] the velocity of the note\n\t\t *  @returns {Tone.PolySynth} `this`\n\t\t */\n\t\tTone.PolySynth.prototype.triggerAttack = function(value, time, velocity){\n\t\t\tif (!Array.isArray(value)){\n\t\t\t\tvalue = [value];\n\t\t\t}\n\t\t\tfor (var i = 0; i < value.length; i++){\n\t\t\t\tvar val = value[i];\n\t\t\t\tvar stringified = JSON.stringify(val);\n\t\t\t\tif (this._activeVoices[stringified]){\n\t\t\t\t\tthis._activeVoices[stringified].triggerAttack(val, time, velocity);\n\t\t\t\t} else if (this._freeVoices.length > 0){\n\t\t\t\t\tvar voice = this._freeVoices.shift();\n\t\t\t\t\tvoice.triggerAttack(val, time, velocity);\n\t\t\t\t\tthis._activeVoices[stringified] = voice;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  trigger the attack and release after the specified duration\n\t\t *  \n\t\t *  @param  {string|number|Object|Array} value the note(s).\n\t\t *                                             if the value is an array, it will iterate\n\t\t *                                             over the array to play each of the notes\n\t\t *  @param  {Tone.Time} duration the duration of the note\n\t\t *  @param  {Tone.Time} [time=now]     if no time is given, defaults to now\n\t\t *  @param  {number} [velocity=1] the velocity of the attack (0-1)\n\t\t *  @returns {Tone.PolySynth} `this`\n\t\t */\n\t\tTone.PolySynth.prototype.triggerAttackRelease = function(value, duration, time, velocity){\n\t\t\ttime = this.toSeconds(time);\n\t\t\tthis.triggerAttack(value, time, velocity);\n\t\t\tthis.triggerRelease(value, time + this.toSeconds(duration));\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  trigger the release of a note\n\t\t *  @param  {string|number|Object|Array} value the value of the note(s) to release.\n\t\t *                                             if the value is an array, it will iterate\n\t\t *                                             over the array to play each of the notes\n\t\t *  @param  {Tone.Time} [time=now]  the release time of the note\n\t\t *  @returns {Tone.PolySynth} `this`\n\t\t */\n\t\tTone.PolySynth.prototype.triggerRelease = function(value, time){\n\t\t\tif (!Array.isArray(value)){\n\t\t\t\tvalue = [value];\n\t\t\t}\n\t\t\tfor (var i = 0; i < value.length; i++){\n\t\t\t\t//get the voice\n\t\t\t\tvar stringified = JSON.stringify(value[i]);\n\t\t\t\tvar voice = this._activeVoices[stringified];\n\t\t\t\tif (voice){\n\t\t\t\t\tvoice.triggerRelease(time);\n\t\t\t\t\tthis._freeVoices.push(voice);\n\t\t\t\t\tthis._activeVoices[stringified] = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  set the options on all of the voices\n\t\t *  @param {Object} params \n\t\t *  @returns {Tone.PolySynth} `this`\n\t\t */\n\t\tTone.PolySynth.prototype.set = function(params){\n\t\t\tfor (var i = 0; i < this.voices.length; i++){\n\t\t\t\tthis.voices[i].set(params);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  get a group of parameters\n\t\t *  @param {Array=} params the parameters to get, otherwise will return \n\t\t *  \t\t\t\t\t   all available.\n\t\t */\n\t\tTone.PolySynth.prototype.get = function(params){\n\t\t\treturn this.voices[0].get(params);\n\t\t};\n\n\t\t/**\n\t\t *  @param {string} presetName the preset name\n\t\t *  @returns {Tone.PolySynth} `this`\n\t\t */\n\t\tTone.PolySynth.prototype.setPreset = function(presetName){\n\t\t\tfor (var i = 0; i < this.voices.length; i++){\n\t\t\t\tthis.voices[i].setPreset(presetName);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.PolySynth} `this`\n\t\t */\n\t\tTone.PolySynth.prototype.dispose = function(){\n\t\t\tTone.Instrument.prototype.dispose.call(this);\n\t\t\tfor (var i = 0; i < this.voices.length; i++){\n\t\t\t\tthis.voices[i].dispose();\n\t\t\t\tthis.voices[i] = null;\n\t\t\t}\n\t\t\tthis.voices = null;\n\t\t\tthis._activeVoices = null;\n\t\t\tthis._freeVoices = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.PolySynth;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t * \t@class  Clip the incoming signal so that the output is always between min and max\n\t\t * \t\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {number} min the minimum value of the outgoing signal\n\t\t *  @param {number} max the maximum value of the outgoing signal\n\t\t *  @example\n\t\t *  var clip = new Tone.Clip(0.5, 1);\n\t\t *  var osc = new Tone.Oscillator().connect(clip);\n\t\t *  //clips the output of the oscillator to between 0.5 and 1.\n\t\t */\n\t\tTone.Clip = function(min, max){\n\t\t\t//make sure the args are in the right order\n\t\t\tif (min > max){\n\t\t\t\tvar tmp = min;\n\t\t\t\tmin = max;\n\t\t\t\tmax = tmp;\n\t\t\t}\n\t\t\t\n\t\t\t/**\n\t\t\t *  The min clip value\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.min = this.input = new Tone.Min(max);\n\n\t\t\t/**\n\t\t\t *  The max clip value\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.max = this.output = new Tone.Max(min);\n\n\t\t\tthis.min.connect(this.max);\n\t\t};\n\n\t\tTone.extend(Tone.Clip, Tone.SignalBase);\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.Clip} `this`\n\t\t */\n\t\tTone.Clip.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis.min.dispose();\n\t\t\tthis.min = null;\n\t\t\tthis.max.dispose();\n\t\t\tthis.max = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.Clip;\n\t});\n\tToneModule( \n\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  this is the maximum value that the divide can handle\t\n\t\t *  @type {number}\n\t\t *  @const\n\t\t */\n\t\tvar MAX_VALUE = Math.pow(2, 13);\n\n\t\t/**\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t\tvar guessCurve = new Array(MAX_VALUE);\n\t\t//set the value\n\t\tfor (var i = 0; i < guessCurve.length; i++){\n\t\t\tvar normalized = (i / (guessCurve.length - 1)) * 2 - 1;\n\t\t\tif (normalized === 0){\n\t\t\t\tguessCurve[i] = 0;\n\t\t\t} else {\n\t\t\t\tguessCurve[i] = 1 / (normalized * MAX_VALUE);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t *  @class Compute the inverse of the input.\n\t\t *         Uses this approximation algorithm: \n\t\t *         http://en.wikipedia.org/wiki/Multiplicative_inverse#Algorithms\n\t\t *\n\t\t *  @deprecated\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {number} [precision=3] the precision of the calculation\n\t\t */\n\t\tTone.Inverse = function(precision){\n\n\t\t\tconsole.warn(\"Tone.Inverse has been deprecated. Multiply is always more efficient than dividing.\");\n\n\t\t\tTone.call(this);\n\n\t\t\tprecision = this.defaultArg(precision, 3);\n\n\t\t\t/**\n\t\t\t *  a constant generator of the value 2\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis._two = new Tone.Signal(2);\n\n\t\t\t/**\n\t\t\t *  starting guess is 0.1 times the input\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._guessMult = new Tone.Multiply(1/MAX_VALUE);\n\n\t\t\t/**\n\t\t\t *  produces a starting guess based on the input\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._guess = new Tone.WaveShaper(guessCurve);\n\t\t\tthis.input.chain(this._guessMult, this._guess);\n\n\t\t\t/**\n\t\t\t *  the array of inverse helpers\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._inverses = new Array(precision);\n\n\t\t\t//create the helpers\n\t\t\tfor (var i = 0; i < precision; i++){\n\t\t\t\tvar guess;\n\t\t\t\tif (i === 0){\n\t\t\t\t\tguess = this._guess;\n\t\t\t\t} else {\n\t\t\t\t\tguess = this._inverses[i-1];\n\t\t\t\t}\n\t\t\t\tvar inv = new InverseHelper(guess, this._two);\n\t\t\t\tthis.input.connect(inv);\n\t\t\t\tthis._inverses[i] = inv;\n\t\t\t}\n\t\t\tthis._inverses[precision-1].connect(this.output);\n\t\t};\n\n\t\tTone.extend(Tone.Inverse, Tone.SignalBase);\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.Inverse} `this`\n\t\t */\n\t\tTone.Inverse.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tfor (var i = 0; i < this._inverses.length; i++){\n\t\t\t\tthis._inverses[i].dispose();\n\t\t\t\tthis._inverses[i] = null;\n\t\t\t}\n\t\t\tthis._inverses = null;\n\t\t\tthis._two.dispose();\n\t\t\tthis._two = null;\n\t\t\tthis._guessMult.dispose();\n\t\t\tthis._guessMult = null;\n\t\t\tthis._guess.disconnect();\n\t\t\tthis._guess = null;\n\t\t\treturn this;\n\t\t};\n\n\t\t// BEGIN INVERSE HELPER ///////////////////////////////////////////////////\n\n\t\t/**\n\t\t *  internal helper function for computing the inverse of a signal\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @private\n\t\t */\n\t\tvar InverseHelper = function(guess, two){\n\t\t\tthis._outerMultiply = new Tone.Multiply();\n\t\t\tthis._innerMultiply = new Tone.Multiply();\n\t\t\tthis._subtract = new Tone.Subtract();\n\t\t\t//connections\n\t\t\tguess.connect(this._innerMultiply, 0, 1);\n\t\t\ttwo.connect(this._subtract, 0, 0);\n\t\t\tthis._innerMultiply.connect(this._subtract, 0, 1);\n\t\t\tthis._subtract.connect(this._outerMultiply, 0, 1);\n\t\t\tguess.connect(this._outerMultiply, 0, 0);\n\t\t\tthis.output = this._outerMultiply;\n\t\t\tthis.input = this._innerMultiply;\n\t\t};\n\n\t\tTone.extend(InverseHelper);\n\n\t\tInverseHelper.prototype.dispose = function(){\n\t\t\tthis._outerMultiply.dispose();\n\t\t\tthis._outerMultiply = null;\n\t\t\tthis._innerMultiply.dispose();\n\t\t\tthis._innerMultiply = null;\n\t\t\tthis._subtract.dispose();\n\t\t\tthis._subtract = null;\n\t\t};\n\t\t\n\t\t// END INVERSE HELPER /////////////////////////////////////////////////////\n\n\t\treturn Tone.Inverse;\n\t});\n\tToneModule( \n\tfunction(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class Divide by a value or signal. \n\t\t *         input 0: numerator. input 1: divisor. \n\t\t *\n\t\t *  @deprecated\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {number=} divisor if no value is provided, Tone.Divide will divide the first\n\t\t *                         and second inputs. \n\t\t *  @param {number} [precision=3] the precision of the calculation\n\t\t */\n\t\tTone.Divide = function(divisor, precision){\n\n\t\t\tconsole.warn(\"Tone.Divide has been deprecated. If possible, it's much more efficient to multiply by the inverse value.\");\n\n\t\t\tTone.call(this, 2, 0);\n\n\t\t\t/**\n\t\t\t *  the denominator value\n\t\t\t *  @type {Tone.Signal}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._denominator = null;\n\n\t\t\t/**\n\t\t\t *  the inverse\n\t\t\t *  @type {Tone}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._inverse = new Tone.Inverse(precision);\n\n\t\t\t/**\n\t\t\t *  multiply input 0 by the inverse\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._mult = new Tone.Multiply();\n\n\t\t\tif (isFinite(divisor)){\n\t\t\t\tthis._denominator = new Tone.Signal(divisor);\n\t\t\t\tthis._denominator.connect(this._inverse);\n\t\t\t}\n\t\t\tthis.input[1] = this._inverse;\n\t\t\tthis._inverse.connect(this._mult, 0, 1);\n\t\t\tthis.input[0] = this.output = this._mult.input[0];\n\t\t};\n\n\t\tTone.extend(Tone.Divide, Tone.SignalBase);\n\n\t\t/**\n\t\t * The value being divided from the incoming signal. Note, that\n\t\t * if Divide was constructed without a divisor, it expects\n\t\t * that the signals to numberator will be connected to input 0 and \n\t\t * the denominator to input 1 and therefore will throw an error when \n\t\t * trying to set/get the value. \n\t\t * \n\t\t * @memberOf Tone.Divide#\n\t\t * @type {number}\n\t\t * @name value\n\t\t */\n\t\tObject.defineProperty(Tone.Divide.prototype, \"value\", {\n\t\t\tget : function(){\n\t\t\t\tif (this._denominator !== null){\n\t\t\t\t\treturn this._denominator.value;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(\"cannot switch from signal to number\");\n\t\t\t\t}\n\t\t\t},\n\t\t\tset : function(value){\n\t\t\t\tif (this._denominator !== null){\n\t\t\t\t\tthis._denominator.value = value;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(\"cannot switch from signal to number\");\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.Divide} `this`\n\t\t */\n\t\tTone.Divide.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tif (this._denominator){\n\t\t\t\tthis._denominator.dispose();\n\t\t\t\tthis._denominator = null;\n\t\t\t}\n\t\t\tthis._inverse.dispose();\n\t\t\tthis._inverse = null;\n\t\t\tthis._mult.dispose();\n\t\t\tthis._mult = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.Divide;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class Normalize takes an input min and max and maps it linearly to [0,1]\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @example\n\t\t *  var norm = new Tone.Normalize(2, 4);\n\t\t *  var sig = new Tone.Signal(3).connect(norm);\n\t\t *  //output of norm is 0.5. \n\t\t */\n\t\tTone.Normalize = function(inputMin, inputMax){\n\n\t\t\t/**\n\t\t\t *  the min input value\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._inputMin = this.defaultArg(inputMin, 0);\n\n\t\t\t/**\n\t\t\t *  the max input value\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._inputMax = this.defaultArg(inputMax, 1);\n\n\t\t\t/**\n\t\t\t *  subtract the min from the input\n\t\t\t *  @type {Tone.Add}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._sub = this.input = new Tone.Add(0);\n\n\t\t\t/**\n\t\t\t *  divide by the difference between the input and output\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._div = this.output = new Tone.Multiply(1);\n\n\t\t\tthis._sub.connect(this._div);\n\t\t\tthis._setRange();\n\t\t};\n\n\t\tTone.extend(Tone.Normalize, Tone.SignalBase);\n\n\t\t/**\n\t\t * The minimum value the input signal will reach.\n\t\t * @memberOf Tone.Normalize#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t\tObject.defineProperty(Tone.Normalize.prototype, \"min\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._inputMin;\n\t\t\t},\n\t\t\tset : function(min){\n\t\t\t\tthis._inputMin = min;\n\t\t\t\tthis._setRange();\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * The maximum value the input signal will reach.\n\t\t * @memberOf Tone.Normalize#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t\tObject.defineProperty(Tone.Normalize.prototype, \"max\", {\n\t\t\tget : function(){\n\t\t\t\treturn this._inputMax;\n\t\t\t},\n\t\t\tset : function(max){\n\t\t\t\tthis._inputMax = max;\n\t\t\t\tthis._setRange();\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t *  set the values\n\t\t *  @private\n\t\t */\n\t\tTone.Normalize.prototype._setRange = function() {\n\t\t\tthis._sub.value = -this._inputMin;\n\t\t\tthis._div.value = 1 / (this._inputMax - this._inputMin);\n\t\t};\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.Normalize} `this`\n\t\t */\n\t\tTone.Normalize.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis._sub.dispose();\n\t\t\tthis._sub = null;\n\t\t\tthis._div.dispose();\n\t\t\tthis._div = null;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Tone.Normalize;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class Route a single input to the specified output\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {number} [outputCount=2] the number of inputs the switch accepts\n\t\t *  @example\n\t\t *  var route = new Tone.Route(4);\n\t\t *  var signal = new Tone.Signal(3).connect(route);\n\t\t *  route.gate.value = 0;\n\t\t *  //signal is routed through output 0\n\t\t *  route.gate.value = 3;\n\t\t *  //signal is now routed through output 3\n\t\t */\n\t\tTone.Route = function(outputCount){\n\n\t\t\toutputCount = this.defaultArg(outputCount, 2);\n\t\t\tTone.call(this, 1, outputCount);\n\n\t\t\t/**\n\t\t\t *  the control signal\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.gate = new Tone.Signal(0);\n\n\t\t\t//make all the inputs and connect them\n\t\t\tfor (var i = 0; i < outputCount; i++){\n\t\t\t\tvar routeGate = new RouteGate(i);\n\t\t\t\tthis.output[i] = routeGate;\n\t\t\t\tthis.gate.connect(routeGate.selecter);\n\t\t\t\tthis.input.connect(routeGate);\n\t\t\t}\n\t\t};\n\n\t\tTone.extend(Tone.Route, Tone.SignalBase);\n\n\t\t/**\n\t\t *  routes the signal to one of the outputs and close the others\n\t\t *  @param {number} [which=0] open one of the gates (closes the other)\n\t\t *  @param {Tone.Time} time the time when the switch will open\n\t\t *  @returns {Tone.Route} `this`\n\t\t */\n\t\tTone.Route.prototype.select = function(which, time){\n\t\t\t//make sure it's an integer\n\t\t\twhich = Math.floor(which);\n\t\t\tthis.gate.setValueAtTime(which, this.toSeconds(time));\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  dispose method\n\t\t *  @returns {Tone.Route} `this`\n\t\t */\n\t\tTone.Route.prototype.dispose = function(){\n\t\t\tthis.gate.dispose();\n\t\t\tfor (var i = 0; i < this.output.length; i++){\n\t\t\t\tthis.output[i].dispose();\n\t\t\t\tthis.output[i] = null;\n\t\t\t}\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis.gate = null;\n\t\t\treturn this;\n\t\t}; \n\n\t\t////////////START HELPER////////////\n\n\t\t/**\n\t\t *  helper class for Tone.Route representing a single gate\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @private\n\t\t */\n\t\tvar RouteGate = function(num){\n\n\t\t\t/**\n\t\t\t *  the selector\n\t\t\t *  @type {Tone.Equal}\n\t\t\t */\n\t\t\tthis.selecter = new Tone.Equal(num);\n\n\t\t\t/**\n\t\t\t *  the gate\n\t\t\t *  @type {GainNode}\n\t\t\t */\n\t\t\tthis.gate = this.input = this.output = this.context.createGain();\n\n\t\t\t//connect the selecter to the gate gain\n\t\t\tthis.selecter.connect(this.gate.gain);\n\t\t};\n\n\t\tTone.extend(RouteGate);\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @private\n\t\t */\n\t\tRouteGate.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis.selecter.dispose();\n\t\t\tthis.gate.disconnect();\n\t\t\tthis.selecter = null;\n\t\t\tthis.gate = null;\n\t\t};\n\n\t\t////////////END HELPER////////////\n\n\t\t//return Tone.Route\n\t\treturn Tone.Route;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class  When the gate is set to 0, the input signal does not pass through to the output. \n\t\t *          If the gate is set to 1, the input signal passes through.\n\t\t *          the gate is initially closed.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @example\n\t\t *  var sigSwitch = new Tone.Switch();\n\t\t *  var signal = new Tone.Signal(2).connect(sigSwitch);\n\t\t *  //initially no output from sigSwitch\n\t\t *  sigSwitch.gate.value = 1;\n\t\t *  //open the switch and allow the signal through\n\t\t *  //the output of sigSwitch is now 2. \n\t\t */\n\t\tTone.Switch = function(){\n\t\t\tTone.call(this);\n\n\t\t\t/**\n\t\t\t *  the control signal for the switch\n\t\t\t *  when this value is 0, the input signal will not pass through,\n\t\t\t *  when it is high (1), the input signal will pass through.\n\t\t\t *  \n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t\t\tthis.gate = new Tone.Signal(0);\n\n\t\t\t/**\n\t\t\t *  thresh the control signal to either 0 or 1\n\t\t\t *  @type {Tone.GreaterThan}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._thresh = new Tone.GreaterThan(0.5);\n\n\t\t\tthis.input.connect(this.output);\n\t\t\tthis.gate.chain(this._thresh, this.output.gain);\n\t\t};\n\n\t\tTone.extend(Tone.Switch, Tone.SignalBase);\n\n\t\t/**\n\t\t *  open the switch at a specific time\n\t\t *\n\t\t *  @param {Tone.Time=} time the time when the switch will be open\n\t\t *  @returns {Tone.Switch} `this`\n\t\t *  @example\n\t\t *  //open the switch to let the signal through\n\t\t *  sigSwitch.open();\n\t\t */\n\t\tTone.Switch.prototype.open = function(time){\n\t\t\tthis.gate.setValueAtTime(1, this.toSeconds(time));\n\t\t\treturn this;\n\t\t}; \n\n\t\t/**\n\t\t *  close the switch at a specific time\n\t\t *\n\t\t *  @param {Tone.Time} time the time when the switch will be open\n\t\t *  @returns {Tone.Switch} `this`\n\t\t *  @example\n\t\t *  //close the switch a half second from now\n\t\t *  sigSwitch.close(\"+0.5\");\n\t\t */\n\t\tTone.Switch.prototype.close = function(time){\n\t\t\tthis.gate.setValueAtTime(0, this.toSeconds(time));\n\t\t\treturn this;\n\t\t}; \n\n\t\t/**\n\t\t *  clean up\n\t\t *  @returns {Tone.Switch} `this`\n\t\t */\n\t\tTone.Switch.prototype.dispose = function(){\n\t\t\tTone.prototype.dispose.call(this);\n\t\t\tthis.gate.dispose();\n\t\t\tthis._thresh.dispose();\n\t\t\tthis.gate = null;\n\t\t\tthis._thresh = null;\n\t\t\treturn this;\n\t\t}; \n\n\t\treturn Tone.Switch;\n\t});\n\tToneModule( function(Tone){\n\n\t\t\n\n\t\t/**\n\t\t *  @class  WebRTC Microphone. \n\t\t *          CHROME ONLY (for now) because of the \n\t\t *          use of the MediaStreamAudioSourceNode\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Source}\n\t\t *  @param {number=} inputNum \n\t\t */\n\t\tTone.Microphone = function(inputNum){\n\t\t\tTone.Source.call(this);\n\n\t\t\t/**\n\t\t\t *  @type {MediaStreamAudioSourceNode}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._mediaStream = null;\n\t\t\t\n\t\t\t/**\n\t\t\t *  @type {LocalMediaStream}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._stream = null;\n\t\t\t\n\t\t\t/**\n\t\t\t *  @type {Object}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._constraints = {\"audio\" : true};\n\n\t\t\t//get the option\n\t\t\tvar self = this;\n\t\t\tMediaStreamTrack.getSources(function (media_sources) {\n\t\t\t\tif (inputNum < media_sources.length){\n\t\t\t\t\tself.constraints.audio = {\n\t\t\t\t\t\toptional : [{ sourceId: media_sources[inputNum].id}]\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\t\t\n\t\t};\n\n\t\tTone.extend(Tone.Microphone, Tone.Source);\n\n\t\t/**\n\t\t *  start the stream. \n\t\t *  @private\n\t\t */\n\t\tTone.Microphone.prototype._start = function(){\n\t\t\tnavigator.getUserMedia(this._constraints, \n\t\t\t\tthis._onStream.bind(this), this._onStreamError.bind(this));\n\t\t};\n\n\t\t/**\n\t\t *  stop the stream. \n\t\t *  @private\n\t\t */\n\t\tTone.Microphone.prototype._stop = function(){\n\t\t\tthis._stream.stop();\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t *  called when the stream is successfully setup\n\t\t *  @param   {LocalMediaStream} stream \n\t\t *  @private\n\t\t */\n\t\tTone.Microphone.prototype._onStream = function(stream) {\n\t\t\tthis._stream = stream;\n\t\t\t// Wrap a MediaStreamSourceNode around the live input stream.\n\t\t\tthis._mediaStream = this.context.createMediaStreamSource(stream);\n\t\t\tthis._mediaStream.connect(this.output);\n\t\t};\n\n\t\t/**\n\t\t *  called on error\n\t\t *  @param   {Error} e \n\t\t *  @private\n\t\t */\n\t\tTone.Microphone.prototype._onStreamError = function(e) {\n\t\t\tconsole.error(e);\n\t\t};\n\n\t\t/**\n\t\t *  clean up\n\t\t *  @return {Tone.Microphone} `this`\n\t\t */\n\t\tTone.Microphone.prototype.dispose = function() {\n\t\t\tTone.Source.prototype.dispose.call(this);\n\t\t\tif (this._mediaStream){\n\t\t\t\tthis._mediaStream.disconnect();\n\t\t\t\tthis._mediaStream = null;\n\t\t\t}\n\t\t\tthis._stream = null;\n\t\t\tthis._constraints = null;\n\t\t\treturn this;\n\t\t};\n\n\t\t//polyfill\n\t\tnavigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || \n\t\t\tnavigator.mozGetUserMedia || navigator.msGetUserMedia;\n\n\t\treturn Tone.Microphone;\n\t});\n\n\t//requirejs compatibility\n\tif ( true ) {\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t\t\treturn Tone;\n\t\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {\n\t\troot.Tone = Tone;\n\t}\n} (this));\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/tone/build/Tone.js\n ** module id = 7\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///../~/tone/build/Tone.js?");

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global, module) {(function() {\n  var Bacon, BufferingSource, Bus, CompositeUnsubscribe, ConsumingSource, Desc, Dispatcher, End, Error, Event, EventStream, Exception, Initial, Next, None, Observable, Property, PropertyDispatcher, Some, Source, UpdateBarrier, _, addPropertyInitValueToStream, assert, assertArray, assertEventStream, assertFunction, assertNoArguments, assertObservable, assertString, cloneArray, constantToFunction, containsDuplicateDeps, convertArgsToFunction, describe, endEvent, eventIdCounter, eventMethods, findDeps, findHandlerMethods, flatMap_, former, idCounter, initialEvent, isArray, isFieldKey, isObservable, latter, liftCallback, makeFunction, makeFunctionArgs, makeFunction_, makeObservable, makeSpawner, nextEvent, nop, partiallyApplied, recursionDepth, ref, registerObs, spys, toCombinator, toEvent, toFieldExtractor, toFieldKey, toOption, toSimpleExtractor, valueAndEnd, withDescription, withMethodCallSupport,\n    hasProp = {}.hasOwnProperty,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    slice = [].slice,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\n  Bacon = {\n    toString: function() {\n      return \"Bacon\";\n    }\n  };\n\n  Bacon.version = '0.7.53';\n\n  Exception = (typeof global !== \"undefined\" && global !== null ? global : this).Error;\n\n  nop = function() {};\n\n  latter = function(_, x) {\n    return x;\n  };\n\n  former = function(x, _) {\n    return x;\n  };\n\n  cloneArray = function(xs) {\n    return xs.slice(0);\n  };\n\n  assert = function(message, condition) {\n    if (!condition) {\n      throw new Exception(message);\n    }\n  };\n\n  assertEventStream = function(event) {\n    if (!(event instanceof EventStream)) {\n      throw new Exception(\"not an EventStream : \" + event);\n    }\n  };\n\n  assertObservable = function(event) {\n    if (!(event instanceof Observable)) {\n      throw new Exception(\"not an Observable : \" + event);\n    }\n  };\n\n  assertFunction = function(f) {\n    return assert(\"not a function : \" + f, _.isFunction(f));\n  };\n\n  isArray = function(xs) {\n    return xs instanceof Array;\n  };\n\n  isObservable = function(x) {\n    return x instanceof Observable;\n  };\n\n  assertArray = function(xs) {\n    if (!isArray(xs)) {\n      throw new Exception(\"not an array : \" + xs);\n    }\n  };\n\n  assertNoArguments = function(args) {\n    return assert(\"no arguments supported\", args.length === 0);\n  };\n\n  assertString = function(x) {\n    if (typeof x !== \"string\") {\n      throw new Exception(\"not a string : \" + x);\n    }\n  };\n\n  _ = {\n    indexOf: Array.prototype.indexOf ? function(xs, x) {\n      return xs.indexOf(x);\n    } : function(xs, x) {\n      var i, j, len1, y;\n      for (i = j = 0, len1 = xs.length; j < len1; i = ++j) {\n        y = xs[i];\n        if (x === y) {\n          return i;\n        }\n      }\n      return -1;\n    },\n    indexWhere: function(xs, f) {\n      var i, j, len1, y;\n      for (i = j = 0, len1 = xs.length; j < len1; i = ++j) {\n        y = xs[i];\n        if (f(y)) {\n          return i;\n        }\n      }\n      return -1;\n    },\n    head: function(xs) {\n      return xs[0];\n    },\n    always: function(x) {\n      return function() {\n        return x;\n      };\n    },\n    negate: function(f) {\n      return function(x) {\n        return !f(x);\n      };\n    },\n    empty: function(xs) {\n      return xs.length === 0;\n    },\n    tail: function(xs) {\n      return xs.slice(1, xs.length);\n    },\n    filter: function(f, xs) {\n      var filtered, j, len1, x;\n      filtered = [];\n      for (j = 0, len1 = xs.length; j < len1; j++) {\n        x = xs[j];\n        if (f(x)) {\n          filtered.push(x);\n        }\n      }\n      return filtered;\n    },\n    map: function(f, xs) {\n      var j, len1, results, x;\n      results = [];\n      for (j = 0, len1 = xs.length; j < len1; j++) {\n        x = xs[j];\n        results.push(f(x));\n      }\n      return results;\n    },\n    each: function(xs, f) {\n      var key, value;\n      for (key in xs) {\n        value = xs[key];\n        f(key, value);\n      }\n      return void 0;\n    },\n    toArray: function(xs) {\n      if (isArray(xs)) {\n        return xs;\n      } else {\n        return [xs];\n      }\n    },\n    contains: function(xs, x) {\n      return _.indexOf(xs, x) !== -1;\n    },\n    id: function(x) {\n      return x;\n    },\n    last: function(xs) {\n      return xs[xs.length - 1];\n    },\n    all: function(xs, f) {\n      var j, len1, x;\n      if (f == null) {\n        f = _.id;\n      }\n      for (j = 0, len1 = xs.length; j < len1; j++) {\n        x = xs[j];\n        if (!f(x)) {\n          return false;\n        }\n      }\n      return true;\n    },\n    any: function(xs, f) {\n      var j, len1, x;\n      if (f == null) {\n        f = _.id;\n      }\n      for (j = 0, len1 = xs.length; j < len1; j++) {\n        x = xs[j];\n        if (f(x)) {\n          return true;\n        }\n      }\n      return false;\n    },\n    without: function(x, xs) {\n      return _.filter((function(y) {\n        return y !== x;\n      }), xs);\n    },\n    remove: function(x, xs) {\n      var i;\n      i = _.indexOf(xs, x);\n      if (i >= 0) {\n        return xs.splice(i, 1);\n      }\n    },\n    fold: function(xs, seed, f) {\n      var j, len1, x;\n      for (j = 0, len1 = xs.length; j < len1; j++) {\n        x = xs[j];\n        seed = f(seed, x);\n      }\n      return seed;\n    },\n    flatMap: function(f, xs) {\n      return _.fold(xs, [], (function(ys, x) {\n        return ys.concat(f(x));\n      }));\n    },\n    cached: function(f) {\n      var value;\n      value = None;\n      return function() {\n        if (value === None) {\n          value = f();\n          f = void 0;\n        }\n        return value;\n      };\n    },\n    isFunction: function(f) {\n      return typeof f === \"function\";\n    },\n    toString: function(obj) {\n      var ex, internals, key, value;\n      try {\n        recursionDepth++;\n        if (obj == null) {\n          return \"undefined\";\n        } else if (_.isFunction(obj)) {\n          return \"function\";\n        } else if (isArray(obj)) {\n          if (recursionDepth > 5) {\n            return \"[..]\";\n          }\n          return \"[\" + _.map(_.toString, obj).toString() + \"]\";\n        } else if (((obj != null ? obj.toString : void 0) != null) && obj.toString !== Object.prototype.toString) {\n          return obj.toString();\n        } else if (typeof obj === \"object\") {\n          if (recursionDepth > 5) {\n            return \"{..}\";\n          }\n          internals = (function() {\n            var results;\n            results = [];\n            for (key in obj) {\n              if (!hasProp.call(obj, key)) continue;\n              value = (function() {\n                try {\n                  return obj[key];\n                } catch (_error) {\n                  ex = _error;\n                  return ex;\n                }\n              })();\n              results.push(_.toString(key) + \":\" + _.toString(value));\n            }\n            return results;\n          })();\n          return \"{\" + internals + \"}\";\n        } else {\n          return obj;\n        }\n      } finally {\n        recursionDepth--;\n      }\n    }\n  };\n\n  recursionDepth = 0;\n\n  Bacon._ = _;\n\n  UpdateBarrier = Bacon.UpdateBarrier = (function() {\n    var afterTransaction, afters, aftersIndex, currentEventId, flush, flushDepsOf, flushWaiters, hasWaiters, inTransaction, rootEvent, waiterObs, waiters, whenDoneWith, wrappedSubscribe;\n    rootEvent = void 0;\n    waiterObs = [];\n    waiters = {};\n    afters = [];\n    aftersIndex = 0;\n    afterTransaction = function(f) {\n      if (rootEvent) {\n        return afters.push(f);\n      } else {\n        return f();\n      }\n    };\n    whenDoneWith = function(obs, f) {\n      var obsWaiters;\n      if (rootEvent) {\n        obsWaiters = waiters[obs.id];\n        if (obsWaiters == null) {\n          obsWaiters = waiters[obs.id] = [f];\n          return waiterObs.push(obs);\n        } else {\n          return obsWaiters.push(f);\n        }\n      } else {\n        return f();\n      }\n    };\n    flush = function() {\n      while (waiterObs.length > 0) {\n        flushWaiters(0);\n      }\n      return void 0;\n    };\n    flushWaiters = function(index) {\n      var f, j, len1, obs, obsId, obsWaiters;\n      obs = waiterObs[index];\n      obsId = obs.id;\n      obsWaiters = waiters[obsId];\n      waiterObs.splice(index, 1);\n      delete waiters[obsId];\n      flushDepsOf(obs);\n      for (j = 0, len1 = obsWaiters.length; j < len1; j++) {\n        f = obsWaiters[j];\n        f();\n      }\n      return void 0;\n    };\n    flushDepsOf = function(obs) {\n      var dep, deps, index, j, len1;\n      deps = obs.internalDeps();\n      for (j = 0, len1 = deps.length; j < len1; j++) {\n        dep = deps[j];\n        flushDepsOf(dep);\n        if (waiters[dep.id]) {\n          index = _.indexOf(waiterObs, dep);\n          flushWaiters(index);\n        }\n      }\n      return void 0;\n    };\n    inTransaction = function(event, context, f, args) {\n      var after, result;\n      if (rootEvent) {\n        return f.apply(context, args);\n      } else {\n        rootEvent = event;\n        try {\n          result = f.apply(context, args);\n          flush();\n        } finally {\n          rootEvent = void 0;\n          while (aftersIndex < afters.length) {\n            after = afters[aftersIndex];\n            aftersIndex++;\n            after();\n          }\n          aftersIndex = 0;\n          afters = [];\n        }\n        return result;\n      }\n    };\n    currentEventId = function() {\n      if (rootEvent) {\n        return rootEvent.id;\n      } else {\n        return void 0;\n      }\n    };\n    wrappedSubscribe = function(obs, sink) {\n      var doUnsub, shouldUnsub, unsub, unsubd;\n      unsubd = false;\n      shouldUnsub = false;\n      doUnsub = function() {\n        return shouldUnsub = true;\n      };\n      unsub = function() {\n        unsubd = true;\n        return doUnsub();\n      };\n      doUnsub = obs.dispatcher.subscribe(function(event) {\n        return afterTransaction(function() {\n          var reply;\n          if (!unsubd) {\n            reply = sink(event);\n            if (reply === Bacon.noMore) {\n              return unsub();\n            }\n          }\n        });\n      });\n      if (shouldUnsub) {\n        doUnsub();\n      }\n      return unsub;\n    };\n    hasWaiters = function() {\n      return waiterObs.length > 0;\n    };\n    return {\n      whenDoneWith: whenDoneWith,\n      hasWaiters: hasWaiters,\n      inTransaction: inTransaction,\n      currentEventId: currentEventId,\n      wrappedSubscribe: wrappedSubscribe,\n      afterTransaction: afterTransaction\n    };\n  })();\n\n  Source = (function() {\n    function Source(obs1, sync, lazy1) {\n      this.obs = obs1;\n      this.sync = sync;\n      this.lazy = lazy1 != null ? lazy1 : false;\n      this.queue = [];\n    }\n\n    Source.prototype.subscribe = function(sink) {\n      return this.obs.dispatcher.subscribe(sink);\n    };\n\n    Source.prototype.toString = function() {\n      return this.obs.toString();\n    };\n\n    Source.prototype.markEnded = function() {\n      return this.ended = true;\n    };\n\n    Source.prototype.consume = function() {\n      if (this.lazy) {\n        return {\n          value: _.always(this.queue[0])\n        };\n      } else {\n        return this.queue[0];\n      }\n    };\n\n    Source.prototype.push = function(x) {\n      return this.queue = [x];\n    };\n\n    Source.prototype.mayHave = function() {\n      return true;\n    };\n\n    Source.prototype.hasAtLeast = function() {\n      return this.queue.length;\n    };\n\n    Source.prototype.flatten = true;\n\n    return Source;\n\n  })();\n\n  ConsumingSource = (function(superClass) {\n    extend(ConsumingSource, superClass);\n\n    function ConsumingSource() {\n      return ConsumingSource.__super__.constructor.apply(this, arguments);\n    }\n\n    ConsumingSource.prototype.consume = function() {\n      return this.queue.shift();\n    };\n\n    ConsumingSource.prototype.push = function(x) {\n      return this.queue.push(x);\n    };\n\n    ConsumingSource.prototype.mayHave = function(c) {\n      return !this.ended || this.queue.length >= c;\n    };\n\n    ConsumingSource.prototype.hasAtLeast = function(c) {\n      return this.queue.length >= c;\n    };\n\n    ConsumingSource.prototype.flatten = false;\n\n    return ConsumingSource;\n\n  })(Source);\n\n  BufferingSource = (function(superClass) {\n    extend(BufferingSource, superClass);\n\n    function BufferingSource(obs) {\n      BufferingSource.__super__.constructor.call(this, obs, true);\n    }\n\n    BufferingSource.prototype.consume = function() {\n      var values;\n      values = this.queue;\n      this.queue = [];\n      return {\n        value: function() {\n          return values;\n        }\n      };\n    };\n\n    BufferingSource.prototype.push = function(x) {\n      return this.queue.push(x.value());\n    };\n\n    BufferingSource.prototype.hasAtLeast = function() {\n      return true;\n    };\n\n    return BufferingSource;\n\n  })(Source);\n\n  Source.isTrigger = function(s) {\n    if (s instanceof Source) {\n      return s.sync;\n    } else {\n      return s instanceof EventStream;\n    }\n  };\n\n  Source.fromObservable = function(s) {\n    if (s instanceof Source) {\n      return s;\n    } else if (s instanceof Property) {\n      return new Source(s, false);\n    } else {\n      return new ConsumingSource(s, true);\n    }\n  };\n\n  Desc = (function() {\n    function Desc(context1, method1, args1) {\n      this.context = context1;\n      this.method = method1;\n      this.args = args1;\n      this.cached = void 0;\n    }\n\n    Desc.prototype.deps = function() {\n      return this.cached || (this.cached = findDeps([this.context].concat(this.args)));\n    };\n\n    Desc.prototype.apply = function(obs) {\n      obs.desc = this;\n      return obs;\n    };\n\n    Desc.prototype.toString = function() {\n      return _.toString(this.context) + \".\" + _.toString(this.method) + \"(\" + _.map(_.toString, this.args) + \")\";\n    };\n\n    return Desc;\n\n  })();\n\n  describe = function() {\n    var args, context, method;\n    context = arguments[0], method = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];\n    if ((context || method) instanceof Desc) {\n      return context || method;\n    } else {\n      return new Desc(context, method, args);\n    }\n  };\n\n  withDescription = function() {\n    var desc, j, obs;\n    desc = 2 <= arguments.length ? slice.call(arguments, 0, j = arguments.length - 1) : (j = 0, []), obs = arguments[j++];\n    return describe.apply(null, desc).apply(obs);\n  };\n\n  findDeps = function(x) {\n    if (isArray(x)) {\n      return _.flatMap(findDeps, x);\n    } else if (isObservable(x)) {\n      return [x];\n    } else if (x instanceof Source) {\n      return [x.obs];\n    } else {\n      return [];\n    }\n  };\n\n  withMethodCallSupport = function(wrapped) {\n    return function() {\n      var args, context, f, methodName;\n      f = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n      if (typeof f === \"object\" && args.length) {\n        context = f;\n        methodName = args[0];\n        f = function() {\n          return context[methodName].apply(context, arguments);\n        };\n        args = args.slice(1);\n      }\n      return wrapped.apply(null, [f].concat(slice.call(args)));\n    };\n  };\n\n  makeFunctionArgs = function(args) {\n    args = Array.prototype.slice.call(args);\n    return makeFunction_.apply(null, args);\n  };\n\n  partiallyApplied = function(f, applied) {\n    return function() {\n      var args;\n      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      return f.apply(null, applied.concat(args));\n    };\n  };\n\n  toSimpleExtractor = function(args) {\n    return function(key) {\n      return function(value) {\n        var fieldValue;\n        if (value == null) {\n          return void 0;\n        } else {\n          fieldValue = value[key];\n          if (_.isFunction(fieldValue)) {\n            return fieldValue.apply(value, args);\n          } else {\n            return fieldValue;\n          }\n        }\n      };\n    };\n  };\n\n  toFieldExtractor = function(f, args) {\n    var partFuncs, parts;\n    parts = f.slice(1).split(\".\");\n    partFuncs = _.map(toSimpleExtractor(args), parts);\n    return function(value) {\n      var j, len1;\n      for (j = 0, len1 = partFuncs.length; j < len1; j++) {\n        f = partFuncs[j];\n        value = f(value);\n      }\n      return value;\n    };\n  };\n\n  isFieldKey = function(f) {\n    return (typeof f === \"string\") && f.length > 1 && f.charAt(0) === \".\";\n  };\n\n  makeFunction_ = withMethodCallSupport(function() {\n    var args, f;\n    f = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n    if (_.isFunction(f)) {\n      if (args.length) {\n        return partiallyApplied(f, args);\n      } else {\n        return f;\n      }\n    } else if (isFieldKey(f)) {\n      return toFieldExtractor(f, args);\n    } else {\n      return _.always(f);\n    }\n  });\n\n  makeFunction = function(f, args) {\n    return makeFunction_.apply(null, [f].concat(slice.call(args)));\n  };\n\n  convertArgsToFunction = function(obs, f, args, method) {\n    var sampled;\n    if (f instanceof Property) {\n      sampled = f.sampledBy(obs, function(p, s) {\n        return [p, s];\n      });\n      return method.call(sampled, function(arg) {\n        var p, s;\n        p = arg[0], s = arg[1];\n        return p;\n      }).map(function(arg) {\n        var p, s;\n        p = arg[0], s = arg[1];\n        return s;\n      });\n    } else {\n      f = makeFunction(f, args);\n      return method.call(obs, f);\n    }\n  };\n\n  toCombinator = function(f) {\n    var key;\n    if (_.isFunction(f)) {\n      return f;\n    } else if (isFieldKey(f)) {\n      key = toFieldKey(f);\n      return function(left, right) {\n        return left[key](right);\n      };\n    } else {\n      throw new Exception(\"not a function or a field key: \" + f);\n    }\n  };\n\n  toFieldKey = function(f) {\n    return f.slice(1);\n  };\n\n  Some = (function() {\n    function Some(value1) {\n      this.value = value1;\n    }\n\n    Some.prototype.getOrElse = function() {\n      return this.value;\n    };\n\n    Some.prototype.get = function() {\n      return this.value;\n    };\n\n    Some.prototype.filter = function(f) {\n      if (f(this.value)) {\n        return new Some(this.value);\n      } else {\n        return None;\n      }\n    };\n\n    Some.prototype.map = function(f) {\n      return new Some(f(this.value));\n    };\n\n    Some.prototype.forEach = function(f) {\n      return f(this.value);\n    };\n\n    Some.prototype.isDefined = true;\n\n    Some.prototype.toArray = function() {\n      return [this.value];\n    };\n\n    Some.prototype.inspect = function() {\n      return \"Some(\" + this.value + \")\";\n    };\n\n    Some.prototype.toString = function() {\n      return this.inspect();\n    };\n\n    return Some;\n\n  })();\n\n  None = {\n    getOrElse: function(value) {\n      return value;\n    },\n    filter: function() {\n      return None;\n    },\n    map: function() {\n      return None;\n    },\n    forEach: function() {},\n    isDefined: false,\n    toArray: function() {\n      return [];\n    },\n    inspect: function() {\n      return \"None\";\n    },\n    toString: function() {\n      return this.inspect();\n    }\n  };\n\n  toOption = function(v) {\n    if (v instanceof Some || v === None) {\n      return v;\n    } else {\n      return new Some(v);\n    }\n  };\n\n  Bacon.noMore = [\"<no-more>\"];\n\n  Bacon.more = [\"<more>\"];\n\n  eventIdCounter = 0;\n\n  Event = (function() {\n    function Event() {\n      this.id = ++eventIdCounter;\n    }\n\n    Event.prototype.isEvent = function() {\n      return true;\n    };\n\n    Event.prototype.isEnd = function() {\n      return false;\n    };\n\n    Event.prototype.isInitial = function() {\n      return false;\n    };\n\n    Event.prototype.isNext = function() {\n      return false;\n    };\n\n    Event.prototype.isError = function() {\n      return false;\n    };\n\n    Event.prototype.hasValue = function() {\n      return false;\n    };\n\n    Event.prototype.filter = function() {\n      return true;\n    };\n\n    Event.prototype.inspect = function() {\n      return this.toString();\n    };\n\n    Event.prototype.log = function() {\n      return this.toString();\n    };\n\n    return Event;\n\n  })();\n\n  Next = (function(superClass) {\n    extend(Next, superClass);\n\n    function Next(valueF, eager) {\n      Next.__super__.constructor.call(this);\n      if (!eager && _.isFunction(valueF) || valueF instanceof Next) {\n        this.valueF = valueF;\n        this.valueInternal = void 0;\n      } else {\n        this.valueF = void 0;\n        this.valueInternal = valueF;\n      }\n    }\n\n    Next.prototype.isNext = function() {\n      return true;\n    };\n\n    Next.prototype.hasValue = function() {\n      return true;\n    };\n\n    Next.prototype.value = function() {\n      if (this.valueF instanceof Next) {\n        this.valueInternal = this.valueF.value();\n        this.valueF = void 0;\n      } else if (this.valueF) {\n        this.valueInternal = this.valueF();\n        this.valueF = void 0;\n      }\n      return this.valueInternal;\n    };\n\n    Next.prototype.fmap = function(f) {\n      var event, value;\n      if (this.valueInternal) {\n        value = this.valueInternal;\n        return this.apply(function() {\n          return f(value);\n        });\n      } else {\n        event = this;\n        return this.apply(function() {\n          return f(event.value());\n        });\n      }\n    };\n\n    Next.prototype.apply = function(value) {\n      return new Next(value);\n    };\n\n    Next.prototype.filter = function(f) {\n      return f(this.value());\n    };\n\n    Next.prototype.toString = function() {\n      return _.toString(this.value());\n    };\n\n    Next.prototype.log = function() {\n      return this.value();\n    };\n\n    return Next;\n\n  })(Event);\n\n  Initial = (function(superClass) {\n    extend(Initial, superClass);\n\n    function Initial() {\n      return Initial.__super__.constructor.apply(this, arguments);\n    }\n\n    Initial.prototype.isInitial = function() {\n      return true;\n    };\n\n    Initial.prototype.isNext = function() {\n      return false;\n    };\n\n    Initial.prototype.apply = function(value) {\n      return new Initial(value);\n    };\n\n    Initial.prototype.toNext = function() {\n      return new Next(this);\n    };\n\n    return Initial;\n\n  })(Next);\n\n  End = (function(superClass) {\n    extend(End, superClass);\n\n    function End() {\n      return End.__super__.constructor.apply(this, arguments);\n    }\n\n    End.prototype.isEnd = function() {\n      return true;\n    };\n\n    End.prototype.fmap = function() {\n      return this;\n    };\n\n    End.prototype.apply = function() {\n      return this;\n    };\n\n    End.prototype.toString = function() {\n      return \"<end>\";\n    };\n\n    return End;\n\n  })(Event);\n\n  Error = (function(superClass) {\n    extend(Error, superClass);\n\n    function Error(error1) {\n      this.error = error1;\n    }\n\n    Error.prototype.isError = function() {\n      return true;\n    };\n\n    Error.prototype.fmap = function() {\n      return this;\n    };\n\n    Error.prototype.apply = function() {\n      return this;\n    };\n\n    Error.prototype.toString = function() {\n      return \"<error> \" + _.toString(this.error);\n    };\n\n    return Error;\n\n  })(Event);\n\n  Bacon.Event = Event;\n\n  Bacon.Initial = Initial;\n\n  Bacon.Next = Next;\n\n  Bacon.End = End;\n\n  Bacon.Error = Error;\n\n  initialEvent = function(value) {\n    return new Initial(value, true);\n  };\n\n  nextEvent = function(value) {\n    return new Next(value, true);\n  };\n\n  endEvent = function() {\n    return new End();\n  };\n\n  toEvent = function(x) {\n    if (x instanceof Event) {\n      return x;\n    } else {\n      return nextEvent(x);\n    }\n  };\n\n  idCounter = 0;\n\n  registerObs = function() {};\n\n  Observable = (function() {\n    function Observable(desc) {\n      this.id = ++idCounter;\n      withDescription(desc, this);\n      this.initialDesc = this.desc;\n    }\n\n    Observable.prototype.subscribe = function(sink) {\n      return UpdateBarrier.wrappedSubscribe(this, sink);\n    };\n\n    Observable.prototype.subscribeInternal = function(sink) {\n      return this.dispatcher.subscribe(sink);\n    };\n\n    Observable.prototype.onValue = function() {\n      var f;\n      f = makeFunctionArgs(arguments);\n      return this.subscribe(function(event) {\n        if (event.hasValue()) {\n          return f(event.value());\n        }\n      });\n    };\n\n    Observable.prototype.onValues = function(f) {\n      return this.onValue(function(args) {\n        return f.apply(null, args);\n      });\n    };\n\n    Observable.prototype.onError = function() {\n      var f;\n      f = makeFunctionArgs(arguments);\n      return this.subscribe(function(event) {\n        if (event.isError()) {\n          return f(event.error);\n        }\n      });\n    };\n\n    Observable.prototype.onEnd = function() {\n      var f;\n      f = makeFunctionArgs(arguments);\n      return this.subscribe(function(event) {\n        if (event.isEnd()) {\n          return f();\n        }\n      });\n    };\n\n    Observable.prototype.name = function(name) {\n      this._name = name;\n      return this;\n    };\n\n    Observable.prototype.withDescription = function() {\n      return describe.apply(null, arguments).apply(this);\n    };\n\n    Observable.prototype.toString = function() {\n      if (this._name) {\n        return this._name;\n      } else {\n        return this.desc.toString();\n      }\n    };\n\n    Observable.prototype.internalDeps = function() {\n      return this.initialDesc.deps();\n    };\n\n    return Observable;\n\n  })();\n\n  Observable.prototype.assign = Observable.prototype.onValue;\n\n  Observable.prototype.forEach = Observable.prototype.onValue;\n\n  Observable.prototype.inspect = Observable.prototype.toString;\n\n  Bacon.Observable = Observable;\n\n  CompositeUnsubscribe = (function() {\n    function CompositeUnsubscribe(ss) {\n      var j, len1, s;\n      if (ss == null) {\n        ss = [];\n      }\n      this.unsubscribe = bind(this.unsubscribe, this);\n      this.unsubscribed = false;\n      this.subscriptions = [];\n      this.starting = [];\n      for (j = 0, len1 = ss.length; j < len1; j++) {\n        s = ss[j];\n        this.add(s);\n      }\n    }\n\n    CompositeUnsubscribe.prototype.add = function(subscription) {\n      var ended, unsub, unsubMe;\n      if (this.unsubscribed) {\n        return;\n      }\n      ended = false;\n      unsub = nop;\n      this.starting.push(subscription);\n      unsubMe = (function(_this) {\n        return function() {\n          if (_this.unsubscribed) {\n            return;\n          }\n          ended = true;\n          _this.remove(unsub);\n          return _.remove(subscription, _this.starting);\n        };\n      })(this);\n      unsub = subscription(this.unsubscribe, unsubMe);\n      if (!(this.unsubscribed || ended)) {\n        this.subscriptions.push(unsub);\n      } else {\n        unsub();\n      }\n      _.remove(subscription, this.starting);\n      return unsub;\n    };\n\n    CompositeUnsubscribe.prototype.remove = function(unsub) {\n      if (this.unsubscribed) {\n        return;\n      }\n      if ((_.remove(unsub, this.subscriptions)) !== void 0) {\n        return unsub();\n      }\n    };\n\n    CompositeUnsubscribe.prototype.unsubscribe = function() {\n      var j, len1, ref, s;\n      if (this.unsubscribed) {\n        return;\n      }\n      this.unsubscribed = true;\n      ref = this.subscriptions;\n      for (j = 0, len1 = ref.length; j < len1; j++) {\n        s = ref[j];\n        s();\n      }\n      this.subscriptions = [];\n      return this.starting = [];\n    };\n\n    CompositeUnsubscribe.prototype.count = function() {\n      if (this.unsubscribed) {\n        return 0;\n      }\n      return this.subscriptions.length + this.starting.length;\n    };\n\n    CompositeUnsubscribe.prototype.empty = function() {\n      return this.count() === 0;\n    };\n\n    return CompositeUnsubscribe;\n\n  })();\n\n  Bacon.CompositeUnsubscribe = CompositeUnsubscribe;\n\n  Dispatcher = (function() {\n    function Dispatcher(_subscribe, _handleEvent) {\n      this._subscribe = _subscribe;\n      this._handleEvent = _handleEvent;\n      this.subscribe = bind(this.subscribe, this);\n      this.handleEvent = bind(this.handleEvent, this);\n      this.subscriptions = [];\n      this.queue = [];\n      this.pushing = false;\n      this.ended = false;\n      this.prevError = void 0;\n      this.unsubSrc = void 0;\n    }\n\n    Dispatcher.prototype.hasSubscribers = function() {\n      return this.subscriptions.length > 0;\n    };\n\n    Dispatcher.prototype.removeSub = function(subscription) {\n      return this.subscriptions = _.without(subscription, this.subscriptions);\n    };\n\n    Dispatcher.prototype.push = function(event) {\n      if (event.isEnd()) {\n        this.ended = true;\n      }\n      return UpdateBarrier.inTransaction(event, this, this.pushIt, [event]);\n    };\n\n    Dispatcher.prototype.pushToSubscriptions = function(event) {\n      var e, j, len1, reply, sub, tmp;\n      try {\n        tmp = this.subscriptions;\n        for (j = 0, len1 = tmp.length; j < len1; j++) {\n          sub = tmp[j];\n          reply = sub.sink(event);\n          if (reply === Bacon.noMore || event.isEnd()) {\n            this.removeSub(sub);\n          }\n        }\n        return true;\n      } catch (_error) {\n        e = _error;\n        this.pushing = false;\n        this.queue = [];\n        throw e;\n      }\n    };\n\n    Dispatcher.prototype.pushIt = function(event) {\n      if (!this.pushing) {\n        if (event === this.prevError) {\n          return;\n        }\n        if (event.isError()) {\n          this.prevError = event;\n        }\n        this.pushing = true;\n        this.pushToSubscriptions(event);\n        this.pushing = false;\n        while (this.queue.length) {\n          event = this.queue.shift();\n          this.push(event);\n        }\n        if (this.hasSubscribers()) {\n          return Bacon.more;\n        } else {\n          this.unsubscribeFromSource();\n          return Bacon.noMore;\n        }\n      } else {\n        this.queue.push(event);\n        return Bacon.more;\n      }\n    };\n\n    Dispatcher.prototype.handleEvent = function(event) {\n      if (this._handleEvent) {\n        return this._handleEvent(event);\n      } else {\n        return this.push(event);\n      }\n    };\n\n    Dispatcher.prototype.unsubscribeFromSource = function() {\n      if (this.unsubSrc) {\n        this.unsubSrc();\n      }\n      return this.unsubSrc = void 0;\n    };\n\n    Dispatcher.prototype.subscribe = function(sink) {\n      var subscription;\n      if (this.ended) {\n        sink(endEvent());\n        return nop;\n      } else {\n        assertFunction(sink);\n        subscription = {\n          sink: sink\n        };\n        this.subscriptions.push(subscription);\n        if (this.subscriptions.length === 1) {\n          this.unsubSrc = this._subscribe(this.handleEvent);\n          assertFunction(this.unsubSrc);\n        }\n        return (function(_this) {\n          return function() {\n            _this.removeSub(subscription);\n            if (!_this.hasSubscribers()) {\n              return _this.unsubscribeFromSource();\n            }\n          };\n        })(this);\n      }\n    };\n\n    return Dispatcher;\n\n  })();\n\n  EventStream = (function(superClass) {\n    extend(EventStream, superClass);\n\n    function EventStream(desc, subscribe, handler) {\n      if (_.isFunction(desc)) {\n        handler = subscribe;\n        subscribe = desc;\n        desc = [];\n      }\n      EventStream.__super__.constructor.call(this, desc);\n      assertFunction(subscribe);\n      this.dispatcher = new Dispatcher(subscribe, handler);\n      registerObs(this);\n    }\n\n    EventStream.prototype.toProperty = function(initValue_) {\n      var disp, initValue;\n      initValue = arguments.length === 0 ? None : toOption(function() {\n        return initValue_;\n      });\n      disp = this.dispatcher;\n      return new Property(describe(this, \"toProperty\", initValue_), function(sink) {\n        var initSent, reply, sendInit, unsub;\n        initSent = false;\n        unsub = nop;\n        reply = Bacon.more;\n        sendInit = function() {\n          if (!initSent) {\n            return initValue.forEach(function(value) {\n              initSent = true;\n              reply = sink(new Initial(value));\n              if (reply === Bacon.noMore) {\n                unsub();\n                return unsub = nop;\n              }\n            });\n          }\n        };\n        unsub = disp.subscribe(function(event) {\n          if (event.hasValue()) {\n            if (initSent && event.isInitial()) {\n              return Bacon.more;\n            } else {\n              if (!event.isInitial()) {\n                sendInit();\n              }\n              initSent = true;\n              initValue = new Some(event);\n              return sink(event);\n            }\n          } else {\n            if (event.isEnd()) {\n              reply = sendInit();\n            }\n            if (reply !== Bacon.noMore) {\n              return sink(event);\n            }\n          }\n        });\n        sendInit();\n        return unsub;\n      });\n    };\n\n    EventStream.prototype.toEventStream = function() {\n      return this;\n    };\n\n    EventStream.prototype.withHandler = function(handler) {\n      return new EventStream(describe(this, \"withHandler\", handler), this.dispatcher.subscribe, handler);\n    };\n\n    return EventStream;\n\n  })(Observable);\n\n  Bacon.EventStream = EventStream;\n\n  Bacon.never = function() {\n    return new EventStream(describe(Bacon, \"never\"), function(sink) {\n      sink(endEvent());\n      return nop;\n    });\n  };\n\n  Bacon.when = function() {\n    var f, i, index, ix, j, k, len, len1, len2, needsBarrier, pat, patSources, pats, patterns, ref, resultStream, s, sources, triggerFound, usage;\n    if (arguments.length === 0) {\n      return Bacon.never();\n    }\n    len = arguments.length;\n    usage = \"when: expecting arguments in the form (Observable+,function)+\";\n    assert(usage, len % 2 === 0);\n    sources = [];\n    pats = [];\n    i = 0;\n    patterns = [];\n    while (i < len) {\n      patterns[i] = arguments[i];\n      patterns[i + 1] = arguments[i + 1];\n      patSources = _.toArray(arguments[i]);\n      f = constantToFunction(arguments[i + 1]);\n      pat = {\n        f: f,\n        ixs: []\n      };\n      triggerFound = false;\n      for (j = 0, len1 = patSources.length; j < len1; j++) {\n        s = patSources[j];\n        index = _.indexOf(sources, s);\n        if (!triggerFound) {\n          triggerFound = Source.isTrigger(s);\n        }\n        if (index < 0) {\n          sources.push(s);\n          index = sources.length - 1;\n        }\n        ref = pat.ixs;\n        for (k = 0, len2 = ref.length; k < len2; k++) {\n          ix = ref[k];\n          if (ix.index === index) {\n            ix.count++;\n          }\n        }\n        pat.ixs.push({\n          index: index,\n          count: 1\n        });\n      }\n      assert(\"At least one EventStream required\", triggerFound || (!patSources.length));\n      if (patSources.length > 0) {\n        pats.push(pat);\n      }\n      i = i + 2;\n    }\n    if (!sources.length) {\n      return Bacon.never();\n    }\n    sources = _.map(Source.fromObservable, sources);\n    needsBarrier = (_.any(sources, function(s) {\n      return s.flatten;\n    })) && (containsDuplicateDeps(_.map((function(s) {\n      return s.obs;\n    }), sources)));\n    return resultStream = new EventStream(describe.apply(null, [Bacon, \"when\"].concat(slice.call(patterns))), function(sink) {\n      var cannotMatch, cannotSync, ends, match, nonFlattened, part, triggers;\n      triggers = [];\n      ends = false;\n      match = function(p) {\n        var l, len3, ref1;\n        ref1 = p.ixs;\n        for (l = 0, len3 = ref1.length; l < len3; l++) {\n          i = ref1[l];\n          if (!sources[i.index].hasAtLeast(i.count)) {\n            return false;\n          }\n        }\n        return true;\n      };\n      cannotSync = function(source) {\n        return !source.sync || source.ended;\n      };\n      cannotMatch = function(p) {\n        var l, len3, ref1;\n        ref1 = p.ixs;\n        for (l = 0, len3 = ref1.length; l < len3; l++) {\n          i = ref1[l];\n          if (!sources[i.index].mayHave(i.count)) {\n            return true;\n          }\n        }\n      };\n      nonFlattened = function(trigger) {\n        return !trigger.source.flatten;\n      };\n      part = function(source) {\n        return function(unsubAll) {\n          var flush, flushLater, flushWhileTriggers;\n          flushLater = function() {\n            return UpdateBarrier.whenDoneWith(resultStream, flush);\n          };\n          flushWhileTriggers = function() {\n            var events, l, len3, p, reply, trigger;\n            if (triggers.length > 0) {\n              reply = Bacon.more;\n              trigger = triggers.pop();\n              for (l = 0, len3 = pats.length; l < len3; l++) {\n                p = pats[l];\n                if (match(p)) {\n                  events = (function() {\n                    var len4, m, ref1, results;\n                    ref1 = p.ixs;\n                    results = [];\n                    for (m = 0, len4 = ref1.length; m < len4; m++) {\n                      i = ref1[m];\n                      results.push(sources[i.index].consume());\n                    }\n                    return results;\n                  })();\n                  reply = sink(trigger.e.apply(function() {\n                    var event, values;\n                    values = (function() {\n                      var len4, m, results;\n                      results = [];\n                      for (m = 0, len4 = events.length; m < len4; m++) {\n                        event = events[m];\n                        results.push(event.value());\n                      }\n                      return results;\n                    })();\n                    return p.f.apply(p, values);\n                  }));\n                  if (triggers.length) {\n                    triggers = _.filter(nonFlattened, triggers);\n                  }\n                  if (reply === Bacon.noMore) {\n                    return reply;\n                  } else {\n                    return flushWhileTriggers();\n                  }\n                }\n              }\n            } else {\n              return Bacon.more;\n            }\n          };\n          flush = function() {\n            var reply;\n            reply = flushWhileTriggers();\n            if (ends) {\n              ends = false;\n              if (_.all(sources, cannotSync) || _.all(pats, cannotMatch)) {\n                reply = Bacon.noMore;\n                sink(endEvent());\n              }\n            }\n            if (reply === Bacon.noMore) {\n              unsubAll();\n            }\n            return reply;\n          };\n          return source.subscribe(function(e) {\n            var reply;\n            if (e.isEnd()) {\n              ends = true;\n              source.markEnded();\n              flushLater();\n            } else if (e.isError()) {\n              reply = sink(e);\n            } else {\n              source.push(e);\n              if (source.sync) {\n                triggers.push({\n                  source: source,\n                  e: e\n                });\n                if (needsBarrier || UpdateBarrier.hasWaiters()) {\n                  flushLater();\n                } else {\n                  flush();\n                }\n              }\n            }\n            if (reply === Bacon.noMore) {\n              unsubAll();\n            }\n            return reply || Bacon.more;\n          });\n        };\n      };\n      return new Bacon.CompositeUnsubscribe((function() {\n        var l, len3, results;\n        results = [];\n        for (l = 0, len3 = sources.length; l < len3; l++) {\n          s = sources[l];\n          results.push(part(s));\n        }\n        return results;\n      })()).unsubscribe;\n    });\n  };\n\n  containsDuplicateDeps = function(observables, state) {\n    var checkObservable;\n    if (state == null) {\n      state = [];\n    }\n    checkObservable = function(obs) {\n      var deps;\n      if (_.contains(state, obs)) {\n        return true;\n      } else {\n        deps = obs.internalDeps();\n        if (deps.length) {\n          state.push(obs);\n          return _.any(deps, checkObservable);\n        } else {\n          state.push(obs);\n          return false;\n        }\n      }\n    };\n    return _.any(observables, checkObservable);\n  };\n\n  constantToFunction = function(f) {\n    if (_.isFunction(f)) {\n      return f;\n    } else {\n      return _.always(f);\n    }\n  };\n\n  Bacon.groupSimultaneous = function() {\n    var s, sources, streams;\n    streams = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    if (streams.length === 1 && isArray(streams[0])) {\n      streams = streams[0];\n    }\n    sources = (function() {\n      var j, len1, results;\n      results = [];\n      for (j = 0, len1 = streams.length; j < len1; j++) {\n        s = streams[j];\n        results.push(new BufferingSource(s));\n      }\n      return results;\n    })();\n    return withDescription.apply(null, [Bacon, \"groupSimultaneous\"].concat(slice.call(streams), [Bacon.when(sources, (function() {\n      var xs;\n      xs = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      return xs;\n    }))]));\n  };\n\n  PropertyDispatcher = (function(superClass) {\n    extend(PropertyDispatcher, superClass);\n\n    function PropertyDispatcher(property1, subscribe, handleEvent) {\n      this.property = property1;\n      this.subscribe = bind(this.subscribe, this);\n      PropertyDispatcher.__super__.constructor.call(this, subscribe, handleEvent);\n      this.current = None;\n      this.currentValueRootId = void 0;\n      this.propertyEnded = false;\n    }\n\n    PropertyDispatcher.prototype.push = function(event) {\n      if (event.isEnd()) {\n        this.propertyEnded = true;\n      }\n      if (event.hasValue()) {\n        this.current = new Some(event);\n        this.currentValueRootId = UpdateBarrier.currentEventId();\n      }\n      return PropertyDispatcher.__super__.push.call(this, event);\n    };\n\n    PropertyDispatcher.prototype.maybeSubSource = function(sink, reply) {\n      if (reply === Bacon.noMore) {\n        return nop;\n      } else if (this.propertyEnded) {\n        sink(endEvent());\n        return nop;\n      } else {\n        return Dispatcher.prototype.subscribe.call(this, sink);\n      }\n    };\n\n    PropertyDispatcher.prototype.subscribe = function(sink) {\n      var dispatchingId, initSent, reply, valId;\n      initSent = false;\n      reply = Bacon.more;\n      if (this.current.isDefined && (this.hasSubscribers() || this.propertyEnded)) {\n        dispatchingId = UpdateBarrier.currentEventId();\n        valId = this.currentValueRootId;\n        if (!this.propertyEnded && valId && dispatchingId && dispatchingId !== valId) {\n          UpdateBarrier.whenDoneWith(this.property, (function(_this) {\n            return function() {\n              if (_this.currentValueRootId === valId) {\n                return sink(initialEvent(_this.current.get().value()));\n              }\n            };\n          })(this));\n          return this.maybeSubSource(sink, reply);\n        } else {\n          UpdateBarrier.inTransaction(void 0, this, (function() {\n            return reply = sink(initialEvent(this.current.get().value()));\n          }), []);\n          return this.maybeSubSource(sink, reply);\n        }\n      } else {\n        return this.maybeSubSource(sink, reply);\n      }\n    };\n\n    return PropertyDispatcher;\n\n  })(Dispatcher);\n\n  Property = (function(superClass) {\n    extend(Property, superClass);\n\n    function Property(desc, subscribe, handler) {\n      if (_.isFunction(desc)) {\n        handler = subscribe;\n        subscribe = desc;\n        desc = [];\n      }\n      Property.__super__.constructor.call(this, desc);\n      assertFunction(subscribe);\n      this.dispatcher = new PropertyDispatcher(this, subscribe, handler);\n      registerObs(this);\n    }\n\n    Property.prototype.changes = function() {\n      return new EventStream(describe(this, \"changes\"), (function(_this) {\n        return function(sink) {\n          return _this.dispatcher.subscribe(function(event) {\n            if (!event.isInitial()) {\n              return sink(event);\n            }\n          });\n        };\n      })(this));\n    };\n\n    Property.prototype.withHandler = function(handler) {\n      return new Property(describe(this, \"withHandler\", handler), this.dispatcher.subscribe, handler);\n    };\n\n    Property.prototype.toProperty = function() {\n      assertNoArguments(arguments);\n      return this;\n    };\n\n    Property.prototype.toEventStream = function() {\n      return new EventStream(describe(this, \"toEventStream\"), (function(_this) {\n        return function(sink) {\n          return _this.dispatcher.subscribe(function(event) {\n            if (event.isInitial()) {\n              event = event.toNext();\n            }\n            return sink(event);\n          });\n        };\n      })(this));\n    };\n\n    return Property;\n\n  })(Observable);\n\n  Bacon.Property = Property;\n\n  Bacon.constant = function(value) {\n    return new Property(describe(Bacon, \"constant\", value), function(sink) {\n      sink(initialEvent(value));\n      sink(endEvent());\n      return nop;\n    });\n  };\n\n  Bacon.fromBinder = function(binder, eventTransformer) {\n    if (eventTransformer == null) {\n      eventTransformer = _.id;\n    }\n    return new EventStream(describe(Bacon, \"fromBinder\", binder, eventTransformer), function(sink) {\n      var shouldUnbind, unbind, unbinder, unbound;\n      unbound = false;\n      shouldUnbind = false;\n      unbind = function() {\n        if (!unbound) {\n          if (typeof unbinder !== \"undefined\" && unbinder !== null) {\n            unbinder();\n            return unbound = true;\n          } else {\n            return shouldUnbind = true;\n          }\n        }\n      };\n      unbinder = binder(function() {\n        var args, event, j, len1, reply, value;\n        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n        value = eventTransformer.apply(this, args);\n        if (!(isArray(value) && _.last(value) instanceof Event)) {\n          value = [value];\n        }\n        reply = Bacon.more;\n        for (j = 0, len1 = value.length; j < len1; j++) {\n          event = value[j];\n          reply = sink(event = toEvent(event));\n          if (reply === Bacon.noMore || event.isEnd()) {\n            unbind();\n            return reply;\n          }\n        }\n        return reply;\n      });\n      if (shouldUnbind) {\n        unbind();\n      }\n      return unbind;\n    });\n  };\n\n  eventMethods = [[\"addEventListener\", \"removeEventListener\"], [\"addListener\", \"removeListener\"], [\"on\", \"off\"], [\"bind\", \"unbind\"]];\n\n  findHandlerMethods = function(target) {\n    var j, len1, methodPair, pair;\n    for (j = 0, len1 = eventMethods.length; j < len1; j++) {\n      pair = eventMethods[j];\n      methodPair = [target[pair[0]], target[pair[1]]];\n      if (methodPair[0] && methodPair[1]) {\n        return methodPair;\n      }\n    }\n    throw new Error(\"No suitable event methods in \" + target);\n  };\n\n  Bacon.fromEventTarget = function(target, eventName, eventTransformer) {\n    var ref, sub, unsub;\n    ref = findHandlerMethods(target), sub = ref[0], unsub = ref[1];\n    return withDescription(Bacon, \"fromEvent\", target, eventName, Bacon.fromBinder(function(handler) {\n      sub.call(target, eventName, handler);\n      return function() {\n        return unsub.call(target, eventName, handler);\n      };\n    }, eventTransformer));\n  };\n\n  Bacon.fromEvent = Bacon.fromEventTarget;\n\n  Bacon.Observable.prototype.map = function() {\n    var args, p;\n    p = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n    return convertArgsToFunction(this, p, args, function(f) {\n      return withDescription(this, \"map\", f, this.withHandler(function(event) {\n        return this.push(event.fmap(f));\n      }));\n    });\n  };\n\n  Bacon.combineAsArray = function() {\n    var index, j, len1, s, sources, stream, streams;\n    streams = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    if (streams.length === 1 && isArray(streams[0])) {\n      streams = streams[0];\n    }\n    for (index = j = 0, len1 = streams.length; j < len1; index = ++j) {\n      stream = streams[index];\n      if (!(isObservable(stream))) {\n        streams[index] = Bacon.constant(stream);\n      }\n    }\n    if (streams.length) {\n      sources = (function() {\n        var k, len2, results;\n        results = [];\n        for (k = 0, len2 = streams.length; k < len2; k++) {\n          s = streams[k];\n          results.push(new Source(s, true));\n        }\n        return results;\n      })();\n      return withDescription.apply(null, [Bacon, \"combineAsArray\"].concat(slice.call(streams), [Bacon.when(sources, (function() {\n        var xs;\n        xs = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n        return xs;\n      })).toProperty()]));\n    } else {\n      return Bacon.constant([]);\n    }\n  };\n\n  Bacon.onValues = function() {\n    var f, j, streams;\n    streams = 2 <= arguments.length ? slice.call(arguments, 0, j = arguments.length - 1) : (j = 0, []), f = arguments[j++];\n    return Bacon.combineAsArray(streams).onValues(f);\n  };\n\n  Bacon.combineWith = function() {\n    var f, streams;\n    f = arguments[0], streams = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n    return withDescription.apply(null, [Bacon, \"combineWith\", f].concat(slice.call(streams), [Bacon.combineAsArray(streams).map(function(values) {\n      return f.apply(null, values);\n    })]));\n  };\n\n  Bacon.combineTemplate = function(template) {\n    var applyStreamValue, combinator, compile, compileTemplate, constantValue, current, funcs, mkContext, setValue, streams;\n    funcs = [];\n    streams = [];\n    current = function(ctxStack) {\n      return ctxStack[ctxStack.length - 1];\n    };\n    setValue = function(ctxStack, key, value) {\n      return current(ctxStack)[key] = value;\n    };\n    applyStreamValue = function(key, index) {\n      return function(ctxStack, values) {\n        return setValue(ctxStack, key, values[index]);\n      };\n    };\n    constantValue = function(key, value) {\n      return function(ctxStack) {\n        return setValue(ctxStack, key, value);\n      };\n    };\n    mkContext = function(template) {\n      if (isArray(template)) {\n        return [];\n      } else {\n        return {};\n      }\n    };\n    compile = function(key, value) {\n      var popContext, pushContext;\n      if (isObservable(value)) {\n        streams.push(value);\n        return funcs.push(applyStreamValue(key, streams.length - 1));\n      } else if (value === Object(value) && typeof value !== \"function\" && !(value instanceof RegExp) && !(value instanceof Date)) {\n        pushContext = function(key) {\n          return function(ctxStack) {\n            var newContext;\n            newContext = mkContext(value);\n            setValue(ctxStack, key, newContext);\n            return ctxStack.push(newContext);\n          };\n        };\n        popContext = function(ctxStack) {\n          return ctxStack.pop();\n        };\n        funcs.push(pushContext(key));\n        compileTemplate(value);\n        return funcs.push(popContext);\n      } else {\n        return funcs.push(constantValue(key, value));\n      }\n    };\n    compileTemplate = function(template) {\n      return _.each(template, compile);\n    };\n    compileTemplate(template);\n    combinator = function(values) {\n      var ctxStack, f, j, len1, rootContext;\n      rootContext = mkContext(template);\n      ctxStack = [rootContext];\n      for (j = 0, len1 = funcs.length; j < len1; j++) {\n        f = funcs[j];\n        f(ctxStack, values);\n      }\n      return rootContext;\n    };\n    return withDescription(Bacon, \"combineTemplate\", template, Bacon.combineAsArray(streams).map(combinator));\n  };\n\n  Bacon.Observable.prototype.combine = function(other, f) {\n    var combinator;\n    combinator = toCombinator(f);\n    return withDescription(this, \"combine\", other, f, Bacon.combineAsArray(this, other).map(function(values) {\n      return combinator(values[0], values[1]);\n    }));\n  };\n\n  Bacon.Observable.prototype.decode = function(cases) {\n    return withDescription(this, \"decode\", cases, this.combine(Bacon.combineTemplate(cases), function(key, values) {\n      return values[key];\n    }));\n  };\n\n  Bacon.Observable.prototype.withStateMachine = function(initState, f) {\n    var state;\n    state = initState;\n    return withDescription(this, \"withStateMachine\", initState, f, this.withHandler(function(event) {\n      var fromF, j, len1, newState, output, outputs, reply;\n      fromF = f(state, event);\n      newState = fromF[0], outputs = fromF[1];\n      state = newState;\n      reply = Bacon.more;\n      for (j = 0, len1 = outputs.length; j < len1; j++) {\n        output = outputs[j];\n        reply = this.push(output);\n        if (reply === Bacon.noMore) {\n          return reply;\n        }\n      }\n      return reply;\n    }));\n  };\n\n  Bacon.Observable.prototype.skipDuplicates = function(isEqual) {\n    if (isEqual == null) {\n      isEqual = function(a, b) {\n        return a === b;\n      };\n    }\n    return withDescription(this, \"skipDuplicates\", this.withStateMachine(None, function(prev, event) {\n      if (!event.hasValue()) {\n        return [prev, [event]];\n      } else if (event.isInitial() || prev === None || !isEqual(prev.get(), event.value())) {\n        return [new Some(event.value()), [event]];\n      } else {\n        return [prev, []];\n      }\n    }));\n  };\n\n  Bacon.Observable.prototype.awaiting = function(other) {\n    return withDescription(this, \"awaiting\", other, Bacon.groupSimultaneous(this, other).map(function(arg) {\n      var myValues, otherValues;\n      myValues = arg[0], otherValues = arg[1];\n      return otherValues.length === 0;\n    }).toProperty(false).skipDuplicates());\n  };\n\n  Bacon.Observable.prototype.not = function() {\n    return withDescription(this, \"not\", this.map(function(x) {\n      return !x;\n    }));\n  };\n\n  Bacon.Property.prototype.and = function(other) {\n    return withDescription(this, \"and\", other, this.combine(other, function(x, y) {\n      return x && y;\n    }));\n  };\n\n  Bacon.Property.prototype.or = function(other) {\n    return withDescription(this, \"or\", other, this.combine(other, function(x, y) {\n      return x || y;\n    }));\n  };\n\n  Bacon.scheduler = {\n    setTimeout: function(f, d) {\n      return setTimeout(f, d);\n    },\n    setInterval: function(f, i) {\n      return setInterval(f, i);\n    },\n    clearInterval: function(id) {\n      return clearInterval(id);\n    },\n    clearTimeout: function(id) {\n      return clearTimeout(id);\n    },\n    now: function() {\n      return new Date().getTime();\n    }\n  };\n\n  Bacon.EventStream.prototype.bufferWithTime = function(delay) {\n    return withDescription(this, \"bufferWithTime\", delay, this.bufferWithTimeOrCount(delay, Number.MAX_VALUE));\n  };\n\n  Bacon.EventStream.prototype.bufferWithCount = function(count) {\n    return withDescription(this, \"bufferWithCount\", count, this.bufferWithTimeOrCount(void 0, count));\n  };\n\n  Bacon.EventStream.prototype.bufferWithTimeOrCount = function(delay, count) {\n    var flushOrSchedule;\n    flushOrSchedule = function(buffer) {\n      if (buffer.values.length === count) {\n        return buffer.flush();\n      } else if (delay !== void 0) {\n        return buffer.schedule();\n      }\n    };\n    return withDescription(this, \"bufferWithTimeOrCount\", delay, count, this.buffer(delay, flushOrSchedule, flushOrSchedule));\n  };\n\n  Bacon.EventStream.prototype.buffer = function(delay, onInput, onFlush) {\n    var buffer, delayMs, reply;\n    if (onInput == null) {\n      onInput = nop;\n    }\n    if (onFlush == null) {\n      onFlush = nop;\n    }\n    buffer = {\n      scheduled: null,\n      end: void 0,\n      values: [],\n      flush: function() {\n        var reply;\n        if (this.scheduled) {\n          Bacon.scheduler.clearTimeout(this.scheduled);\n          this.scheduled = null;\n        }\n        if (this.values.length > 0) {\n          reply = this.push(nextEvent(this.values));\n          this.values = [];\n          if (this.end != null) {\n            return this.push(this.end);\n          } else if (reply !== Bacon.noMore) {\n            return onFlush(this);\n          }\n        } else {\n          if (this.end != null) {\n            return this.push(this.end);\n          }\n        }\n      },\n      schedule: function() {\n        if (!this.scheduled) {\n          return this.scheduled = delay((function(_this) {\n            return function() {\n              return _this.flush();\n            };\n          })(this));\n        }\n      }\n    };\n    reply = Bacon.more;\n    if (!_.isFunction(delay)) {\n      delayMs = delay;\n      delay = function(f) {\n        return Bacon.scheduler.setTimeout(f, delayMs);\n      };\n    }\n    return withDescription(this, \"buffer\", this.withHandler(function(event) {\n      buffer.push = (function(_this) {\n        return function(event) {\n          return _this.push(event);\n        };\n      })(this);\n      if (event.isError()) {\n        reply = this.push(event);\n      } else if (event.isEnd()) {\n        buffer.end = event;\n        if (!buffer.scheduled) {\n          buffer.flush();\n        }\n      } else {\n        buffer.values.push(event.value());\n        onInput(buffer);\n      }\n      return reply;\n    }));\n  };\n\n  Bacon.Observable.prototype.filter = function() {\n    var args, f;\n    f = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n    return convertArgsToFunction(this, f, args, function(f) {\n      return withDescription(this, \"filter\", f, this.withHandler(function(event) {\n        if (event.filter(f)) {\n          return this.push(event);\n        } else {\n          return Bacon.more;\n        }\n      }));\n    });\n  };\n\n  Bacon.once = function(value) {\n    return new EventStream(describe(Bacon, \"once\", value), function(sink) {\n      sink(toEvent(value));\n      sink(endEvent());\n      return nop;\n    });\n  };\n\n  Bacon.EventStream.prototype.concat = function(right) {\n    var left;\n    left = this;\n    return new EventStream(describe(left, \"concat\", right), function(sink) {\n      var unsubLeft, unsubRight;\n      unsubRight = nop;\n      unsubLeft = left.dispatcher.subscribe(function(e) {\n        if (e.isEnd()) {\n          return unsubRight = right.dispatcher.subscribe(sink);\n        } else {\n          return sink(e);\n        }\n      });\n      return function() {\n        unsubLeft();\n        return unsubRight();\n      };\n    });\n  };\n\n  Bacon.Observable.prototype.flatMap = function() {\n    return flatMap_(this, makeSpawner(arguments));\n  };\n\n  Bacon.Observable.prototype.flatMapFirst = function() {\n    return flatMap_(this, makeSpawner(arguments), true);\n  };\n\n  flatMap_ = function(root, f, firstOnly, limit) {\n    var childDeps, result, rootDep;\n    rootDep = [root];\n    childDeps = [];\n    result = new EventStream(describe(root, \"flatMap\" + (firstOnly ? \"First\" : \"\"), f), function(sink) {\n      var checkEnd, checkQueue, composite, queue, spawn;\n      composite = new CompositeUnsubscribe();\n      queue = [];\n      spawn = function(event) {\n        var child;\n        child = makeObservable(f(event.value()));\n        childDeps.push(child);\n        return composite.add(function(unsubAll, unsubMe) {\n          return child.dispatcher.subscribe(function(event) {\n            var reply;\n            if (event.isEnd()) {\n              _.remove(child, childDeps);\n              checkQueue();\n              checkEnd(unsubMe);\n              return Bacon.noMore;\n            } else {\n              if (event instanceof Initial) {\n                event = event.toNext();\n              }\n              reply = sink(event);\n              if (reply === Bacon.noMore) {\n                unsubAll();\n              }\n              return reply;\n            }\n          });\n        });\n      };\n      checkQueue = function() {\n        var event;\n        event = queue.shift();\n        if (event) {\n          return spawn(event);\n        }\n      };\n      checkEnd = function(unsub) {\n        unsub();\n        if (composite.empty()) {\n          return sink(endEvent());\n        }\n      };\n      composite.add(function(__, unsubRoot) {\n        return root.dispatcher.subscribe(function(event) {\n          if (event.isEnd()) {\n            return checkEnd(unsubRoot);\n          } else if (event.isError()) {\n            return sink(event);\n          } else if (firstOnly && composite.count() > 1) {\n            return Bacon.more;\n          } else {\n            if (composite.unsubscribed) {\n              return Bacon.noMore;\n            }\n            if (limit && composite.count() > limit) {\n              return queue.push(event);\n            } else {\n              return spawn(event);\n            }\n          }\n        });\n      });\n      return composite.unsubscribe;\n    });\n    result.internalDeps = function() {\n      if (childDeps.length) {\n        return rootDep.concat(childDeps);\n      } else {\n        return rootDep;\n      }\n    };\n    return result;\n  };\n\n  makeSpawner = function(args) {\n    if (args.length === 1 && isObservable(args[0])) {\n      return _.always(args[0]);\n    } else {\n      return makeFunctionArgs(args);\n    }\n  };\n\n  makeObservable = function(x) {\n    if (isObservable(x)) {\n      return x;\n    } else {\n      return Bacon.once(x);\n    }\n  };\n\n  Bacon.Observable.prototype.flatMapWithConcurrencyLimit = function() {\n    var args, limit;\n    limit = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n    return withDescription.apply(null, [this, \"flatMapWithConcurrencyLimit\", limit].concat(slice.call(args), [flatMap_(this, makeSpawner(args), false, limit)]));\n  };\n\n  Bacon.Observable.prototype.flatMapConcat = function() {\n    return withDescription.apply(null, [this, \"flatMapConcat\"].concat(slice.call(arguments), [this.flatMapWithConcurrencyLimit.apply(this, [1].concat(slice.call(arguments)))]));\n  };\n\n  addPropertyInitValueToStream = function(property, stream) {\n    var justInitValue;\n    justInitValue = new EventStream(describe(property, \"justInitValue\"), function(sink) {\n      var unsub, value;\n      value = void 0;\n      unsub = property.dispatcher.subscribe(function(event) {\n        if (!event.isEnd()) {\n          value = event;\n        }\n        return Bacon.noMore;\n      });\n      UpdateBarrier.whenDoneWith(justInitValue, function() {\n        if (value != null) {\n          sink(value);\n        }\n        return sink(endEvent());\n      });\n      return unsub;\n    });\n    return justInitValue.concat(stream).toProperty();\n  };\n\n  Bacon.Observable.prototype.mapEnd = function() {\n    var f;\n    f = makeFunctionArgs(arguments);\n    return withDescription(this, \"mapEnd\", f, this.withHandler(function(event) {\n      if (event.isEnd()) {\n        this.push(nextEvent(f(event)));\n        this.push(endEvent());\n        return Bacon.noMore;\n      } else {\n        return this.push(event);\n      }\n    }));\n  };\n\n  Bacon.Observable.prototype.skipErrors = function() {\n    return withDescription(this, \"skipErrors\", this.withHandler(function(event) {\n      if (event.isError()) {\n        return Bacon.more;\n      } else {\n        return this.push(event);\n      }\n    }));\n  };\n\n  Bacon.EventStream.prototype.takeUntil = function(stopper) {\n    var endMarker;\n    endMarker = {};\n    return withDescription(this, \"takeUntil\", stopper, Bacon.groupSimultaneous(this.mapEnd(endMarker), stopper.skipErrors()).withHandler(function(event) {\n      var data, j, len1, ref, reply, value;\n      if (!event.hasValue()) {\n        return this.push(event);\n      } else {\n        ref = event.value(), data = ref[0], stopper = ref[1];\n        if (stopper.length) {\n          return this.push(endEvent());\n        } else {\n          reply = Bacon.more;\n          for (j = 0, len1 = data.length; j < len1; j++) {\n            value = data[j];\n            if (value === endMarker) {\n              reply = this.push(endEvent());\n            } else {\n              reply = this.push(nextEvent(value));\n            }\n          }\n          return reply;\n        }\n      }\n    }));\n  };\n\n  Bacon.Property.prototype.takeUntil = function(stopper) {\n    var changes;\n    changes = this.changes().takeUntil(stopper);\n    return withDescription(this, \"takeUntil\", stopper, addPropertyInitValueToStream(this, changes));\n  };\n\n  Bacon.Observable.prototype.flatMapLatest = function() {\n    var f, stream;\n    f = makeSpawner(arguments);\n    stream = this.toEventStream();\n    return withDescription(this, \"flatMapLatest\", f, stream.flatMap(function(value) {\n      return makeObservable(f(value)).takeUntil(stream);\n    }));\n  };\n\n  Bacon.fromPoll = function(delay, poll) {\n    return withDescription(Bacon, \"fromPoll\", delay, poll, Bacon.fromBinder((function(handler) {\n      var id;\n      id = Bacon.scheduler.setInterval(handler, delay);\n      return function() {\n        return Bacon.scheduler.clearInterval(id);\n      };\n    }), poll));\n  };\n\n  Bacon.later = function(delay, value) {\n    return withDescription(Bacon, \"later\", delay, value, Bacon.fromBinder(function(sink) {\n      var id, sender;\n      sender = function() {\n        return sink([value, endEvent()]);\n      };\n      id = Bacon.scheduler.setTimeout(sender, delay);\n      return function() {\n        return Bacon.scheduler.clearTimeout(id);\n      };\n    }));\n  };\n\n  Bacon.sequentially = function(delay, values) {\n    var index;\n    index = 0;\n    return withDescription(Bacon, \"sequentially\", delay, values, Bacon.fromPoll(delay, function() {\n      var value;\n      value = values[index++];\n      if (index < values.length) {\n        return value;\n      } else if (index === values.length) {\n        return [value, endEvent()];\n      } else {\n        return endEvent();\n      }\n    }));\n  };\n\n  Bacon.repeatedly = function(delay, values) {\n    var index;\n    index = 0;\n    return withDescription(Bacon, \"repeatedly\", delay, values, Bacon.fromPoll(delay, function() {\n      return values[index++ % values.length];\n    }));\n  };\n\n  Bacon.interval = function(delay, value) {\n    if (value == null) {\n      value = {};\n    }\n    return withDescription(Bacon, \"interval\", delay, value, Bacon.fromPoll(delay, function() {\n      return nextEvent(value);\n    }));\n  };\n\n  Bacon.EventStream.prototype.delay = function(delay) {\n    return withDescription(this, \"delay\", delay, this.flatMap(function(value) {\n      return Bacon.later(delay, value);\n    }));\n  };\n\n  Bacon.Property.prototype.delay = function(delay) {\n    return this.delayChanges(\"delay\", delay, function(changes) {\n      return changes.delay(delay);\n    });\n  };\n\n  Bacon.Property.prototype.delayChanges = function() {\n    var desc, f, j;\n    desc = 2 <= arguments.length ? slice.call(arguments, 0, j = arguments.length - 1) : (j = 0, []), f = arguments[j++];\n    return withDescription.apply(null, [this].concat(slice.call(desc), [addPropertyInitValueToStream(this, f(this.changes()))]));\n  };\n\n  Bacon.Observable.prototype.bufferingThrottle = function(minimumInterval) {\n    return withDescription(this, \"bufferingThrottle\", minimumInterval, this.flatMapConcat(function(x) {\n      return Bacon.once(x).concat(Bacon.later(minimumInterval).filter(false));\n    }));\n  };\n\n  Bacon.Property.prototype.bufferingThrottle = function() {\n    return Bacon.Observable.prototype.bufferingThrottle.apply(this, arguments).toProperty();\n  };\n\n  Bus = (function(superClass) {\n    extend(Bus, superClass);\n\n    function Bus() {\n      this.guardedSink = bind(this.guardedSink, this);\n      this.subscribeAll = bind(this.subscribeAll, this);\n      this.unsubAll = bind(this.unsubAll, this);\n      this.sink = void 0;\n      this.subscriptions = [];\n      this.ended = false;\n      Bus.__super__.constructor.call(this, describe(Bacon, \"Bus\"), this.subscribeAll);\n    }\n\n    Bus.prototype.unsubAll = function() {\n      var j, len1, ref, sub;\n      ref = this.subscriptions;\n      for (j = 0, len1 = ref.length; j < len1; j++) {\n        sub = ref[j];\n        if (typeof sub.unsub === \"function\") {\n          sub.unsub();\n        }\n      }\n      return void 0;\n    };\n\n    Bus.prototype.subscribeAll = function(newSink) {\n      var j, len1, ref, subscription;\n      this.sink = newSink;\n      ref = cloneArray(this.subscriptions);\n      for (j = 0, len1 = ref.length; j < len1; j++) {\n        subscription = ref[j];\n        this.subscribeInput(subscription);\n      }\n      return this.unsubAll;\n    };\n\n    Bus.prototype.guardedSink = function(input) {\n      return (function(_this) {\n        return function(event) {\n          if (event.isEnd()) {\n            _this.unsubscribeInput(input);\n            return Bacon.noMore;\n          } else {\n            return _this.sink(event);\n          }\n        };\n      })(this);\n    };\n\n    Bus.prototype.subscribeInput = function(subscription) {\n      return subscription.unsub = subscription.input.dispatcher.subscribe(this.guardedSink(subscription.input));\n    };\n\n    Bus.prototype.unsubscribeInput = function(input) {\n      var i, j, len1, ref, sub;\n      ref = this.subscriptions;\n      for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {\n        sub = ref[i];\n        if (sub.input === input) {\n          if (typeof sub.unsub === \"function\") {\n            sub.unsub();\n          }\n          this.subscriptions.splice(i, 1);\n          return;\n        }\n      }\n    };\n\n    Bus.prototype.plug = function(input) {\n      var sub;\n      assertObservable(input);\n      if (this.ended) {\n        return;\n      }\n      sub = {\n        input: input\n      };\n      this.subscriptions.push(sub);\n      if ((this.sink != null)) {\n        this.subscribeInput(sub);\n      }\n      return (function(_this) {\n        return function() {\n          return _this.unsubscribeInput(input);\n        };\n      })(this);\n    };\n\n    Bus.prototype.end = function() {\n      this.ended = true;\n      this.unsubAll();\n      return typeof this.sink === \"function\" ? this.sink(endEvent()) : void 0;\n    };\n\n    Bus.prototype.push = function(value) {\n      return typeof this.sink === \"function\" ? this.sink(nextEvent(value)) : void 0;\n    };\n\n    Bus.prototype.error = function(error) {\n      return typeof this.sink === \"function\" ? this.sink(new Error(error)) : void 0;\n    };\n\n    return Bus;\n\n  })(EventStream);\n\n  Bacon.Bus = Bus;\n\n  liftCallback = function(desc, wrapped) {\n    return withMethodCallSupport(function() {\n      var args, f, stream;\n      f = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n      stream = partiallyApplied(wrapped, [\n        function(values, callback) {\n          return f.apply(null, slice.call(values).concat([callback]));\n        }\n      ]);\n      return withDescription.apply(null, [Bacon, desc, f].concat(slice.call(args), [Bacon.combineAsArray(args).flatMap(stream)]));\n    });\n  };\n\n  Bacon.fromCallback = liftCallback(\"fromCallback\", function() {\n    var args, f;\n    f = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n    return Bacon.fromBinder(function(handler) {\n      makeFunction(f, args)(handler);\n      return nop;\n    }, (function(value) {\n      return [value, endEvent()];\n    }));\n  });\n\n  Bacon.fromNodeCallback = liftCallback(\"fromNodeCallback\", function() {\n    var args, f;\n    f = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n    return Bacon.fromBinder(function(handler) {\n      makeFunction(f, args)(handler);\n      return nop;\n    }, function(error, value) {\n      if (error) {\n        return [new Error(error), endEvent()];\n      }\n      return [value, endEvent()];\n    });\n  });\n\n  Bacon.EventStream.prototype.debounce = function(delay) {\n    return withDescription(this, \"debounce\", delay, this.flatMapLatest(function(value) {\n      return Bacon.later(delay, value);\n    }));\n  };\n\n  Bacon.Property.prototype.debounce = function(delay) {\n    return this.delayChanges(\"debounce\", delay, function(changes) {\n      return changes.debounce(delay);\n    });\n  };\n\n  Bacon.EventStream.prototype.debounceImmediate = function(delay) {\n    return withDescription(this, \"debounceImmediate\", delay, this.flatMapFirst(function(value) {\n      return Bacon.once(value).concat(Bacon.later(delay).filter(false));\n    }));\n  };\n\n  Bacon.Observable.prototype.scan = function(seed, f) {\n    var acc, resultProperty, subscribe;\n    f = toCombinator(f);\n    acc = toOption(seed);\n    subscribe = (function(_this) {\n      return function(sink) {\n        var initSent, reply, sendInit, unsub;\n        initSent = false;\n        unsub = nop;\n        reply = Bacon.more;\n        sendInit = function() {\n          if (!initSent) {\n            return acc.forEach(function(value) {\n              initSent = true;\n              reply = sink(new Initial(function() {\n                return value;\n              }));\n              if (reply === Bacon.noMore) {\n                unsub();\n                return unsub = nop;\n              }\n            });\n          }\n        };\n        unsub = _this.dispatcher.subscribe(function(event) {\n          var next, prev;\n          if (event.hasValue()) {\n            if (initSent && event.isInitial()) {\n              return Bacon.more;\n            } else {\n              if (!event.isInitial()) {\n                sendInit();\n              }\n              initSent = true;\n              prev = acc.getOrElse(void 0);\n              next = f(prev, event.value());\n              acc = new Some(next);\n              return sink(event.apply(function() {\n                return next;\n              }));\n            }\n          } else {\n            if (event.isEnd()) {\n              reply = sendInit();\n            }\n            if (reply !== Bacon.noMore) {\n              return sink(event);\n            }\n          }\n        });\n        UpdateBarrier.whenDoneWith(resultProperty, sendInit);\n        return unsub;\n      };\n    })(this);\n    return resultProperty = new Property(describe(this, \"scan\", seed, f), subscribe);\n  };\n\n  Bacon.Observable.prototype.diff = function(start, f) {\n    f = toCombinator(f);\n    return withDescription(this, \"diff\", start, f, this.scan([start], function(prevTuple, next) {\n      return [next, f(prevTuple[0], next)];\n    }).filter(function(tuple) {\n      return tuple.length === 2;\n    }).map(function(tuple) {\n      return tuple[1];\n    }));\n  };\n\n  Bacon.Observable.prototype.doAction = function() {\n    var f;\n    f = makeFunctionArgs(arguments);\n    return withDescription(this, \"doAction\", f, this.withHandler(function(event) {\n      if (event.hasValue()) {\n        f(event.value());\n      }\n      return this.push(event);\n    }));\n  };\n\n  Bacon.Observable.prototype.endOnError = function() {\n    var args, f;\n    f = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n    if (f == null) {\n      f = true;\n    }\n    return convertArgsToFunction(this, f, args, function(f) {\n      return withDescription(this, \"endOnError\", this.withHandler(function(event) {\n        if (event.isError() && f(event.error)) {\n          this.push(event);\n          return this.push(endEvent());\n        } else {\n          return this.push(event);\n        }\n      }));\n    });\n  };\n\n  Observable.prototype.errors = function() {\n    return withDescription(this, \"errors\", this.filter(function() {\n      return false;\n    }));\n  };\n\n  valueAndEnd = (function(value) {\n    return [value, endEvent()];\n  });\n\n  Bacon.fromPromise = function(promise, abort) {\n    return withDescription(Bacon, \"fromPromise\", promise, Bacon.fromBinder(function(handler) {\n      var ref;\n      if ((ref = promise.then(handler, function(e) {\n        return handler(new Error(e));\n      })) != null) {\n        if (typeof ref.done === \"function\") {\n          ref.done();\n        }\n      }\n      return function() {\n        if (abort) {\n          return typeof promise.abort === \"function\" ? promise.abort() : void 0;\n        }\n      };\n    }, valueAndEnd));\n  };\n\n  Bacon.Observable.prototype.mapError = function() {\n    var f;\n    f = makeFunctionArgs(arguments);\n    return withDescription(this, \"mapError\", f, this.withHandler(function(event) {\n      if (event.isError()) {\n        return this.push(nextEvent(f(event.error)));\n      } else {\n        return this.push(event);\n      }\n    }));\n  };\n\n  Bacon.Observable.prototype.flatMapError = function(fn) {\n    return withDescription(this, \"flatMapError\", fn, this.mapError(function(err) {\n      return new Error(err);\n    }).flatMap(function(x) {\n      if (x instanceof Error) {\n        return fn(x.error);\n      } else {\n        return Bacon.once(x);\n      }\n    }));\n  };\n\n  Bacon.EventStream.prototype.sampledBy = function(sampler, combinator) {\n    return withDescription(this, \"sampledBy\", sampler, combinator, this.toProperty().sampledBy(sampler, combinator));\n  };\n\n  Bacon.Property.prototype.sampledBy = function(sampler, combinator) {\n    var lazy, result, samplerSource, stream, thisSource;\n    if (combinator != null) {\n      combinator = toCombinator(combinator);\n    } else {\n      lazy = true;\n      combinator = function(f) {\n        return f.value();\n      };\n    }\n    thisSource = new Source(this, false, lazy);\n    samplerSource = new Source(sampler, true, lazy);\n    stream = Bacon.when([thisSource, samplerSource], combinator);\n    result = sampler instanceof Property ? stream.toProperty() : stream;\n    return withDescription(this, \"sampledBy\", sampler, combinator, result);\n  };\n\n  Bacon.Property.prototype.sample = function(interval) {\n    return withDescription(this, \"sample\", interval, this.sampledBy(Bacon.interval(interval, {})));\n  };\n\n  Bacon.Observable.prototype.map = function() {\n    var args, p;\n    p = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n    if (p instanceof Property) {\n      return p.sampledBy(this, former);\n    } else {\n      return convertArgsToFunction(this, p, args, function(f) {\n        return withDescription(this, \"map\", f, this.withHandler(function(event) {\n          return this.push(event.fmap(f));\n        }));\n      });\n    }\n  };\n\n  Bacon.Observable.prototype.fold = function(seed, f) {\n    return withDescription(this, \"fold\", seed, f, this.scan(seed, f).sampledBy(this.filter(false).mapEnd().toProperty()));\n  };\n\n  Observable.prototype.reduce = Observable.prototype.fold;\n\n  Bacon.EventStream.prototype.merge = function(right) {\n    var left;\n    assertEventStream(right);\n    left = this;\n    return withDescription(left, \"merge\", right, Bacon.mergeAll(this, right));\n  };\n\n  Bacon.mergeAll = function() {\n    var streams;\n    streams = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    if (isArray(streams[0])) {\n      streams = streams[0];\n    }\n    if (streams.length) {\n      return new EventStream(describe.apply(null, [Bacon, \"mergeAll\"].concat(slice.call(streams))), function(sink) {\n        var ends, sinks, smartSink;\n        ends = 0;\n        smartSink = function(obs) {\n          return function(unsubBoth) {\n            return obs.dispatcher.subscribe(function(event) {\n              var reply;\n              if (event.isEnd()) {\n                ends++;\n                if (ends === streams.length) {\n                  return sink(endEvent());\n                } else {\n                  return Bacon.more;\n                }\n              } else {\n                reply = sink(event);\n                if (reply === Bacon.noMore) {\n                  unsubBoth();\n                }\n                return reply;\n              }\n            });\n          };\n        };\n        sinks = _.map(smartSink, streams);\n        return new Bacon.CompositeUnsubscribe(sinks).unsubscribe;\n      });\n    } else {\n      return Bacon.never();\n    }\n  };\n\n  Bacon.Observable.prototype.take = function(count) {\n    if (count <= 0) {\n      return Bacon.never();\n    }\n    return withDescription(this, \"take\", count, this.withHandler(function(event) {\n      if (!event.hasValue()) {\n        return this.push(event);\n      } else {\n        count--;\n        if (count > 0) {\n          return this.push(event);\n        } else {\n          if (count === 0) {\n            this.push(event);\n          }\n          this.push(endEvent());\n          return Bacon.noMore;\n        }\n      }\n    }));\n  };\n\n  Bacon.fromArray = function(values) {\n    var i;\n    assertArray(values);\n    if (!values.length) {\n      return withDescription(Bacon, \"fromArray\", values, Bacon.never());\n    } else {\n      i = 0;\n      return new EventStream(describe(Bacon, \"fromArray\", values), function(sink) {\n        var push, reply, unsubd;\n        unsubd = false;\n        reply = Bacon.more;\n        push = function() {\n          var value;\n          if ((reply !== Bacon.noMore) && !unsubd) {\n            value = values[i++];\n            reply = sink(toEvent(value));\n            if (reply !== Bacon.noMore) {\n              if (i === values.length) {\n                return sink(endEvent());\n              } else {\n                return UpdateBarrier.afterTransaction(push);\n              }\n            }\n          }\n        };\n        push();\n        return function() {\n          return unsubd = true;\n        };\n      });\n    }\n  };\n\n  Bacon.EventStream.prototype.holdWhen = function(valve) {\n    var putToHold, releaseHold, valve_;\n    valve_ = valve.startWith(false);\n    releaseHold = valve_.filter(function(x) {\n      return !x;\n    });\n    putToHold = valve_.filter(_.id);\n    return withDescription(this, \"holdWhen\", valve, this.filter(false).merge(valve_.flatMapConcat((function(_this) {\n      return function(shouldHold) {\n        if (!shouldHold) {\n          return _this.takeUntil(putToHold);\n        } else {\n          return _this.scan([], (function(xs, x) {\n            return xs.concat([x]);\n          })).sampledBy(releaseHold).take(1).flatMap(Bacon.fromArray);\n        }\n      };\n    })(this))));\n  };\n\n  Bacon.$ = {};\n\n  Bacon.$.asEventStream = function(eventName, selector, eventTransformer) {\n    var ref;\n    if (_.isFunction(selector)) {\n      ref = [selector, void 0], eventTransformer = ref[0], selector = ref[1];\n    }\n    return withDescription(this.selector || this, \"asEventStream\", eventName, Bacon.fromBinder((function(_this) {\n      return function(handler) {\n        _this.on(eventName, selector, handler);\n        return function() {\n          return _this.off(eventName, selector, handler);\n        };\n      };\n    })(this), eventTransformer));\n  };\n\n  if ((ref = typeof jQuery !== \"undefined\" && jQuery !== null ? jQuery : typeof Zepto !== \"undefined\" && Zepto !== null ? Zepto : void 0) != null) {\n    ref.fn.asEventStream = Bacon.$.asEventStream;\n  }\n\n  Bacon.Observable.prototype.log = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    this.subscribe(function(event) {\n      return typeof console !== \"undefined\" && console !== null ? typeof console.log === \"function\" ? console.log.apply(console, slice.call(args).concat([event.log()])) : void 0 : void 0;\n    });\n    return this;\n  };\n\n  Bacon.repeat = function(generator) {\n    var index;\n    index = 0;\n    return Bacon.fromBinder(function(sink) {\n      var flag, handleEvent, reply, subscribeNext, unsub;\n      flag = false;\n      reply = Bacon.more;\n      unsub = function() {};\n      handleEvent = function(event) {\n        if (event.isEnd()) {\n          if (!flag) {\n            return flag = true;\n          } else {\n            return subscribeNext();\n          }\n        } else {\n          return reply = sink(event);\n        }\n      };\n      subscribeNext = function() {\n        var next;\n        flag = true;\n        while (flag && reply !== Bacon.noMore) {\n          next = generator(index++);\n          flag = false;\n          if (next) {\n            unsub = next.subscribeInternal(handleEvent);\n          } else {\n            sink(endEvent());\n          }\n        }\n        return flag = true;\n      };\n      subscribeNext();\n      return function() {\n        return unsub();\n      };\n    });\n  };\n\n  Bacon.retry = function(options) {\n    var delay, error, finished, isRetryable, maxRetries, retries, source;\n    if (!_.isFunction(options.source)) {\n      throw new Exception(\"'source' option has to be a function\");\n    }\n    source = options.source;\n    retries = options.retries || 0;\n    maxRetries = options.maxRetries || retries;\n    delay = options.delay || function() {\n      return 0;\n    };\n    isRetryable = options.isRetryable || function() {\n      return true;\n    };\n    finished = false;\n    error = null;\n    return withDescription(Bacon, \"retry\", options, Bacon.repeat(function() {\n      var context, pause, valueStream;\n      if (finished) {\n        return null;\n      } else {\n        valueStream = function() {\n          return source().endOnError().withHandler(function(event) {\n            if (event.isError()) {\n              error = event;\n              if (isRetryable(error.error) && retries > 0) {\n\n              } else {\n                finished = true;\n                return this.push(event);\n              }\n            } else {\n              if (event.hasValue()) {\n                error = null;\n                finished = true;\n              }\n              return this.push(event);\n            }\n          });\n        };\n        if (error) {\n          context = {\n            error: error.error,\n            retriesDone: maxRetries - retries\n          };\n          pause = Bacon.later(delay(context)).filter(false);\n          retries = retries - 1;\n          return pause.concat(Bacon.once().flatMap(valueStream));\n        } else {\n          return valueStream();\n        }\n      }\n    }));\n  };\n\n  Bacon.Observable.prototype.skip = function(count) {\n    return withDescription(this, \"skip\", count, this.withHandler(function(event) {\n      if (!event.hasValue()) {\n        return this.push(event);\n      } else if (count > 0) {\n        count--;\n        return Bacon.more;\n      } else {\n        return this.push(event);\n      }\n    }));\n  };\n\n  Bacon.EventStream.prototype.skipUntil = function(starter) {\n    var started;\n    started = starter.take(1).map(true).toProperty(false);\n    return withDescription(this, \"skipUntil\", starter, this.filter(started));\n  };\n\n  Bacon.EventStream.prototype.skipWhile = function() {\n    var args, f, ok;\n    f = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n    ok = false;\n    return convertArgsToFunction(this, f, args, function(f) {\n      return withDescription(this, \"skipWhile\", f, this.withHandler(function(event) {\n        if (ok || !event.hasValue() || !f(event.value())) {\n          if (event.hasValue()) {\n            ok = true;\n          }\n          return this.push(event);\n        } else {\n          return Bacon.more;\n        }\n      }));\n    });\n  };\n\n  Bacon.Observable.prototype.slidingWindow = function(n, minValues) {\n    if (minValues == null) {\n      minValues = 0;\n    }\n    return withDescription(this, \"slidingWindow\", n, minValues, this.scan([], (function(window, value) {\n      return window.concat([value]).slice(-n);\n    })).filter((function(values) {\n      return values.length >= minValues;\n    })));\n  };\n\n  Bacon.spy = function(spy) {\n    return spys.push(spy);\n  };\n\n  spys = [];\n\n  registerObs = function(obs) {\n    var j, len1, spy;\n    if (spys.length) {\n      if (!registerObs.running) {\n        try {\n          registerObs.running = true;\n          for (j = 0, len1 = spys.length; j < len1; j++) {\n            spy = spys[j];\n            spy(obs);\n          }\n        } finally {\n          delete registerObs.running;\n        }\n      }\n    }\n    return void 0;\n  };\n\n  Bacon.Property.prototype.startWith = function(seed) {\n    return withDescription(this, \"startWith\", seed, this.scan(seed, function(prev, next) {\n      return next;\n    }));\n  };\n\n  Bacon.EventStream.prototype.startWith = function(seed) {\n    return withDescription(this, \"startWith\", seed, Bacon.once(seed).concat(this));\n  };\n\n  Bacon.Observable.prototype.takeWhile = function() {\n    var args, f;\n    f = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n    return convertArgsToFunction(this, f, args, function(f) {\n      return withDescription(this, \"takeWhile\", f, this.withHandler(function(event) {\n        if (event.filter(f)) {\n          return this.push(event);\n        } else {\n          this.push(endEvent());\n          return Bacon.noMore;\n        }\n      }));\n    });\n  };\n\n  Bacon.update = function() {\n    var i, initial, lateBindFirst, patterns;\n    initial = arguments[0], patterns = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n    lateBindFirst = function(f) {\n      return function() {\n        var args;\n        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n        return function(i) {\n          return f.apply(null, [i].concat(args));\n        };\n      };\n    };\n    i = patterns.length - 1;\n    while (i > 0) {\n      if (!(patterns[i] instanceof Function)) {\n        patterns[i] = (function(x) {\n          return function() {\n            return x;\n          };\n        })(patterns[i]);\n      }\n      patterns[i] = lateBindFirst(patterns[i]);\n      i = i - 2;\n    }\n    return withDescription.apply(null, [Bacon, \"update\", initial].concat(slice.call(patterns), [Bacon.when.apply(Bacon, patterns).scan(initial, (function(x, f) {\n      return f(x);\n    }))]));\n  };\n\n  Bacon.zipAsArray = function() {\n    var streams;\n    streams = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    if (isArray(streams[0])) {\n      streams = streams[0];\n    }\n    return withDescription.apply(null, [Bacon, \"zipAsArray\"].concat(slice.call(streams), [Bacon.zipWith(streams, function() {\n      var xs;\n      xs = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      return xs;\n    })]));\n  };\n\n  Bacon.zipWith = function() {\n    var f, ref1, streams;\n    f = arguments[0], streams = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n    if (!_.isFunction(f)) {\n      ref1 = [f, streams[0]], streams = ref1[0], f = ref1[1];\n    }\n    streams = _.map((function(s) {\n      return s.toEventStream();\n    }), streams);\n    return withDescription.apply(null, [Bacon, \"zipWith\", f].concat(slice.call(streams), [Bacon.when(streams, f)]));\n  };\n\n  Bacon.Observable.prototype.zip = function(other, f) {\n    if (f == null) {\n      f = Array;\n    }\n    return withDescription(this, \"zip\", other, Bacon.zipWith([this, other], f));\n  };\n\n  \n\nBacon.Observable.prototype.first = function () {\n  return withDescription(this, \"first\", this.take(1));\n};\n\nBacon.Observable.prototype.last = function () {\n  var lastEvent;\n\n  return withDescription(this, \"last\", this.withHandler(function (event) {\n    if (event.isEnd()) {\n      if (lastEvent) {\n        this.push(lastEvent);\n      }\n      this.push(endEvent());\n      return Bacon.noMore;\n    } else {\n      lastEvent = event;\n    }\n  }));\n};\n\nBacon.EventStream.prototype.throttle = function (delay) {\n  return withDescription(this, \"throttle\", delay, this.bufferWithTime(delay).map(function (values) {\n    return values[values.length - 1];\n  }));\n};\n\nBacon.Property.prototype.throttle = function (delay) {\n  return this.delayChanges(\"throttle\", delay, function (changes) {\n    return changes.throttle(delay);\n  });\n};\n\nObservable.prototype.firstToPromise = function (PromiseCtr) {\n  var _this = this;\n\n  if (typeof PromiseCtr !== \"function\") {\n    if (typeof Promise === \"function\") {\n      PromiseCtr = Promise;\n    } else {\n      throw new Exception(\"There isn't default Promise, use shim or parameter\");\n    }\n  }\n\n  return new PromiseCtr(function (resolve, reject) {\n    return _this.subscribe(function (event) {\n      if (event.hasValue()) {\n        resolve(event.value());\n      }\n      if (event.isError()) {\n        reject(event.error);\n      }\n\n      return Bacon.noMore;\n    });\n  });\n};\n\nObservable.prototype.toPromise = function (PromiseCtr) {\n  return this.last().firstToPromise(PromiseCtr);\n};\n\nif ((\"function\" !== \"undefined\" && __webpack_require__(12) !== null) && (__webpack_require__(13) != null)) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\n      return Bacon;\n    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    this.Bacon = Bacon;\n  } else if ((typeof module !== \"undefined\" && module !== null) && (module.exports != null)) {\n    module.exports = Bacon;\n    Bacon.Bacon = Bacon;\n  } else {\n    this.Bacon = Bacon;\n  }\n\n}).call(this);\n\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(14)(module)))\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/baconjs/dist/Bacon.js\n ** module id = 8\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///../~/baconjs/dist/Bacon.js?");

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	eval("/**\n * Core.js 0.6.1\n * https://github.com/zloirock/core-js\n * License: http://rock.mit-license.org\n * © 2015 Denis Pushkarev\n */\n!function(global, framework, undefined){\n'use strict';\n\n/******************************************************************************\n * Module : common                                                            *\n ******************************************************************************/\n\n  // Shortcuts for [[Class]] & property names\r\nvar OBJECT          = 'Object'\r\n  , FUNCTION        = 'Function'\r\n  , ARRAY           = 'Array'\r\n  , STRING          = 'String'\r\n  , NUMBER          = 'Number'\r\n  , REGEXP          = 'RegExp'\r\n  , DATE            = 'Date'\r\n  , MAP             = 'Map'\r\n  , SET             = 'Set'\r\n  , WEAKMAP         = 'WeakMap'\r\n  , WEAKSET         = 'WeakSet'\r\n  , SYMBOL          = 'Symbol'\r\n  , PROMISE         = 'Promise'\r\n  , MATH            = 'Math'\r\n  , ARGUMENTS       = 'Arguments'\r\n  , PROTOTYPE       = 'prototype'\r\n  , CONSTRUCTOR     = 'constructor'\r\n  , TO_STRING       = 'toString'\r\n  , TO_STRING_TAG   = TO_STRING + 'Tag'\r\n  , TO_LOCALE       = 'toLocaleString'\r\n  , HAS_OWN         = 'hasOwnProperty'\r\n  , FOR_EACH        = 'forEach'\r\n  , ITERATOR        = 'iterator'\r\n  , FF_ITERATOR     = '@@' + ITERATOR\r\n  , PROCESS         = 'process'\r\n  , CREATE_ELEMENT  = 'createElement'\r\n  // Aliases global objects and prototypes\r\n  , Function        = global[FUNCTION]\r\n  , Object          = global[OBJECT]\r\n  , Array           = global[ARRAY]\r\n  , String          = global[STRING]\r\n  , Number          = global[NUMBER]\r\n  , RegExp          = global[REGEXP]\r\n  , Date            = global[DATE]\r\n  , Map             = global[MAP]\r\n  , Set             = global[SET]\r\n  , WeakMap         = global[WEAKMAP]\r\n  , WeakSet         = global[WEAKSET]\r\n  , Symbol          = global[SYMBOL]\r\n  , Math            = global[MATH]\r\n  , TypeError       = global.TypeError\r\n  , RangeError      = global.RangeError\r\n  , setTimeout      = global.setTimeout\r\n  , setImmediate    = global.setImmediate\r\n  , clearImmediate  = global.clearImmediate\r\n  , parseInt        = global.parseInt\r\n  , isFinite        = global.isFinite\r\n  , process         = global[PROCESS]\r\n  , nextTick        = process && process.nextTick\r\n  , document        = global.document\r\n  , html            = document && document.documentElement\r\n  , navigator       = global.navigator\r\n  , define          = global.define\r\n  , console         = global.console || {}\r\n  , ArrayProto      = Array[PROTOTYPE]\r\n  , ObjectProto     = Object[PROTOTYPE]\r\n  , FunctionProto   = Function[PROTOTYPE]\r\n  , Infinity        = 1 / 0\r\n  , DOT             = '.';\r\n\r\n// http://jsperf.com/core-js-isobject\r\nfunction isObject(it){\r\n  return it !== null && (typeof it == 'object' || typeof it == 'function');\r\n}\r\nfunction isFunction(it){\r\n  return typeof it == 'function';\r\n}\r\n// Native function?\r\nvar isNative = ctx(/./.test, /\\[native code\\]\\s*\\}\\s*$/, 1);\r\n\r\n// Object internal [[Class]] or toStringTag\r\n// http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.prototype.tostring\r\nvar toString = ObjectProto[TO_STRING];\r\nfunction setToStringTag(it, tag, stat){\r\n  if(it && !has(it = stat ? it : it[PROTOTYPE], SYMBOL_TAG))hidden(it, SYMBOL_TAG, tag);\r\n}\r\nfunction cof(it){\r\n  return toString.call(it).slice(8, -1);\r\n}\r\nfunction classof(it){\r\n  var O, T;\r\n  return it == undefined ? it === undefined ? 'Undefined' : 'Null'\r\n    : typeof (T = (O = Object(it))[SYMBOL_TAG]) == 'string' ? T : cof(O);\r\n}\r\n\r\n// Function\r\nvar call  = FunctionProto.call\r\n  , apply = FunctionProto.apply\r\n  , REFERENCE_GET;\r\n// Partial apply\r\nfunction part(/* ...args */){\r\n  var fn     = assertFunction(this)\r\n    , length = arguments.length\r\n    , args   = Array(length)\r\n    , i      = 0\r\n    , _      = path._\r\n    , holder = false;\r\n  while(length > i)if((args[i] = arguments[i++]) === _)holder = true;\r\n  return function(/* ...args */){\r\n    var that    = this\r\n      , _length = arguments.length\r\n      , i = 0, j = 0, _args;\r\n    if(!holder && !_length)return invoke(fn, args, that);\r\n    _args = args.slice();\r\n    if(holder)for(;length > i; i++)if(_args[i] === _)_args[i] = arguments[j++];\r\n    while(_length > j)_args.push(arguments[j++]);\r\n    return invoke(fn, _args, that);\r\n  }\r\n}\r\n// Optional / simple context binding\r\nfunction ctx(fn, that, length){\r\n  assertFunction(fn);\r\n  if(~length && that === undefined)return fn;\r\n  switch(length){\r\n    case 1: return function(a){\r\n      return fn.call(that, a);\r\n    }\r\n    case 2: return function(a, b){\r\n      return fn.call(that, a, b);\r\n    }\r\n    case 3: return function(a, b, c){\r\n      return fn.call(that, a, b, c);\r\n    }\r\n  } return function(/* ...args */){\r\n      return fn.apply(that, arguments);\r\n  }\r\n}\r\n// Fast apply\r\n// http://jsperf.lnkit.com/fast-apply/5\r\nfunction invoke(fn, args, that){\r\n  var un = that === undefined;\r\n  switch(args.length | 0){\r\n    case 0: return un ? fn()\r\n                      : fn.call(that);\r\n    case 1: return un ? fn(args[0])\r\n                      : fn.call(that, args[0]);\r\n    case 2: return un ? fn(args[0], args[1])\r\n                      : fn.call(that, args[0], args[1]);\r\n    case 3: return un ? fn(args[0], args[1], args[2])\r\n                      : fn.call(that, args[0], args[1], args[2]);\r\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\r\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\r\n    case 5: return un ? fn(args[0], args[1], args[2], args[3], args[4])\r\n                      : fn.call(that, args[0], args[1], args[2], args[3], args[4]);\r\n  } return              fn.apply(that, args);\r\n}\r\n\r\n// Object:\r\nvar create           = Object.create\r\n  , getPrototypeOf   = Object.getPrototypeOf\r\n  , setPrototypeOf   = Object.setPrototypeOf\r\n  , defineProperty   = Object.defineProperty\r\n  , defineProperties = Object.defineProperties\r\n  , getOwnDescriptor = Object.getOwnPropertyDescriptor\r\n  , getKeys          = Object.keys\r\n  , getNames         = Object.getOwnPropertyNames\r\n  , getSymbols       = Object.getOwnPropertySymbols\r\n  , isFrozen         = Object.isFrozen\r\n  , has              = ctx(call, ObjectProto[HAS_OWN], 2)\r\n  // Dummy, fix for not array-like ES3 string in es5 module\r\n  , ES5Object        = Object\r\n  , Dict;\r\nfunction toObject(it){\r\n  return ES5Object(assertDefined(it));\r\n}\r\nfunction returnIt(it){\r\n  return it;\r\n}\r\nfunction returnThis(){\r\n  return this;\r\n}\r\nfunction get(object, key){\r\n  if(has(object, key))return object[key];\r\n}\r\nfunction ownKeys(it){\r\n  assertObject(it);\r\n  return getSymbols ? getNames(it).concat(getSymbols(it)) : getNames(it);\r\n}\r\n// 19.1.2.1 Object.assign(target, source, ...)\r\nvar assign = Object.assign || function(target, source){\r\n  var T = Object(assertDefined(target))\r\n    , l = arguments.length\r\n    , i = 1;\r\n  while(l > i){\r\n    var S      = ES5Object(arguments[i++])\r\n      , keys   = getKeys(S)\r\n      , length = keys.length\r\n      , j      = 0\r\n      , key;\r\n    while(length > j)T[key = keys[j++]] = S[key];\r\n  }\r\n  return T;\r\n}\r\nfunction keyOf(object, el){\r\n  var O      = toObject(object)\r\n    , keys   = getKeys(O)\r\n    , length = keys.length\r\n    , index  = 0\r\n    , key;\r\n  while(length > index)if(O[key = keys[index++]] === el)return key;\r\n}\r\n\r\n// Array\r\n// array('str1,str2,str3') => ['str1', 'str2', 'str3']\r\nfunction array(it){\r\n  return String(it).split(',');\r\n}\r\nvar push    = ArrayProto.push\r\n  , unshift = ArrayProto.unshift\r\n  , slice   = ArrayProto.slice\r\n  , splice  = ArrayProto.splice\r\n  , indexOf = ArrayProto.indexOf\r\n  , forEach = ArrayProto[FOR_EACH];\r\n/*\r\n * 0 -> forEach\r\n * 1 -> map\r\n * 2 -> filter\r\n * 3 -> some\r\n * 4 -> every\r\n * 5 -> find\r\n * 6 -> findIndex\r\n */\r\nfunction createArrayMethod(type){\r\n  var isMap       = type == 1\r\n    , isFilter    = type == 2\r\n    , isSome      = type == 3\r\n    , isEvery     = type == 4\r\n    , isFindIndex = type == 6\r\n    , noholes     = type == 5 || isFindIndex;\r\n  return function(callbackfn/*, that = undefined */){\r\n    var O      = Object(assertDefined(this))\r\n      , that   = arguments[1]\r\n      , self   = ES5Object(O)\r\n      , f      = ctx(callbackfn, that, 3)\r\n      , length = toLength(self.length)\r\n      , index  = 0\r\n      , result = isMap ? Array(length) : isFilter ? [] : undefined\r\n      , val, res;\r\n    for(;length > index; index++)if(noholes || index in self){\r\n      val = self[index];\r\n      res = f(val, index, O);\r\n      if(type){\r\n        if(isMap)result[index] = res;             // map\r\n        else if(res)switch(type){\r\n          case 3: return true;                    // some\r\n          case 5: return val;                     // find\r\n          case 6: return index;                   // findIndex\r\n          case 2: result.push(val);               // filter\r\n        } else if(isEvery)return false;           // every\r\n      }\r\n    }\r\n    return isFindIndex ? -1 : isSome || isEvery ? isEvery : result;\r\n  }\r\n}\r\nfunction createArrayContains(isContains){\r\n  return function(el /*, fromIndex = 0 */){\r\n    var O      = toObject(this)\r\n      , length = toLength(O.length)\r\n      , index  = toIndex(arguments[1], length);\r\n    if(isContains && el != el){\r\n      for(;length > index; index++)if(sameNaN(O[index]))return isContains || index;\r\n    } else for(;length > index; index++)if(isContains || index in O){\r\n      if(O[index] === el)return isContains || index;\r\n    } return !isContains && -1;\r\n  }\r\n}\r\nfunction generic(A, B){\r\n  // strange IE quirks mode bug -> use typeof vs isFunction\r\n  return typeof A == 'function' ? A : B;\r\n}\r\n\r\n// Math\r\nvar MAX_SAFE_INTEGER = 0x1fffffffffffff // pow(2, 53) - 1 == 9007199254740991\r\n  , pow    = Math.pow\r\n  , abs    = Math.abs\r\n  , ceil   = Math.ceil\r\n  , floor  = Math.floor\r\n  , max    = Math.max\r\n  , min    = Math.min\r\n  , random = Math.random\r\n  , trunc  = Math.trunc || function(it){\r\n      return (it > 0 ? floor : ceil)(it);\r\n    }\r\n// 20.1.2.4 Number.isNaN(number)\r\nfunction sameNaN(number){\r\n  return number != number;\r\n}\r\n// 7.1.4 ToInteger\r\nfunction toInteger(it){\r\n  return isNaN(it) ? 0 : trunc(it);\r\n}\r\n// 7.1.15 ToLength\r\nfunction toLength(it){\r\n  return it > 0 ? min(toInteger(it), MAX_SAFE_INTEGER) : 0;\r\n}\r\nfunction toIndex(index, length){\r\n  var index = toInteger(index);\r\n  return index < 0 ? max(index + length, 0) : min(index, length);\r\n}\r\nfunction lz(num){\r\n  return num > 9 ? num : '0' + num;\r\n}\r\n\r\nfunction createReplacer(regExp, replace, isStatic){\r\n  var replacer = isObject(replace) ? function(part){\r\n    return replace[part];\r\n  } : replace;\r\n  return function(it){\r\n    return String(isStatic ? it : this).replace(regExp, replacer);\r\n  }\r\n}\r\nfunction createPointAt(toString){\r\n  return function(pos){\r\n    var s = String(assertDefined(this))\r\n      , i = toInteger(pos)\r\n      , l = s.length\r\n      , a, b;\r\n    if(i < 0 || i >= l)return toString ? '' : undefined;\r\n    a = s.charCodeAt(i);\r\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\r\n      ? toString ? s.charAt(i) : a\r\n      : toString ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\r\n  }\r\n}\r\n\r\n// Assertion & errors\r\nvar REDUCE_ERROR = 'Reduce of empty object with no initial value';\r\nfunction assert(condition, msg1, msg2){\r\n  if(!condition)throw TypeError(msg2 ? msg1 + msg2 : msg1);\r\n}\r\nfunction assertDefined(it){\r\n  if(it == undefined)throw TypeError('Function called on null or undefined');\r\n  return it;\r\n}\r\nfunction assertFunction(it){\r\n  assert(isFunction(it), it, ' is not a function!');\r\n  return it;\r\n}\r\nfunction assertObject(it){\r\n  assert(isObject(it), it, ' is not an object!');\r\n  return it;\r\n}\r\nfunction assertInstance(it, Constructor, name){\r\n  assert(it instanceof Constructor, name, \": use the 'new' operator!\");\r\n}\r\n\r\n// Property descriptors & Symbol\r\nfunction descriptor(bitmap, value){\r\n  return {\r\n    enumerable  : !(bitmap & 1),\r\n    configurable: !(bitmap & 2),\r\n    writable    : !(bitmap & 4),\r\n    value       : value\r\n  }\r\n}\r\nfunction simpleSet(object, key, value){\r\n  object[key] = value;\r\n  return object;\r\n}\r\nfunction createDefiner(bitmap){\r\n  return DESC ? function(object, key, value){\r\n    return defineProperty(object, key, descriptor(bitmap, value));\r\n  } : simpleSet;\r\n}\r\nfunction uid(key){\r\n  return SYMBOL + '(' + key + ')_' + (++sid + random())[TO_STRING](36);\r\n}\r\nfunction getWellKnownSymbol(name, setter){\r\n  return (Symbol && Symbol[name]) || (setter ? Symbol : safeSymbol)(SYMBOL + DOT + name);\r\n}\r\n// The engine works fine with descriptors? Thank's IE8 for his funny defineProperty.\r\nvar DESC = !!function(){\r\n      try {\r\n        return defineProperty({}, 'a', {get: function(){ return 2 }}).a == 2;\r\n      } catch(e){}\r\n    }()\r\n  , sid    = 0\r\n  , hidden = createDefiner(1)\r\n  , set    = Symbol ? simpleSet : hidden\r\n  , safeSymbol = Symbol || uid;\r\nfunction assignHidden(target, src){\r\n  for(var key in src)hidden(target, key, src[key]);\r\n  return target;\r\n}\r\n\r\nvar SYMBOL_UNSCOPABLES = getWellKnownSymbol('unscopables')\r\n  , ArrayUnscopables   = ArrayProto[SYMBOL_UNSCOPABLES] || {}\r\n  , SYMBOL_TAG         = getWellKnownSymbol(TO_STRING_TAG)\r\n  , SYMBOL_SPECIES     = getWellKnownSymbol('species')\r\n  , SYMBOL_ITERATOR;\r\nfunction setSpecies(C){\r\n  if(DESC && (framework || !isNative(C)))defineProperty(C, SYMBOL_SPECIES, {\r\n    configurable: true,\r\n    get: returnThis\r\n  });\r\n}\n\n/******************************************************************************\n * Module : common.export                                                     *\n ******************************************************************************/\n\nvar NODE = cof(process) == PROCESS\r\n  , core = {}\r\n  , path = framework ? global : core\r\n  , old  = global.core\r\n  , exportGlobal\r\n  // type bitmap\r\n  , FORCED = 1\r\n  , GLOBAL = 2\r\n  , STATIC = 4\r\n  , PROTO  = 8\r\n  , BIND   = 16\r\n  , WRAP   = 32;\r\nfunction $define(type, name, source){\r\n  var key, own, out, exp\r\n    , isGlobal = type & GLOBAL\r\n    , target   = isGlobal ? global : (type & STATIC)\r\n        ? global[name] : (global[name] || ObjectProto)[PROTOTYPE]\r\n    , exports  = isGlobal ? core : core[name] || (core[name] = {});\r\n  if(isGlobal)source = name;\r\n  for(key in source){\r\n    // there is a similar native\r\n    own = !(type & FORCED) && target && key in target\r\n      && (!isFunction(target[key]) || isNative(target[key]));\r\n    // export native or passed\r\n    out = (own ? target : source)[key];\r\n    // prevent global pollution for namespaces\r\n    if(!framework && isGlobal && !isFunction(target[key]))exp = source[key];\r\n    // bind timers to global for call from export context\r\n    else if(type & BIND && own)exp = ctx(out, global);\r\n    // wrap global constructors for prevent change them in library\r\n    else if(type & WRAP && !framework && target[key] == out){\r\n      exp = function(param){\r\n        return this instanceof out ? new out(param) : out(param);\r\n      }\r\n      exp[PROTOTYPE] = out[PROTOTYPE];\r\n    } else exp = type & PROTO && isFunction(out) ? ctx(call, out) : out;\r\n    // extend global\r\n    if(framework && target && !own){\r\n      if(isGlobal)target[key] = out;\r\n      else delete target[key] && hidden(target, key, out);\r\n    }\r\n    // export\r\n    if(exports[key] != out)hidden(exports, key, exp);\r\n  }\r\n}\r\n// CommonJS export\r\nif(typeof module != 'undefined' && module.exports)module.exports = core;\r\n// RequireJS export\r\nelse if(isFunction(define) && define.amd)define(function(){return core});\r\n// Export to global object\r\nelse exportGlobal = true;\r\nif(exportGlobal || framework){\r\n  core.noConflict = function(){\r\n    global.core = old;\r\n    return core;\r\n  }\r\n  global.core = core;\r\n}\n\n/******************************************************************************\n * Module : common.iterators                                                  *\n ******************************************************************************/\n\nSYMBOL_ITERATOR = getWellKnownSymbol(ITERATOR);\r\nvar ITER  = safeSymbol('iter')\r\n  , KEY   = 1\r\n  , VALUE = 2\r\n  , Iterators = {}\r\n  , IteratorPrototype = {}\r\n    // Safari has byggy iterators w/o `next`\r\n  , BUGGY_ITERATORS = 'keys' in ArrayProto && !('next' in [].keys());\r\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\r\nsetIterator(IteratorPrototype, returnThis);\r\nfunction setIterator(O, value){\r\n  hidden(O, SYMBOL_ITERATOR, value);\r\n  // Add iterator for FF iterator protocol\r\n  FF_ITERATOR in ArrayProto && hidden(O, FF_ITERATOR, value);\r\n}\r\nfunction createIterator(Constructor, NAME, next, proto){\r\n  Constructor[PROTOTYPE] = create(proto || IteratorPrototype, {next: descriptor(1, next)});\r\n  setToStringTag(Constructor, NAME + ' Iterator');\r\n}\r\nfunction defineIterator(Constructor, NAME, value, DEFAULT){\r\n  var proto = Constructor[PROTOTYPE]\r\n    , iter  = get(proto, SYMBOL_ITERATOR) || get(proto, FF_ITERATOR) || (DEFAULT && get(proto, DEFAULT)) || value;\r\n  if(framework){\r\n    // Define iterator\r\n    setIterator(proto, iter);\r\n    if(iter !== value){\r\n      var iterProto = getPrototypeOf(iter.call(new Constructor));\r\n      // Set @@toStringTag to native iterators\r\n      setToStringTag(iterProto, NAME + ' Iterator', true);\r\n      // FF fix\r\n      has(proto, FF_ITERATOR) && setIterator(iterProto, returnThis);\r\n    }\r\n  }\r\n  // Plug for library\r\n  Iterators[NAME] = iter;\r\n  // FF & v8 fix\r\n  Iterators[NAME + ' Iterator'] = returnThis;\r\n  return iter;\r\n}\r\nfunction defineStdIterators(Base, NAME, Constructor, next, DEFAULT, IS_SET){\r\n  function createIter(kind){\r\n    return function(){\r\n      return new Constructor(this, kind);\r\n    }\r\n  }\r\n  createIterator(Constructor, NAME, next);\r\n  var entries = createIter(KEY+VALUE)\r\n    , values  = createIter(VALUE);\r\n  if(DEFAULT == VALUE)values = defineIterator(Base, NAME, values, 'values');\r\n  else entries = defineIterator(Base, NAME, entries, 'entries');\r\n  if(DEFAULT){\r\n    $define(PROTO + FORCED * BUGGY_ITERATORS, NAME, {\r\n      entries: entries,\r\n      keys: IS_SET ? values : createIter(KEY),\r\n      values: values\r\n    });\r\n  }\r\n}\r\nfunction iterResult(done, value){\r\n  return {value: value, done: !!done};\r\n}\r\nfunction isIterable(it){\r\n  var O      = Object(it)\r\n    , Symbol = global[SYMBOL]\r\n    , hasExt = (Symbol && Symbol[ITERATOR] || FF_ITERATOR) in O;\r\n  return hasExt || SYMBOL_ITERATOR in O || has(Iterators, classof(O));\r\n}\r\nfunction getIterator(it){\r\n  var Symbol  = global[SYMBOL]\r\n    , ext     = it[Symbol && Symbol[ITERATOR] || FF_ITERATOR]\r\n    , getIter = ext || it[SYMBOL_ITERATOR] || Iterators[classof(it)];\r\n  return assertObject(getIter.call(it));\r\n}\r\nfunction stepCall(fn, value, entries){\r\n  return entries ? invoke(fn, value) : fn(value);\r\n}\r\nfunction checkDangerIterClosing(fn){\r\n  var danger = true;\r\n  var O = {\r\n    next: function(){ throw 1 },\r\n    'return': function(){ danger = false }\r\n  };\r\n  O[SYMBOL_ITERATOR] = returnThis;\r\n  try {\r\n    fn(O);\r\n  } catch(e){}\r\n  return danger;\r\n}\r\nfunction closeIterator(iterator){\r\n  var ret = iterator['return'];\r\n  if(ret !== undefined)ret.call(iterator);\r\n}\r\nfunction safeIterClose(exec, iterator){\r\n  try {\r\n    exec(iterator);\r\n  } catch(e){\r\n    closeIterator(iterator);\r\n    throw e;\r\n  }\r\n}\r\nfunction forOf(iterable, entries, fn, that){\r\n  safeIterClose(function(iterator){\r\n    var f = ctx(fn, that, entries ? 2 : 1)\r\n      , step;\r\n    while(!(step = iterator.next()).done)if(stepCall(f, step.value, entries) === false){\r\n      return closeIterator(iterator);\r\n    }\r\n  }, getIterator(iterable));\r\n}\n\n/******************************************************************************\n * Module : es6.symbol                                                        *\n ******************************************************************************/\n\n// ECMAScript 6 symbols shim\r\n!function(TAG, SymbolRegistry, AllSymbols, setter){\r\n  // 19.4.1.1 Symbol([description])\r\n  if(!isNative(Symbol)){\r\n    Symbol = function(description){\r\n      assert(!(this instanceof Symbol), SYMBOL + ' is not a ' + CONSTRUCTOR);\r\n      var tag = uid(description)\r\n        , sym = set(create(Symbol[PROTOTYPE]), TAG, tag);\r\n      AllSymbols[tag] = sym;\r\n      DESC && setter && defineProperty(ObjectProto, tag, {\r\n        configurable: true,\r\n        set: function(value){\r\n          hidden(this, tag, value);\r\n        }\r\n      });\r\n      return sym;\r\n    }\r\n    hidden(Symbol[PROTOTYPE], TO_STRING, function(){\r\n      return this[TAG];\r\n    });\r\n  }\r\n  $define(GLOBAL + WRAP, {Symbol: Symbol});\r\n  \r\n  var symbolStatics = {\r\n    // 19.4.2.1 Symbol.for(key)\r\n    'for': function(key){\r\n      return has(SymbolRegistry, key += '')\r\n        ? SymbolRegistry[key]\r\n        : SymbolRegistry[key] = Symbol(key);\r\n    },\r\n    // 19.4.2.4 Symbol.iterator\r\n    iterator: SYMBOL_ITERATOR || getWellKnownSymbol(ITERATOR),\r\n    // 19.4.2.5 Symbol.keyFor(sym)\r\n    keyFor: part.call(keyOf, SymbolRegistry),\r\n    // 19.4.2.10 Symbol.species\r\n    species: SYMBOL_SPECIES,\r\n    // 19.4.2.13 Symbol.toStringTag\r\n    toStringTag: SYMBOL_TAG = getWellKnownSymbol(TO_STRING_TAG, true),\r\n    // 19.4.2.14 Symbol.unscopables\r\n    unscopables: SYMBOL_UNSCOPABLES,\r\n    pure: safeSymbol,\r\n    set: set,\r\n    useSetter: function(){setter = true},\r\n    useSimple: function(){setter = false}\r\n  };\r\n  // 19.4.2.2 Symbol.hasInstance\r\n  // 19.4.2.3 Symbol.isConcatSpreadable\r\n  // 19.4.2.6 Symbol.match\r\n  // 19.4.2.8 Symbol.replace\r\n  // 19.4.2.9 Symbol.search\r\n  // 19.4.2.11 Symbol.split\r\n  // 19.4.2.12 Symbol.toPrimitive\r\n  forEach.call(array('hasInstance,isConcatSpreadable,match,replace,search,split,toPrimitive'),\r\n    function(it){\r\n      symbolStatics[it] = getWellKnownSymbol(it);\r\n    }\r\n  );\r\n  $define(STATIC, SYMBOL, symbolStatics);\r\n  \r\n  setToStringTag(Symbol, SYMBOL);\r\n  \r\n  $define(STATIC + FORCED * !isNative(Symbol), OBJECT, {\r\n    // 19.1.2.7 Object.getOwnPropertyNames(O)\r\n    getOwnPropertyNames: function(it){\r\n      var names = getNames(toObject(it)), result = [], key, i = 0;\r\n      while(names.length > i)has(AllSymbols, key = names[i++]) || result.push(key);\r\n      return result;\r\n    },\r\n    // 19.1.2.8 Object.getOwnPropertySymbols(O)\r\n    getOwnPropertySymbols: function(it){\r\n      var names = getNames(toObject(it)), result = [], key, i = 0;\r\n      while(names.length > i)has(AllSymbols, key = names[i++]) && result.push(AllSymbols[key]);\r\n      return result;\r\n    }\r\n  });\r\n  \r\n  // 20.2.1.9 Math[@@toStringTag]\r\n  setToStringTag(Math, MATH, true);\r\n  // 24.3.3 JSON[@@toStringTag]\r\n  setToStringTag(global.JSON, 'JSON', true);\r\n}(safeSymbol('tag'), {}, {}, true);\n\n/******************************************************************************\n * Module : es6.object.statics                                                *\n ******************************************************************************/\n\n!function(){\r\n  var objectStatic = {\r\n    // 19.1.3.1 Object.assign(target, source)\r\n    assign: assign,\r\n    // 19.1.3.10 Object.is(value1, value2)\r\n    is: function(x, y){\r\n      return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;\r\n    }\r\n  };\r\n  // 19.1.3.19 Object.setPrototypeOf(O, proto)\r\n  // Works with __proto__ only. Old v8 can't works with null proto objects.\r\n  '__proto__' in ObjectProto && function(buggy, set){\r\n    try {\r\n      set = ctx(call, getOwnDescriptor(ObjectProto, '__proto__').set, 2);\r\n      set({}, ArrayProto);\r\n    } catch(e){ buggy = true }\r\n    objectStatic.setPrototypeOf = setPrototypeOf = setPrototypeOf || function(O, proto){\r\n      assertObject(O);\r\n      assert(proto === null || isObject(proto), proto, \": can't set as prototype!\");\r\n      if(buggy)O.__proto__ = proto;\r\n      else set(O, proto);\r\n      return O;\r\n    }\r\n  }();\r\n  $define(STATIC, OBJECT, objectStatic);\r\n}();\n\n/******************************************************************************\n * Module : es6.object.statics-accept-primitives                              *\n ******************************************************************************/\n\n!function(){\r\n  // Object static methods accept primitives\r\n  function wrapObjectMethod(key, MODE){\r\n    var fn  = Object[key]\r\n      , exp = core[OBJECT][key]\r\n      , f   = 0\r\n      , o   = {};\r\n    if(!exp || isNative(exp)){\r\n      o[key] = MODE == 1 ? function(it){\r\n        return isObject(it) ? fn(it) : it;\r\n      } : MODE == 2 ? function(it){\r\n        return isObject(it) ? fn(it) : true;\r\n      } : MODE == 3 ? function(it){\r\n        return isObject(it) ? fn(it) : false;\r\n      } : MODE == 4 ? function(it, key){\r\n        return fn(toObject(it), key);\r\n      } : function(it){\r\n        return fn(toObject(it));\r\n      };\r\n      try { fn(DOT) }\r\n      catch(e){ f = 1 }\r\n      $define(STATIC + FORCED * f, OBJECT, o);\r\n    }\r\n  }\r\n  wrapObjectMethod('freeze', 1);\r\n  wrapObjectMethod('seal', 1);\r\n  wrapObjectMethod('preventExtensions', 1);\r\n  wrapObjectMethod('isFrozen', 2);\r\n  wrapObjectMethod('isSealed', 2);\r\n  wrapObjectMethod('isExtensible', 3);\r\n  wrapObjectMethod('getOwnPropertyDescriptor', 4);\r\n  wrapObjectMethod('getPrototypeOf');\r\n  wrapObjectMethod('keys');\r\n  wrapObjectMethod('getOwnPropertyNames');\r\n}();\n\n/******************************************************************************\n * Module : es6.number.statics                                                *\n ******************************************************************************/\n\n!function(isInteger){\r\n  $define(STATIC, NUMBER, {\r\n    // 20.1.2.1 Number.EPSILON\r\n    EPSILON: pow(2, -52),\r\n    // 20.1.2.2 Number.isFinite(number)\r\n    isFinite: function(it){\r\n      return typeof it == 'number' && isFinite(it);\r\n    },\r\n    // 20.1.2.3 Number.isInteger(number)\r\n    isInteger: isInteger,\r\n    // 20.1.2.4 Number.isNaN(number)\r\n    isNaN: sameNaN,\r\n    // 20.1.2.5 Number.isSafeInteger(number)\r\n    isSafeInteger: function(number){\r\n      return isInteger(number) && abs(number) <= MAX_SAFE_INTEGER;\r\n    },\r\n    // 20.1.2.6 Number.MAX_SAFE_INTEGER\r\n    MAX_SAFE_INTEGER: MAX_SAFE_INTEGER,\r\n    // 20.1.2.10 Number.MIN_SAFE_INTEGER\r\n    MIN_SAFE_INTEGER: -MAX_SAFE_INTEGER,\r\n    // 20.1.2.12 Number.parseFloat(string)\r\n    parseFloat: parseFloat,\r\n    // 20.1.2.13 Number.parseInt(string, radix)\r\n    parseInt: parseInt\r\n  });\r\n// 20.1.2.3 Number.isInteger(number)\r\n}(Number.isInteger || function(it){\r\n  return !isObject(it) && isFinite(it) && floor(it) === it;\r\n});\n\n/******************************************************************************\n * Module : es6.math                                                          *\n ******************************************************************************/\n\n// ECMAScript 6 shim\r\n!function(){\r\n  // 20.2.2.28 Math.sign(x)\r\n  var E    = Math.E\r\n    , exp  = Math.exp\r\n    , log  = Math.log\r\n    , sqrt = Math.sqrt\r\n    , sign = Math.sign || function(x){\r\n        return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;\r\n      };\r\n  \r\n  // 20.2.2.5 Math.asinh(x)\r\n  function asinh(x){\r\n    return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : log(x + sqrt(x * x + 1));\r\n  }\r\n  // 20.2.2.14 Math.expm1(x)\r\n  function expm1(x){\r\n    return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : exp(x) - 1;\r\n  }\r\n    \r\n  $define(STATIC, MATH, {\r\n    // 20.2.2.3 Math.acosh(x)\r\n    acosh: function(x){\r\n      return (x = +x) < 1 ? NaN : isFinite(x) ? log(x / E + sqrt(x + 1) * sqrt(x - 1) / E) + 1 : x;\r\n    },\r\n    // 20.2.2.5 Math.asinh(x)\r\n    asinh: asinh,\r\n    // 20.2.2.7 Math.atanh(x)\r\n    atanh: function(x){\r\n      return (x = +x) == 0 ? x : log((1 + x) / (1 - x)) / 2;\r\n    },\r\n    // 20.2.2.9 Math.cbrt(x)\r\n    cbrt: function(x){\r\n      return sign(x = +x) * pow(abs(x), 1 / 3);\r\n    },\r\n    // 20.2.2.11 Math.clz32(x)\r\n    clz32: function(x){\r\n      return (x >>>= 0) ? 32 - x[TO_STRING](2).length : 32;\r\n    },\r\n    // 20.2.2.12 Math.cosh(x)\r\n    cosh: function(x){\r\n      return (exp(x = +x) + exp(-x)) / 2;\r\n    },\r\n    // 20.2.2.14 Math.expm1(x)\r\n    expm1: expm1,\r\n    // 20.2.2.16 Math.fround(x)\r\n    // TODO: fallback for IE9-\r\n    fround: function(x){\r\n      return new Float32Array([x])[0];\r\n    },\r\n    // 20.2.2.17 Math.hypot([value1[, value2[, … ]]])\r\n    hypot: function(value1, value2){\r\n      var sum  = 0\r\n        , len1 = arguments.length\r\n        , len2 = len1\r\n        , args = Array(len1)\r\n        , larg = -Infinity\r\n        , arg;\r\n      while(len1--){\r\n        arg = args[len1] = +arguments[len1];\r\n        if(arg == Infinity || arg == -Infinity)return Infinity;\r\n        if(arg > larg)larg = arg;\r\n      }\r\n      larg = arg || 1;\r\n      while(len2--)sum += pow(args[len2] / larg, 2);\r\n      return larg * sqrt(sum);\r\n    },\r\n    // 20.2.2.18 Math.imul(x, y)\r\n    imul: function(x, y){\r\n      var UInt16 = 0xffff\r\n        , xn = +x\r\n        , yn = +y\r\n        , xl = UInt16 & xn\r\n        , yl = UInt16 & yn;\r\n      return 0 | xl * yl + ((UInt16 & xn >>> 16) * yl + xl * (UInt16 & yn >>> 16) << 16 >>> 0);\r\n    },\r\n    // 20.2.2.20 Math.log1p(x)\r\n    log1p: function(x){\r\n      return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : log(1 + x);\r\n    },\r\n    // 20.2.2.21 Math.log10(x)\r\n    log10: function(x){\r\n      return log(x) / Math.LN10;\r\n    },\r\n    // 20.2.2.22 Math.log2(x)\r\n    log2: function(x){\r\n      return log(x) / Math.LN2;\r\n    },\r\n    // 20.2.2.28 Math.sign(x)\r\n    sign: sign,\r\n    // 20.2.2.30 Math.sinh(x)\r\n    sinh: function(x){\r\n      return (abs(x = +x) < 1) ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (E / 2);\r\n    },\r\n    // 20.2.2.33 Math.tanh(x)\r\n    tanh: function(x){\r\n      var a = expm1(x = +x)\r\n        , b = expm1(-x);\r\n      return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));\r\n    },\r\n    // 20.2.2.34 Math.trunc(x)\r\n    trunc: trunc\r\n  });\r\n}();\n\n/******************************************************************************\n * Module : es6.string                                                        *\n ******************************************************************************/\n\n!function(fromCharCode){\r\n  function assertNotRegExp(it){\r\n    if(cof(it) == REGEXP)throw TypeError();\r\n  }\r\n  \r\n  $define(STATIC, STRING, {\r\n    // 21.1.2.2 String.fromCodePoint(...codePoints)\r\n    fromCodePoint: function(x){\r\n      var res = []\r\n        , len = arguments.length\r\n        , i   = 0\r\n        , code\r\n      while(len > i){\r\n        code = +arguments[i++];\r\n        if(toIndex(code, 0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');\r\n        res.push(code < 0x10000\r\n          ? fromCharCode(code)\r\n          : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)\r\n        );\r\n      } return res.join('');\r\n    },\r\n    // 21.1.2.4 String.raw(callSite, ...substitutions)\r\n    raw: function(callSite){\r\n      var raw = toObject(callSite.raw)\r\n        , len = toLength(raw.length)\r\n        , sln = arguments.length\r\n        , res = []\r\n        , i   = 0;\r\n      while(len > i){\r\n        res.push(String(raw[i++]));\r\n        if(i < sln)res.push(String(arguments[i]));\r\n      } return res.join('');\r\n    }\r\n  });\r\n  \r\n  $define(PROTO, STRING, {\r\n    // 21.1.3.3 String.prototype.codePointAt(pos)\r\n    codePointAt: createPointAt(false),\r\n    // 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])\r\n    endsWith: function(searchString /*, endPosition = @length */){\r\n      assertNotRegExp(searchString);\r\n      var that = String(assertDefined(this))\r\n        , endPosition = arguments[1]\r\n        , len = toLength(that.length)\r\n        , end = endPosition === undefined ? len : min(toLength(endPosition), len);\r\n      searchString += '';\r\n      return that.slice(end - searchString.length, end) === searchString;\r\n    },\r\n    // 21.1.3.7 String.prototype.includes(searchString, position = 0)\r\n    includes: function(searchString /*, position = 0 */){\r\n      assertNotRegExp(searchString);\r\n      return !!~String(assertDefined(this)).indexOf(searchString, arguments[1]);\r\n    },\r\n    // 21.1.3.13 String.prototype.repeat(count)\r\n    repeat: function(count){\r\n      var str = String(assertDefined(this))\r\n        , res = ''\r\n        , n   = toInteger(count);\r\n      if(0 > n || n == Infinity)throw RangeError(\"Count can't be negative\");\r\n      for(;n > 0; (n >>>= 1) && (str += str))if(n & 1)res += str;\r\n      return res;\r\n    },\r\n    // 21.1.3.18 String.prototype.startsWith(searchString [, position ])\r\n    startsWith: function(searchString /*, position = 0 */){\r\n      assertNotRegExp(searchString);\r\n      var that  = String(assertDefined(this))\r\n        , index = toLength(min(arguments[1], that.length));\r\n      searchString += '';\r\n      return that.slice(index, index + searchString.length) === searchString;\r\n    }\r\n  });\r\n}(String.fromCharCode);\n\n/******************************************************************************\n * Module : es6.array.statics                                                 *\n ******************************************************************************/\n\n!function(){\r\n  $define(STATIC + FORCED * checkDangerIterClosing(Array.from), ARRAY, {\r\n    // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)\r\n    from: function(arrayLike/*, mapfn = undefined, thisArg = undefined*/){\r\n      var O       = Object(assertDefined(arrayLike))\r\n        , mapfn   = arguments[1]\r\n        , mapping = mapfn !== undefined\r\n        , f       = mapping ? ctx(mapfn, arguments[2], 2) : undefined\r\n        , index   = 0\r\n        , length, result, step;\r\n      if(isIterable(O)){\r\n        result = new (generic(this, Array));\r\n        safeIterClose(function(iterator){\r\n          for(; !(step = iterator.next()).done; index++){\r\n            result[index] = mapping ? f(step.value, index) : step.value;\r\n          }\r\n        }, getIterator(O));\r\n      } else {\r\n        result = new (generic(this, Array))(length = toLength(O.length));\r\n        for(; length > index; index++){\r\n          result[index] = mapping ? f(O[index], index) : O[index];\r\n        }\r\n      }\r\n      result.length = index;\r\n      return result;\r\n    }\r\n  });\r\n  \r\n  $define(STATIC, ARRAY, {\r\n    // 22.1.2.3 Array.of( ...items)\r\n    of: function(/* ...args */){\r\n      var index  = 0\r\n        , length = arguments.length\r\n        , result = new (generic(this, Array))(length);\r\n      while(length > index)result[index] = arguments[index++];\r\n      result.length = length;\r\n      return result;\r\n    }\r\n  });\r\n  \r\n  setSpecies(Array);\r\n}();\n\n/******************************************************************************\n * Module : es6.array.prototype                                               *\n ******************************************************************************/\n\n!function(){\r\n  $define(PROTO, ARRAY, {\r\n    // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\r\n    copyWithin: function(target /* = 0 */, start /* = 0, end = @length */){\r\n      var O     = Object(assertDefined(this))\r\n        , len   = toLength(O.length)\r\n        , to    = toIndex(target, len)\r\n        , from  = toIndex(start, len)\r\n        , end   = arguments[2]\r\n        , fin   = end === undefined ? len : toIndex(end, len)\r\n        , count = min(fin - from, len - to)\r\n        , inc   = 1;\r\n      if(from < to && to < from + count){\r\n        inc  = -1;\r\n        from = from + count - 1;\r\n        to   = to + count - 1;\r\n      }\r\n      while(count-- > 0){\r\n        if(from in O)O[to] = O[from];\r\n        else delete O[to];\r\n        to += inc;\r\n        from += inc;\r\n      } return O;\r\n    },\r\n    // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\r\n    fill: function(value /*, start = 0, end = @length */){\r\n      var O      = Object(assertDefined(this))\r\n        , length = toLength(O.length)\r\n        , index  = toIndex(arguments[1], length)\r\n        , end    = arguments[2]\r\n        , endPos = end === undefined ? length : toIndex(end, length);\r\n      while(endPos > index)O[index++] = value;\r\n      return O;\r\n    },\r\n    // 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\r\n    find: createArrayMethod(5),\r\n    // 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\r\n    findIndex: createArrayMethod(6)\r\n  });\r\n  \r\n  if(framework){\r\n    // 22.1.3.31 Array.prototype[@@unscopables]\r\n    forEach.call(array('find,findIndex,fill,copyWithin,entries,keys,values'), function(it){\r\n      ArrayUnscopables[it] = true;\r\n    });\r\n    SYMBOL_UNSCOPABLES in ArrayProto || hidden(ArrayProto, SYMBOL_UNSCOPABLES, ArrayUnscopables);\r\n  }\r\n}();\n\n/******************************************************************************\n * Module : es6.iterators                                                     *\n ******************************************************************************/\n\n!function(at){\r\n  // 22.1.3.4 Array.prototype.entries()\r\n  // 22.1.3.13 Array.prototype.keys()\r\n  // 22.1.3.29 Array.prototype.values()\r\n  // 22.1.3.30 Array.prototype[@@iterator]()\r\n  defineStdIterators(Array, ARRAY, function(iterated, kind){\r\n    set(this, ITER, {o: toObject(iterated), i: 0, k: kind});\r\n  // 22.1.5.2.1 %ArrayIteratorPrototype%.next()\r\n  }, function(){\r\n    var iter  = this[ITER]\r\n      , O     = iter.o\r\n      , kind  = iter.k\r\n      , index = iter.i++;\r\n    if(!O || index >= O.length){\r\n      iter.o = undefined;\r\n      return iterResult(1);\r\n    }\r\n    if(kind == KEY)  return iterResult(0, index);\r\n    if(kind == VALUE)return iterResult(0, O[index]);\r\n                     return iterResult(0, [index, O[index]]);\r\n  }, VALUE);\r\n  \r\n  // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\r\n  Iterators[ARGUMENTS] = Iterators[ARRAY];\r\n  \r\n  // 21.1.3.27 String.prototype[@@iterator]()\r\n  defineStdIterators(String, STRING, function(iterated){\r\n    set(this, ITER, {o: String(iterated), i: 0});\r\n  // 21.1.5.2.1 %StringIteratorPrototype%.next()\r\n  }, function(){\r\n    var iter  = this[ITER]\r\n      , O     = iter.o\r\n      , index = iter.i\r\n      , point;\r\n    if(index >= O.length)return iterResult(1);\r\n    point = at.call(O, index);\r\n    iter.i += point.length;\r\n    return iterResult(0, point);\r\n  });\r\n}(createPointAt(true));\n\n/******************************************************************************\n * Module : web.immediate                                                     *\n ******************************************************************************/\n\n// setImmediate shim\r\n// Node.js 0.9+ & IE10+ has setImmediate, else:\r\nisFunction(setImmediate) && isFunction(clearImmediate) || function(ONREADYSTATECHANGE){\r\n  var postMessage      = global.postMessage\r\n    , addEventListener = global.addEventListener\r\n    , MessageChannel   = global.MessageChannel\r\n    , counter          = 0\r\n    , queue            = {}\r\n    , defer, channel, port;\r\n  setImmediate = function(fn){\r\n    var args = [], i = 1;\r\n    while(arguments.length > i)args.push(arguments[i++]);\r\n    queue[++counter] = function(){\r\n      invoke(isFunction(fn) ? fn : Function(fn), args);\r\n    }\r\n    defer(counter);\r\n    return counter;\r\n  }\r\n  clearImmediate = function(id){\r\n    delete queue[id];\r\n  }\r\n  function run(id){\r\n    if(has(queue, id)){\r\n      var fn = queue[id];\r\n      delete queue[id];\r\n      fn();\r\n    }\r\n  }\r\n  function listner(event){\r\n    run(event.data);\r\n  }\r\n  // Node.js 0.8-\r\n  if(NODE){\r\n    defer = function(id){\r\n      nextTick(part.call(run, id));\r\n    }\r\n  // Modern browsers, skip implementation for WebWorkers\r\n  // IE8 has postMessage, but it's sync & typeof its postMessage is object\r\n  } else if(addEventListener && isFunction(postMessage) && !global.importScripts){\r\n    defer = function(id){\r\n      postMessage(id, '*');\r\n    }\r\n    addEventListener('message', listner, false);\r\n  // WebWorkers\r\n  } else if(isFunction(MessageChannel)){\r\n    channel = new MessageChannel;\r\n    port    = channel.port2;\r\n    channel.port1.onmessage = listner;\r\n    defer = ctx(port.postMessage, port, 1);\r\n  // IE8-\r\n  } else if(document && ONREADYSTATECHANGE in document[CREATE_ELEMENT]('script')){\r\n    defer = function(id){\r\n      html.appendChild(document[CREATE_ELEMENT]('script'))[ONREADYSTATECHANGE] = function(){\r\n        html.removeChild(this);\r\n        run(id);\r\n      }\r\n    }\r\n  // Rest old browsers\r\n  } else {\r\n    defer = function(id){\r\n      setTimeout(run, 0, id);\r\n    }\r\n  }\r\n}('onreadystatechange');\r\n$define(GLOBAL + BIND, {\r\n  setImmediate:   setImmediate,\r\n  clearImmediate: clearImmediate\r\n});\n\n/******************************************************************************\n * Module : es6.promise                                                       *\n ******************************************************************************/\n\n// ES6 promises shim\r\n// Based on https://github.com/getify/native-promise-only/\r\n!function(Promise, test){\r\n  isFunction(Promise) && isFunction(Promise.resolve)\r\n  && Promise.resolve(test = new Promise(function(){})) == test\r\n  || function(asap, RECORD){\r\n    function isThenable(it){\r\n      var then;\r\n      if(isObject(it))then = it.then;\r\n      return isFunction(then) ? then : false;\r\n    }\r\n    function handledRejectionOrHasOnRejected(promise){\r\n      var record = promise[RECORD]\r\n        , chain  = record.c\r\n        , i      = 0\r\n        , react;\r\n      if(record.h)return true;\r\n      while(chain.length > i){\r\n        react = chain[i++];\r\n        if(react.fail || handledRejectionOrHasOnRejected(react.P))return true;\r\n      }\r\n    }\r\n    function notify(record, reject){\r\n      var chain = record.c;\r\n      if(reject || chain.length)asap(function(){\r\n        var promise = record.p\r\n          , value   = record.v\r\n          , ok      = record.s == 1\r\n          , i       = 0;\r\n        if(reject && !handledRejectionOrHasOnRejected(promise)){\r\n          setTimeout(function(){\r\n            if(!handledRejectionOrHasOnRejected(promise)){\r\n              if(NODE){\r\n                if(!process.emit('unhandledRejection', value, promise)){\r\n                  // default node.js behavior\r\n                }\r\n              } else if(isFunction(console.error)){\r\n                console.error('Unhandled promise rejection', value);\r\n              }\r\n            }\r\n          }, 1e3);\r\n        } else while(chain.length > i)!function(react){\r\n          var cb = ok ? react.ok : react.fail\r\n            , ret, then;\r\n          try {\r\n            if(cb){\r\n              if(!ok)record.h = true;\r\n              ret = cb === true ? value : cb(value);\r\n              if(ret === react.P){\r\n                react.rej(TypeError(PROMISE + '-chain cycle'));\r\n              } else if(then = isThenable(ret)){\r\n                then.call(ret, react.res, react.rej);\r\n              } else react.res(ret);\r\n            } else react.rej(value);\r\n          } catch(err){\r\n            react.rej(err);\r\n          }\r\n        }(chain[i++]);\r\n        chain.length = 0;\r\n      });\r\n    }\r\n    function resolve(value){\r\n      var record = this\r\n        , then, wrapper;\r\n      if(record.d)return;\r\n      record.d = true;\r\n      record = record.r || record; // unwrap\r\n      try {\r\n        if(then = isThenable(value)){\r\n          wrapper = {r: record, d: false}; // wrap\r\n          then.call(value, ctx(resolve, wrapper, 1), ctx(reject, wrapper, 1));\r\n        } else {\r\n          record.v = value;\r\n          record.s = 1;\r\n          notify(record);\r\n        }\r\n      } catch(err){\r\n        reject.call(wrapper || {r: record, d: false}, err); // wrap\r\n      }\r\n    }\r\n    function reject(value){\r\n      var record = this;\r\n      if(record.d)return;\r\n      record.d = true;\r\n      record = record.r || record; // unwrap\r\n      record.v = value;\r\n      record.s = 2;\r\n      notify(record, true);\r\n    }\r\n    function getConstructor(C){\r\n      var S = assertObject(C)[SYMBOL_SPECIES];\r\n      return S != undefined ? S : C;\r\n    }\r\n    // 25.4.3.1 Promise(executor)\r\n    Promise = function(executor){\r\n      assertFunction(executor);\r\n      assertInstance(this, Promise, PROMISE);\r\n      var record = {\r\n        p: this,      // promise\r\n        c: [],        // chain\r\n        s: 0,         // state\r\n        d: false,     // done\r\n        v: undefined, // value\r\n        h: false      // handled rejection\r\n      };\r\n      hidden(this, RECORD, record);\r\n      try {\r\n        executor(ctx(resolve, record, 1), ctx(reject, record, 1));\r\n      } catch(err){\r\n        reject.call(record, err);\r\n      }\r\n    }\r\n    assignHidden(Promise[PROTOTYPE], {\r\n      // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\r\n      then: function(onFulfilled, onRejected){\r\n        var S = assertObject(assertObject(this)[CONSTRUCTOR])[SYMBOL_SPECIES];\r\n        var react = {\r\n          ok:   isFunction(onFulfilled) ? onFulfilled : true,\r\n          fail: isFunction(onRejected)  ? onRejected  : false\r\n        } , P = react.P = new (S != undefined ? S : Promise)(function(resolve, reject){\r\n          react.res = assertFunction(resolve);\r\n          react.rej = assertFunction(reject);\r\n        }), record = this[RECORD];\r\n        record.c.push(react);\r\n        record.s && notify(record);\r\n        return P;\r\n      },\r\n      // 25.4.5.1 Promise.prototype.catch(onRejected)\r\n      'catch': function(onRejected){\r\n        return this.then(undefined, onRejected);\r\n      }\r\n    });\r\n    assignHidden(Promise, {\r\n      // 25.4.4.1 Promise.all(iterable)\r\n      all: function(iterable){\r\n        var Promise = getConstructor(this)\r\n          , values  = [];\r\n        return new Promise(function(resolve, reject){\r\n          forOf(iterable, false, push, values);\r\n          var remaining = values.length\r\n            , results   = Array(remaining);\r\n          if(remaining)forEach.call(values, function(promise, index){\r\n            Promise.resolve(promise).then(function(value){\r\n              results[index] = value;\r\n              --remaining || resolve(results);\r\n            }, reject);\r\n          });\r\n          else resolve(results);\r\n        });\r\n      },\r\n      // 25.4.4.4 Promise.race(iterable)\r\n      race: function(iterable){\r\n        var Promise = getConstructor(this);\r\n        return new Promise(function(resolve, reject){\r\n          forOf(iterable, false, function(promise){\r\n            Promise.resolve(promise).then(resolve, reject);\r\n          });\r\n        });\r\n      },\r\n      // 25.4.4.5 Promise.reject(r)\r\n      reject: function(r){\r\n        return new (getConstructor(this))(function(resolve, reject){\r\n          reject(r);\r\n        });\r\n      },\r\n      // 25.4.4.6 Promise.resolve(x)\r\n      resolve: function(x){\r\n        return isObject(x) && RECORD in x && getPrototypeOf(x) === this[PROTOTYPE]\r\n          ? x : new (getConstructor(this))(function(resolve, reject){\r\n            resolve(x);\r\n          });\r\n      }\r\n    });\r\n  }(nextTick || setImmediate, safeSymbol('record'));\r\n  setToStringTag(Promise, PROMISE);\r\n  setSpecies(Promise);\r\n  $define(GLOBAL + FORCED * !isNative(Promise), {Promise: Promise});\r\n}(global[PROMISE]);\n\n/******************************************************************************\n * Module : es6.collections                                                   *\n ******************************************************************************/\n\n// ECMAScript 6 collections shim\r\n!function(){\r\n  var UID   = safeSymbol('uid')\r\n    , O1    = safeSymbol('O1')\r\n    , WEAK  = safeSymbol('weak')\r\n    , LEAK  = safeSymbol('leak')\r\n    , LAST  = safeSymbol('last')\r\n    , FIRST = safeSymbol('first')\r\n    , SIZE  = DESC ? safeSymbol('size') : 'size'\r\n    , uid   = 0\r\n    , tmp   = {};\r\n  \r\n  function getCollection(C, NAME, methods, commonMethods, isMap, isWeak){\r\n    var ADDER = isMap ? 'set' : 'add'\r\n      , proto = C && C[PROTOTYPE]\r\n      , O     = {};\r\n    function initFromIterable(that, iterable){\r\n      if(iterable != undefined)forOf(iterable, isMap, that[ADDER], that);\r\n      return that;\r\n    }\r\n    function fixSVZ(key, chain){\r\n      var method = proto[key];\r\n      if(framework)proto[key] = function(a, b){\r\n        var result = method.call(this, a === 0 ? 0 : a, b);\r\n        return chain ? this : result;\r\n      };\r\n    }\r\n    if(!isNative(C) || !(isWeak || (!BUGGY_ITERATORS && has(proto, FOR_EACH) && has(proto, 'entries')))){\r\n      // create collection constructor\r\n      C = isWeak\r\n        ? function(iterable){\r\n            assertInstance(this, C, NAME);\r\n            set(this, UID, uid++);\r\n            initFromIterable(this, iterable);\r\n          }\r\n        : function(iterable){\r\n            var that = this;\r\n            assertInstance(that, C, NAME);\r\n            set(that, O1, create(null));\r\n            set(that, SIZE, 0);\r\n            set(that, LAST, undefined);\r\n            set(that, FIRST, undefined);\r\n            initFromIterable(that, iterable);\r\n          };\r\n      assignHidden(assignHidden(C[PROTOTYPE], methods), commonMethods);\r\n      isWeak || !DESC || defineProperty(C[PROTOTYPE], 'size', {get: function(){\r\n        return assertDefined(this[SIZE]);\r\n      }});\r\n    } else {\r\n      var Native = C\r\n        , inst   = new C\r\n        , chain  = inst[ADDER](isWeak ? {} : -0, 1)\r\n        , buggyZero;\r\n      // wrap to init collections from iterable\r\n      if(checkDangerIterClosing(function(O){ new C(O) })){\r\n        C = function(iterable){\r\n          assertInstance(this, C, NAME);\r\n          return initFromIterable(new Native, iterable);\r\n        }\r\n        C[PROTOTYPE] = proto;\r\n        if(framework)proto[CONSTRUCTOR] = C;\r\n      }\r\n      isWeak || inst[FOR_EACH](function(val, key){\r\n        buggyZero = 1 / key === -Infinity;\r\n      });\r\n      // fix converting -0 key to +0\r\n      if(buggyZero){\r\n        fixSVZ('delete');\r\n        fixSVZ('has');\r\n        isMap && fixSVZ('get');\r\n      }\r\n      // + fix .add & .set for chaining\r\n      if(buggyZero || chain !== inst)fixSVZ(ADDER, true);\r\n    }\r\n    setToStringTag(C, NAME);\r\n    setSpecies(C);\r\n    \r\n    O[NAME] = C;\r\n    $define(GLOBAL + WRAP + FORCED * !isNative(C), O);\r\n    \r\n    // add .keys, .values, .entries, [@@iterator]\r\n    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11\r\n    isWeak || defineStdIterators(C, NAME, function(iterated, kind){\r\n      set(this, ITER, {o: iterated, k: kind});\r\n    }, function(){\r\n      var iter  = this[ITER]\r\n        , kind  = iter.k\r\n        , entry = iter.l;\r\n      // revert to the last existing entry\r\n      while(entry && entry.r)entry = entry.p;\r\n      // get next entry\r\n      if(!iter.o || !(iter.l = entry = entry ? entry.n : iter.o[FIRST])){\r\n        // or finish the iteration\r\n        iter.o = undefined;\r\n        return iterResult(1);\r\n      }\r\n      // return step by kind\r\n      if(kind == KEY)  return iterResult(0, entry.k);\r\n      if(kind == VALUE)return iterResult(0, entry.v);\r\n                       return iterResult(0, [entry.k, entry.v]);   \r\n    }, isMap ? KEY+VALUE : VALUE, !isMap);\r\n    \r\n    return C;\r\n  }\r\n  \r\n  function fastKey(it, create){\r\n    // return primitive with prefix\r\n    if(!isObject(it))return (typeof it == 'string' ? 'S' : 'P') + it;\r\n    // can't set id to frozen object\r\n    if(isFrozen(it))return 'F';\r\n    if(!has(it, UID)){\r\n      // not necessary to add id\r\n      if(!create)return 'E';\r\n      // add missing object id\r\n      hidden(it, UID, ++uid);\r\n    // return object id with prefix\r\n    } return 'O' + it[UID];\r\n  }\r\n  function getEntry(that, key){\r\n    // fast case\r\n    var index = fastKey(key), entry;\r\n    if(index != 'F')return that[O1][index];\r\n    // frozen object case\r\n    for(entry = that[FIRST]; entry; entry = entry.n){\r\n      if(entry.k == key)return entry;\r\n    }\r\n  }\r\n  function def(that, key, value){\r\n    var entry = getEntry(that, key)\r\n      , prev, index;\r\n    // change existing entry\r\n    if(entry)entry.v = value;\r\n    // create new entry\r\n    else {\r\n      that[LAST] = entry = {\r\n        i: index = fastKey(key, true), // <- index\r\n        k: key,                        // <- key\r\n        v: value,                      // <- value\r\n        p: prev = that[LAST],          // <- previous entry\r\n        n: undefined,                  // <- next entry\r\n        r: false                       // <- removed\r\n      };\r\n      if(!that[FIRST])that[FIRST] = entry;\r\n      if(prev)prev.n = entry;\r\n      that[SIZE]++;\r\n      // add to index\r\n      if(index != 'F')that[O1][index] = entry;\r\n    } return that;\r\n  }\r\n\r\n  var collectionMethods = {\r\n    // 23.1.3.1 Map.prototype.clear()\r\n    // 23.2.3.2 Set.prototype.clear()\r\n    clear: function(){\r\n      for(var that = this, data = that[O1], entry = that[FIRST]; entry; entry = entry.n){\r\n        entry.r = true;\r\n        if(entry.p)entry.p = entry.p.n = undefined;\r\n        delete data[entry.i];\r\n      }\r\n      that[FIRST] = that[LAST] = undefined;\r\n      that[SIZE] = 0;\r\n    },\r\n    // 23.1.3.3 Map.prototype.delete(key)\r\n    // 23.2.3.4 Set.prototype.delete(value)\r\n    'delete': function(key){\r\n      var that  = this\r\n        , entry = getEntry(that, key);\r\n      if(entry){\r\n        var next = entry.n\r\n          , prev = entry.p;\r\n        delete that[O1][entry.i];\r\n        entry.r = true;\r\n        if(prev)prev.n = next;\r\n        if(next)next.p = prev;\r\n        if(that[FIRST] == entry)that[FIRST] = next;\r\n        if(that[LAST] == entry)that[LAST] = prev;\r\n        that[SIZE]--;\r\n      } return !!entry;\r\n    },\r\n    // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)\r\n    // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)\r\n    forEach: function(callbackfn /*, that = undefined */){\r\n      var f = ctx(callbackfn, arguments[1], 3)\r\n        , entry;\r\n      while(entry = entry ? entry.n : this[FIRST]){\r\n        f(entry.v, entry.k, this);\r\n        // revert to the last existing entry\r\n        while(entry && entry.r)entry = entry.p;\r\n      }\r\n    },\r\n    // 23.1.3.7 Map.prototype.has(key)\r\n    // 23.2.3.7 Set.prototype.has(value)\r\n    has: function(key){\r\n      return !!getEntry(this, key);\r\n    }\r\n  }\r\n  \r\n  // 23.1 Map Objects\r\n  Map = getCollection(Map, MAP, {\r\n    // 23.1.3.6 Map.prototype.get(key)\r\n    get: function(key){\r\n      var entry = getEntry(this, key);\r\n      return entry && entry.v;\r\n    },\r\n    // 23.1.3.9 Map.prototype.set(key, value)\r\n    set: function(key, value){\r\n      return def(this, key === 0 ? 0 : key, value);\r\n    }\r\n  }, collectionMethods, true);\r\n  \r\n  // 23.2 Set Objects\r\n  Set = getCollection(Set, SET, {\r\n    // 23.2.3.1 Set.prototype.add(value)\r\n    add: function(value){\r\n      return def(this, value = value === 0 ? 0 : value, value);\r\n    }\r\n  }, collectionMethods);\r\n  \r\n  function defWeak(that, key, value){\r\n    if(isFrozen(assertObject(key)))leakStore(that).set(key, value);\r\n    else {\r\n      has(key, WEAK) || hidden(key, WEAK, {});\r\n      key[WEAK][that[UID]] = value;\r\n    } return that;\r\n  }\r\n  function leakStore(that){\r\n    return that[LEAK] || hidden(that, LEAK, new Map)[LEAK];\r\n  }\r\n  \r\n  var weakMethods = {\r\n    // 23.3.3.2 WeakMap.prototype.delete(key)\r\n    // 23.4.3.3 WeakSet.prototype.delete(value)\r\n    'delete': function(key){\r\n      if(!isObject(key))return false;\r\n      if(isFrozen(key))return leakStore(this)['delete'](key);\r\n      return has(key, WEAK) && has(key[WEAK], this[UID]) && delete key[WEAK][this[UID]];\r\n    },\r\n    // 23.3.3.4 WeakMap.prototype.has(key)\r\n    // 23.4.3.4 WeakSet.prototype.has(value)\r\n    has: function(key){\r\n      if(!isObject(key))return false;\r\n      if(isFrozen(key))return leakStore(this).has(key);\r\n      return has(key, WEAK) && has(key[WEAK], this[UID]);\r\n    }\r\n  };\r\n  \r\n  // 23.3 WeakMap Objects\r\n  WeakMap = getCollection(WeakMap, WEAKMAP, {\r\n    // 23.3.3.3 WeakMap.prototype.get(key)\r\n    get: function(key){\r\n      if(isObject(key)){\r\n        if(isFrozen(key))return leakStore(this).get(key);\r\n        if(has(key, WEAK))return key[WEAK][this[UID]];\r\n      }\r\n    },\r\n    // 23.3.3.5 WeakMap.prototype.set(key, value)\r\n    set: function(key, value){\r\n      return defWeak(this, key, value);\r\n    }\r\n  }, weakMethods, true, true);\r\n  \r\n  // IE11 WeakMap frozen keys fix\r\n  if(framework && new WeakMap().set(Object.freeze(tmp), 7).get(tmp) != 7){\r\n    forEach.call(array('delete,has,get,set'), function(key){\r\n      var method = WeakMap[PROTOTYPE][key];\r\n      WeakMap[PROTOTYPE][key] = function(a, b){\r\n        // store frozen objects on leaky map\r\n        if(isObject(a) && isFrozen(a)){\r\n          var result = leakStore(this)[key](a, b);\r\n          return key == 'set' ? this : result;\r\n        // store all the rest on native weakmap\r\n        } return method.call(this, a, b);\r\n      };\r\n    });\r\n  }\r\n  \r\n  // 23.4 WeakSet Objects\r\n  WeakSet = getCollection(WeakSet, WEAKSET, {\r\n    // 23.4.3.1 WeakSet.prototype.add(value)\r\n    add: function(value){\r\n      return defWeak(this, value, true);\r\n    }\r\n  }, weakMethods, false, true);\r\n}();\n\n/******************************************************************************\n * Module : es6.reflect                                                       *\n ******************************************************************************/\n\n!function(){\r\n  function Enumerate(iterated){\r\n    var keys = [], key;\r\n    for(key in iterated)keys.push(key);\r\n    set(this, ITER, {o: iterated, a: keys, i: 0});\r\n  }\r\n  createIterator(Enumerate, OBJECT, function(){\r\n    var iter = this[ITER]\r\n      , keys = iter.a\r\n      , key;\r\n    do {\r\n      if(iter.i >= keys.length)return iterResult(1);\r\n    } while(!((key = keys[iter.i++]) in iter.o));\r\n    return iterResult(0, key);\r\n  });\r\n  \r\n  function wrap(fn){\r\n    return function(it){\r\n      assertObject(it);\r\n      try {\r\n        return fn.apply(undefined, arguments), true;\r\n      } catch(e){\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  \r\n  function reflectGet(target, propertyKey/*, receiver*/){\r\n    var receiver = arguments.length < 3 ? target : arguments[2]\r\n      , desc = getOwnDescriptor(assertObject(target), propertyKey), proto;\r\n    if(desc)return has(desc, 'value')\r\n      ? desc.value\r\n      : desc.get === undefined\r\n        ? undefined\r\n        : desc.get.call(receiver);\r\n    return isObject(proto = getPrototypeOf(target))\r\n      ? reflectGet(proto, propertyKey, receiver)\r\n      : undefined;\r\n  }\r\n  function reflectSet(target, propertyKey, V/*, receiver*/){\r\n    var receiver = arguments.length < 4 ? target : arguments[3]\r\n      , ownDesc  = getOwnDescriptor(assertObject(target), propertyKey)\r\n      , existingDescriptor, proto;\r\n    if(!ownDesc){\r\n      if(isObject(proto = getPrototypeOf(target))){\r\n        return reflectSet(proto, propertyKey, V, receiver);\r\n      }\r\n      ownDesc = descriptor(0);\r\n    }\r\n    if(has(ownDesc, 'value')){\r\n      if(ownDesc.writable === false || !isObject(receiver))return false;\r\n      existingDescriptor = getOwnDescriptor(receiver, propertyKey) || descriptor(0);\r\n      existingDescriptor.value = V;\r\n      return defineProperty(receiver, propertyKey, existingDescriptor), true;\r\n    }\r\n    return ownDesc.set === undefined\r\n      ? false\r\n      : (ownDesc.set.call(receiver, V), true);\r\n  }\r\n  var isExtensible = Object.isExtensible || returnIt;\r\n  \r\n  var reflect = {\r\n    // 26.1.1 Reflect.apply(target, thisArgument, argumentsList)\r\n    apply: ctx(call, apply, 3),\r\n    // 26.1.2 Reflect.construct(target, argumentsList [, newTarget])\r\n    construct: function(target, argumentsList /*, newTarget*/){\r\n      var proto    = assertFunction(arguments.length < 3 ? target : arguments[2])[PROTOTYPE]\r\n        , instance = create(isObject(proto) ? proto : ObjectProto)\r\n        , result   = apply.call(target, instance, argumentsList);\r\n      return isObject(result) ? result : instance;\r\n    },\r\n    // 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)\r\n    defineProperty: wrap(defineProperty),\r\n    // 26.1.4 Reflect.deleteProperty(target, propertyKey)\r\n    deleteProperty: function(target, propertyKey){\r\n      var desc = getOwnDescriptor(assertObject(target), propertyKey);\r\n      return desc && !desc.configurable ? false : delete target[propertyKey];\r\n    },\r\n    // 26.1.5 Reflect.enumerate(target)\r\n    enumerate: function(target){\r\n      return new Enumerate(assertObject(target));\r\n    },\r\n    // 26.1.6 Reflect.get(target, propertyKey [, receiver])\r\n    get: reflectGet,\r\n    // 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)\r\n    getOwnPropertyDescriptor: function(target, propertyKey){\r\n      return getOwnDescriptor(assertObject(target), propertyKey);\r\n    },\r\n    // 26.1.8 Reflect.getPrototypeOf(target)\r\n    getPrototypeOf: function(target){\r\n      return getPrototypeOf(assertObject(target));\r\n    },\r\n    // 26.1.9 Reflect.has(target, propertyKey)\r\n    has: function(target, propertyKey){\r\n      return propertyKey in target;\r\n    },\r\n    // 26.1.10 Reflect.isExtensible(target)\r\n    isExtensible: function(target){\r\n      return !!isExtensible(assertObject(target));\r\n    },\r\n    // 26.1.11 Reflect.ownKeys(target)\r\n    ownKeys: ownKeys,\r\n    // 26.1.12 Reflect.preventExtensions(target)\r\n    preventExtensions: wrap(Object.preventExtensions || returnIt),\r\n    // 26.1.13 Reflect.set(target, propertyKey, V [, receiver])\r\n    set: reflectSet\r\n  }\r\n  // 26.1.14 Reflect.setPrototypeOf(target, proto)\r\n  if(setPrototypeOf)reflect.setPrototypeOf = function(target, proto){\r\n    return setPrototypeOf(assertObject(target), proto), true;\r\n  };\r\n  \r\n  $define(GLOBAL, {Reflect: {}});\r\n  $define(STATIC, 'Reflect', reflect);\r\n}();\n\n/******************************************************************************\n * Module : es7.proposals                                                     *\n ******************************************************************************/\n\n!function(){\r\n  $define(PROTO, ARRAY, {\r\n    // https://github.com/domenic/Array.prototype.includes\r\n    includes: createArrayContains(true)\r\n  });\r\n  $define(PROTO, STRING, {\r\n    // https://github.com/mathiasbynens/String.prototype.at\r\n    at: createPointAt(true)\r\n  });\r\n  \r\n  function createObjectToArray(isEntries){\r\n    return function(object){\r\n      var O      = toObject(object)\r\n        , keys   = getKeys(object)\r\n        , length = keys.length\r\n        , i      = 0\r\n        , result = Array(length)\r\n        , key;\r\n      if(isEntries)while(length > i)result[i] = [key = keys[i++], O[key]];\r\n      else while(length > i)result[i] = O[keys[i++]];\r\n      return result;\r\n    }\r\n  }\r\n  $define(STATIC, OBJECT, {\r\n    // https://gist.github.com/WebReflection/9353781\r\n    getOwnPropertyDescriptors: function(object){\r\n      var O      = toObject(object)\r\n        , result = {};\r\n      forEach.call(ownKeys(O), function(key){\r\n        defineProperty(result, key, descriptor(0, getOwnDescriptor(O, key)));\r\n      });\r\n      return result;\r\n    },\r\n    // https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-04/apr-9.md#51-objectentries-objectvalues\r\n    values:  createObjectToArray(false),\r\n    entries: createObjectToArray(true)\r\n  });\r\n  $define(STATIC, REGEXP, {\r\n    // https://gist.github.com/kangax/9698100\r\n    escape: createReplacer(/([\\\\\\-[\\]{}()*+?.,^$|])/g, '\\\\$1', true)\r\n  });\r\n}();\n\n/******************************************************************************\n * Module : es7.abstract-refs                                                 *\n ******************************************************************************/\n\n// https://github.com/zenparsing/es-abstract-refs\r\n!function(REFERENCE){\r\n  REFERENCE_GET = getWellKnownSymbol(REFERENCE+'Get', true);\r\n  var REFERENCE_SET = getWellKnownSymbol(REFERENCE+SET, true)\r\n    , REFERENCE_DELETE = getWellKnownSymbol(REFERENCE+'Delete', true);\r\n  \r\n  $define(STATIC, SYMBOL, {\r\n    referenceGet: REFERENCE_GET,\r\n    referenceSet: REFERENCE_SET,\r\n    referenceDelete: REFERENCE_DELETE\r\n  });\r\n  \r\n  hidden(FunctionProto, REFERENCE_GET, returnThis);\r\n  \r\n  function setMapMethods(Constructor){\r\n    if(Constructor){\r\n      var MapProto = Constructor[PROTOTYPE];\r\n      hidden(MapProto, REFERENCE_GET, MapProto.get);\r\n      hidden(MapProto, REFERENCE_SET, MapProto.set);\r\n      hidden(MapProto, REFERENCE_DELETE, MapProto['delete']);\r\n    }\r\n  }\r\n  setMapMethods(Map);\r\n  setMapMethods(WeakMap);\r\n}('reference');\n\n/******************************************************************************\n * Module : core.dict                                                         *\n ******************************************************************************/\n\n!function(DICT){\r\n  Dict = function(iterable){\r\n    var dict = create(null);\r\n    if(iterable != undefined){\r\n      if(isIterable(iterable)){\r\n        forOf(iterable, true, function(key, value){\r\n          dict[key] = value;\r\n        });\r\n      } else assign(dict, iterable);\r\n    }\r\n    return dict;\r\n  }\r\n  Dict[PROTOTYPE] = null;\r\n  \r\n  function DictIterator(iterated, kind){\r\n    set(this, ITER, {o: toObject(iterated), a: getKeys(iterated), i: 0, k: kind});\r\n  }\r\n  createIterator(DictIterator, DICT, function(){\r\n    var iter = this[ITER]\r\n      , O    = iter.o\r\n      , keys = iter.a\r\n      , kind = iter.k\r\n      , key;\r\n    do {\r\n      if(iter.i >= keys.length){\r\n        iter.o = undefined;\r\n        return iterResult(1);\r\n      }\r\n    } while(!has(O, key = keys[iter.i++]));\r\n    if(kind == KEY)  return iterResult(0, key);\r\n    if(kind == VALUE)return iterResult(0, O[key]);\r\n                     return iterResult(0, [key, O[key]]);\r\n  });\r\n  function createDictIter(kind){\r\n    return function(it){\r\n      return new DictIterator(it, kind);\r\n    }\r\n  }\r\n  \r\n  /*\r\n   * 0 -> forEach\r\n   * 1 -> map\r\n   * 2 -> filter\r\n   * 3 -> some\r\n   * 4 -> every\r\n   * 5 -> find\r\n   * 6 -> findKey\r\n   * 7 -> mapPairs\r\n   */\r\n  function createDictMethod(type){\r\n    var isMap    = type == 1\r\n      , isEvery  = type == 4;\r\n    return function(object, callbackfn, that /* = undefined */){\r\n      var f      = ctx(callbackfn, that, 3)\r\n        , O      = toObject(object)\r\n        , result = isMap || type == 7 || type == 2 ? new (generic(this, Dict)) : undefined\r\n        , key, val, res;\r\n      for(key in O)if(has(O, key)){\r\n        val = O[key];\r\n        res = f(val, key, object);\r\n        if(type){\r\n          if(isMap)result[key] = res;             // map\r\n          else if(res)switch(type){\r\n            case 2: result[key] = val; break      // filter\r\n            case 3: return true;                  // some\r\n            case 5: return val;                   // find\r\n            case 6: return key;                   // findKey\r\n            case 7: result[res[0]] = res[1];      // mapPairs\r\n          } else if(isEvery)return false;         // every\r\n        }\r\n      }\r\n      return type == 3 || isEvery ? isEvery : result;\r\n    }\r\n  }\r\n  function createDictReduce(isTurn){\r\n    return function(object, mapfn, init){\r\n      assertFunction(mapfn);\r\n      var O      = toObject(object)\r\n        , keys   = getKeys(O)\r\n        , length = keys.length\r\n        , i      = 0\r\n        , memo, key, result;\r\n      if(isTurn)memo = init == undefined ? new (generic(this, Dict)) : Object(init);\r\n      else if(arguments.length < 3){\r\n        assert(length, REDUCE_ERROR);\r\n        memo = O[keys[i++]];\r\n      } else memo = Object(init);\r\n      while(length > i)if(has(O, key = keys[i++])){\r\n        result = mapfn(memo, O[key], key, object);\r\n        if(isTurn){\r\n          if(result === false)break;\r\n        } else memo = result;\r\n      }\r\n      return memo;\r\n    }\r\n  }\r\n  var findKey = createDictMethod(6);\r\n  function includes(object, el){\r\n    return (el == el ? keyOf(object, el) : findKey(object, sameNaN)) !== undefined;\r\n  }\r\n  \r\n  var dictMethods = {\r\n    keys:    createDictIter(KEY),\r\n    values:  createDictIter(VALUE),\r\n    entries: createDictIter(KEY+VALUE),\r\n    forEach: createDictMethod(0),\r\n    map:     createDictMethod(1),\r\n    filter:  createDictMethod(2),\r\n    some:    createDictMethod(3),\r\n    every:   createDictMethod(4),\r\n    find:    createDictMethod(5),\r\n    findKey: findKey,\r\n    mapPairs:createDictMethod(7),\r\n    reduce:  createDictReduce(false),\r\n    turn:    createDictReduce(true),\r\n    keyOf:   keyOf,\r\n    includes:includes,\r\n    // Has / get / set own property\r\n    has: has,\r\n    get: get,\r\n    set: createDefiner(0),\r\n    isDict: function(it){\r\n      return isObject(it) && getPrototypeOf(it) === Dict[PROTOTYPE];\r\n    }\r\n  };\r\n  \r\n  if(REFERENCE_GET)for(var key in dictMethods)!function(fn){\r\n    function method(){\r\n      for(var args = [this], i = 0; i < arguments.length;)args.push(arguments[i++]);\r\n      return invoke(fn, args);\r\n    }\r\n    fn[REFERENCE_GET] = function(){\r\n      return method;\r\n    }\r\n  }(dictMethods[key]);\r\n  \r\n  $define(GLOBAL + FORCED, {Dict: assignHidden(Dict, dictMethods)});\r\n}('Dict');\n\n/******************************************************************************\n * Module : core.$for                                                         *\n ******************************************************************************/\n\n!function(ENTRIES, FN){  \r\n  function $for(iterable, entries){\r\n    if(!(this instanceof $for))return new $for(iterable, entries);\r\n    this[ITER]    = getIterator(iterable);\r\n    this[ENTRIES] = !!entries;\r\n  }\r\n  \r\n  createIterator($for, 'Wrapper', function(){\r\n    return this[ITER].next();\r\n  });\r\n  var $forProto = $for[PROTOTYPE];\r\n  setIterator($forProto, function(){\r\n    return this[ITER]; // unwrap\r\n  });\r\n  \r\n  function createChainIterator(next){\r\n    function Iter(I, fn, that){\r\n      this[ITER]    = getIterator(I);\r\n      this[ENTRIES] = I[ENTRIES];\r\n      this[FN]      = ctx(fn, that, I[ENTRIES] ? 2 : 1);\r\n    }\r\n    createIterator(Iter, 'Chain', next, $forProto);\r\n    setIterator(Iter[PROTOTYPE], returnThis); // override $forProto iterator\r\n    return Iter;\r\n  }\r\n  \r\n  var MapIter = createChainIterator(function(){\r\n    var step = this[ITER].next();\r\n    return step.done ? step : iterResult(0, stepCall(this[FN], step.value, this[ENTRIES]));\r\n  });\r\n  \r\n  var FilterIter = createChainIterator(function(){\r\n    for(;;){\r\n      var step = this[ITER].next();\r\n      if(step.done || stepCall(this[FN], step.value, this[ENTRIES]))return step;\r\n    }\r\n  });\r\n  \r\n  assignHidden($forProto, {\r\n    of: function(fn, that){\r\n      forOf(this, this[ENTRIES], fn, that);\r\n    },\r\n    array: function(fn, that){\r\n      var result = [];\r\n      forOf(fn != undefined ? this.map(fn, that) : this, false, push, result);\r\n      return result;\r\n    },\r\n    filter: function(fn, that){\r\n      return new FilterIter(this, fn, that);\r\n    },\r\n    map: function(fn, that){\r\n      return new MapIter(this, fn, that);\r\n    }\r\n  });\r\n  \r\n  $for.isIterable  = isIterable;\r\n  $for.getIterator = getIterator;\r\n  \r\n  $define(GLOBAL + FORCED, {$for: $for});\r\n}('entries', safeSymbol('fn'));\n\n/******************************************************************************\n * Module : core.delay                                                        *\n ******************************************************************************/\n\n// https://esdiscuss.org/topic/promise-returning-delay-function\r\n$define(GLOBAL + FORCED, {\r\n  delay: function(time){\r\n    return new Promise(function(resolve){\r\n      setTimeout(resolve, time, true);\r\n    });\r\n  }\r\n});\n\n/******************************************************************************\n * Module : core.binding                                                      *\n ******************************************************************************/\n\n!function(_, toLocaleString){\r\n  // Placeholder\r\n  core._ = path._ = path._ || {};\r\n\r\n  $define(PROTO + FORCED, FUNCTION, {\r\n    part: part,\r\n    only: function(numberArguments, that /* = @ */){\r\n      var fn     = assertFunction(this)\r\n        , n      = toLength(numberArguments)\r\n        , isThat = arguments.length > 1;\r\n      return function(/* ...args */){\r\n        var length = min(n, arguments.length)\r\n          , args   = Array(length)\r\n          , i      = 0;\r\n        while(length > i)args[i] = arguments[i++];\r\n        return invoke(fn, args, isThat ? that : this);\r\n      }\r\n    }\r\n  });\r\n  \r\n  function tie(key){\r\n    var that  = this\r\n      , bound = {};\r\n    return hidden(that, _, function(key){\r\n      if(key === undefined || !(key in that))return toLocaleString.call(that);\r\n      return has(bound, key) ? bound[key] : (bound[key] = ctx(that[key], that, -1));\r\n    })[_](key);\r\n  }\r\n  \r\n  hidden(path._, TO_STRING, function(){\r\n    return _;\r\n  });\r\n  \r\n  hidden(ObjectProto, _, tie);\r\n  DESC || hidden(ArrayProto, _, tie);\r\n  // IE8- dirty hack - redefined toLocaleString is not enumerable\r\n}(DESC ? uid('tie') : TO_LOCALE, ObjectProto[TO_LOCALE]);\n\n/******************************************************************************\n * Module : core.object                                                       *\n ******************************************************************************/\n\n!function(){\r\n  function define(target, mixin){\r\n    var keys   = ownKeys(toObject(mixin))\r\n      , length = keys.length\r\n      , i = 0, key;\r\n    while(length > i)defineProperty(target, key = keys[i++], getOwnDescriptor(mixin, key));\r\n    return target;\r\n  };\r\n  $define(STATIC + FORCED, OBJECT, {\r\n    isObject: isObject,\r\n    classof: classof,\r\n    define: define,\r\n    make: function(proto, mixin){\r\n      return define(create(proto), mixin);\r\n    }\r\n  });\r\n}();\n\n/******************************************************************************\n * Module : core.array                                                        *\n ******************************************************************************/\n\n$define(PROTO + FORCED, ARRAY, {\r\n  turn: function(fn, target /* = [] */){\r\n    assertFunction(fn);\r\n    var memo   = target == undefined ? [] : Object(target)\r\n      , O      = ES5Object(this)\r\n      , length = toLength(O.length)\r\n      , index  = 0;\r\n    while(length > index)if(fn(memo, O[index], index++, this) === false)break;\r\n    return memo;\r\n  }\r\n});\r\nif(framework)ArrayUnscopables.turn = true;\n\n/******************************************************************************\n * Module : core.number                                                       *\n ******************************************************************************/\n\n!function(numberMethods){  \r\n  function NumberIterator(iterated){\r\n    set(this, ITER, {l: toLength(iterated), i: 0});\r\n  }\r\n  createIterator(NumberIterator, NUMBER, function(){\r\n    var iter = this[ITER]\r\n      , i    = iter.i++;\r\n    return i < iter.l ? iterResult(0, i) : iterResult(1);\r\n  });\r\n  defineIterator(Number, NUMBER, function(){\r\n    return new NumberIterator(this);\r\n  });\r\n  \r\n  numberMethods.random = function(lim /* = 0 */){\r\n    var a = +this\r\n      , b = lim == undefined ? 0 : +lim\r\n      , m = min(a, b);\r\n    return random() * (max(a, b) - m) + m;\r\n  };\r\n\r\n  forEach.call(array(\r\n      // ES3:\r\n      'round,floor,ceil,abs,sin,asin,cos,acos,tan,atan,exp,sqrt,max,min,pow,atan2,' +\r\n      // ES6:\r\n      'acosh,asinh,atanh,cbrt,clz32,cosh,expm1,hypot,imul,log1p,log10,log2,sign,sinh,tanh,trunc'\r\n    ), function(key){\r\n      var fn = Math[key];\r\n      if(fn)numberMethods[key] = function(/* ...args */){\r\n        // ie9- dont support strict mode & convert `this` to object -> convert it to number\r\n        var args = [+this]\r\n          , i    = 0;\r\n        while(arguments.length > i)args.push(arguments[i++]);\r\n        return invoke(fn, args);\r\n      }\r\n    }\r\n  );\r\n  \r\n  $define(PROTO + FORCED, NUMBER, numberMethods);\r\n}({});\n\n/******************************************************************************\n * Module : core.string                                                       *\n ******************************************************************************/\n\n!function(){\r\n  var escapeHTMLDict = {\r\n    '&': '&amp;',\r\n    '<': '&lt;',\r\n    '>': '&gt;',\r\n    '\"': '&quot;',\r\n    \"'\": '&apos;'\r\n  }, unescapeHTMLDict = {}, key;\r\n  for(key in escapeHTMLDict)unescapeHTMLDict[escapeHTMLDict[key]] = key;\r\n  $define(PROTO + FORCED, STRING, {\r\n    escapeHTML:   createReplacer(/[&<>\"']/g, escapeHTMLDict),\r\n    unescapeHTML: createReplacer(/&(?:amp|lt|gt|quot|apos);/g, unescapeHTMLDict)\r\n  });\r\n}();\n\n/******************************************************************************\n * Module : core.date                                                         *\n ******************************************************************************/\n\n!function(formatRegExp, flexioRegExp, locales, current, SECONDS, MINUTES, HOURS, MONTH, YEAR){\r\n  function createFormat(prefix){\r\n    return function(template, locale /* = current */){\r\n      var that = this\r\n        , dict = locales[has(locales, locale) ? locale : current];\r\n      function get(unit){\r\n        return that[prefix + unit]();\r\n      }\r\n      return String(template).replace(formatRegExp, function(part){\r\n        switch(part){\r\n          case 's'  : return get(SECONDS);                  // Seconds : 0-59\r\n          case 'ss' : return lz(get(SECONDS));              // Seconds : 00-59\r\n          case 'm'  : return get(MINUTES);                  // Minutes : 0-59\r\n          case 'mm' : return lz(get(MINUTES));              // Minutes : 00-59\r\n          case 'h'  : return get(HOURS);                    // Hours   : 0-23\r\n          case 'hh' : return lz(get(HOURS));                // Hours   : 00-23\r\n          case 'D'  : return get(DATE);                     // Date    : 1-31\r\n          case 'DD' : return lz(get(DATE));                 // Date    : 01-31\r\n          case 'W'  : return dict[0][get('Day')];           // Day     : Понедельник\r\n          case 'N'  : return get(MONTH) + 1;                // Month   : 1-12\r\n          case 'NN' : return lz(get(MONTH) + 1);            // Month   : 01-12\r\n          case 'M'  : return dict[2][get(MONTH)];           // Month   : Январь\r\n          case 'MM' : return dict[1][get(MONTH)];           // Month   : Января\r\n          case 'Y'  : return get(YEAR);                     // Year    : 2014\r\n          case 'YY' : return lz(get(YEAR) % 100);           // Year    : 14\r\n        } return part;\r\n      });\r\n    }\r\n  }\r\n  function addLocale(lang, locale){\r\n    function split(index){\r\n      var result = [];\r\n      forEach.call(array(locale.months), function(it){\r\n        result.push(it.replace(flexioRegExp, '$' + index));\r\n      });\r\n      return result;\r\n    }\r\n    locales[lang] = [array(locale.weekdays), split(1), split(2)];\r\n    return core;\r\n  }\r\n  $define(PROTO + FORCED, DATE, {\r\n    format:    createFormat('get'),\r\n    formatUTC: createFormat('getUTC')\r\n  });\r\n  addLocale(current, {\r\n    weekdays: 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday',\r\n    months: 'January,February,March,April,May,June,July,August,September,October,November,December'\r\n  });\r\n  addLocale('ru', {\r\n    weekdays: 'Воскресенье,Понедельник,Вторник,Среда,Четверг,Пятница,Суббота',\r\n    months: 'Январ:я|ь,Феврал:я|ь,Март:а|,Апрел:я|ь,Ма:я|й,Июн:я|ь,' +\r\n            'Июл:я|ь,Август:а|,Сентябр:я|ь,Октябр:я|ь,Ноябр:я|ь,Декабр:я|ь'\r\n  });\r\n  core.locale = function(locale){\r\n    return has(locales, locale) ? current = locale : current;\r\n  };\r\n  core.addLocale = addLocale;\r\n}(/\\b\\w\\w?\\b/g, /:(.*)\\|(.*)$/, {}, 'en', 'Seconds', 'Minutes', 'Hours', 'Month', 'FullYear');\n\n/******************************************************************************\n * Module : core.global                                                       *\n ******************************************************************************/\n\n$define(GLOBAL + FORCED, {global: global});\n\n/******************************************************************************\n * Module : js.array.statics                                                  *\n ******************************************************************************/\n\n// JavaScript 1.6 / Strawman array statics shim\r\n!function(arrayStatics){\r\n  function setArrayStatics(keys, length){\r\n    forEach.call(array(keys), function(key){\r\n      if(key in ArrayProto)arrayStatics[key] = ctx(call, ArrayProto[key], length);\r\n    });\r\n  }\r\n  setArrayStatics('pop,reverse,shift,keys,values,entries', 1);\r\n  setArrayStatics('indexOf,every,some,forEach,map,filter,find,findIndex,includes', 3);\r\n  setArrayStatics('join,slice,concat,push,splice,unshift,sort,lastIndexOf,' +\r\n                  'reduce,reduceRight,copyWithin,fill,turn');\r\n  $define(STATIC, ARRAY, arrayStatics);\r\n}({});\n\n/******************************************************************************\n * Module : web.dom.itarable                                                  *\n ******************************************************************************/\n\n!function(NodeList){\r\n  if(framework && NodeList && !(SYMBOL_ITERATOR in NodeList[PROTOTYPE])){\r\n    hidden(NodeList[PROTOTYPE], SYMBOL_ITERATOR, Iterators[ARRAY]);\r\n  }\r\n  Iterators.NodeList = Iterators[ARRAY];\r\n}(global.NodeList);\n\n/******************************************************************************\n * Module : core.log                                                          *\n ******************************************************************************/\n\n!function(log, enabled){\r\n  // Methods from https://github.com/DeveloperToolsWG/console-object/blob/master/api.md\r\n  forEach.call(array('assert,clear,count,debug,dir,dirxml,error,exception,' +\r\n      'group,groupCollapsed,groupEnd,info,isIndependentlyComposed,log,' +\r\n      'markTimeline,profile,profileEnd,table,time,timeEnd,timeline,' +\r\n      'timelineEnd,timeStamp,trace,warn'), function(key){\r\n    log[key] = function(){\r\n      if(enabled && key in console)return apply.call(console[key], console, arguments);\r\n    };\r\n  });\r\n  $define(GLOBAL + FORCED, {log: assign(log.log, log, {\r\n    enable: function(){\r\n      enabled = true;\r\n    },\r\n    disable: function(){\r\n      enabled = false;\r\n    }\r\n  })});\r\n}({}, true);\n}(typeof self != 'undefined' && self.Math === Math ? self : Function('return this')(), false);\nmodule.exports = { \"default\": module.exports, __esModule: true };\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/babel-runtime/core-js.js\n ** module id = 9\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///../~/babel-runtime/core-js.js?");

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nexports[\"default\"] = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nexports.__esModule = true;\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/babel-runtime/helpers/class-call-check.js\n ** module id = 10\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///../~/babel-runtime/helpers/class-call-check.js?");

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nexports[\"default\"] = (function () {\n  function defineProperties(target, props) {\n    for (var key in props) {\n      var prop = props[key];\n      prop.configurable = true;\n      if (prop.value) prop.writable = true;\n    }\n\n    Object.defineProperties(target, props);\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n})();\n\nexports.__esModule = true;\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/babel-runtime/helpers/create-class.js\n ** module id = 11\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///../~/babel-runtime/helpers/create-class.js?");

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	eval("module.exports = function() { throw new Error(\"define cannot be used indirect\"); };\r\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/amd-define.js\n ** module id = 12\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///(webpack)/buildin/amd-define.js?");

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;\r\n\n/* WEBPACK VAR INJECTION */}.call(exports, {}))\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/amd-options.js\n ** module id = 13\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///(webpack)/buildin/amd-options.js?");

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	eval("module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/module.js\n ** module id = 14\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///(webpack)/buildin/module.js?");

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	eval("/*jshint unused:false */\n\n//    Teoria.js\n//    http://saebekassebil.github.com/teoria\n//    Copyright Jakob Miland (saebekassebil)\n//    Teoria may be freely distributed under the MIT License.\n\n(function teoriaScope() {\n  'use strict';\n\n  var teoria = {};\n\n  function add(note, interval) {\n    return [note[0] + interval[0], note[1] + interval[1]];\n  }\n\n  function sub(note, interval) {\n    return [note[0] - interval[0], note[1] - interval[1]];\n  }\n\n  function mul(note, interval) {\n    if (typeof interval === 'number')\n      return [note[0] * interval, note[1] * interval];\n    else\n      return [note[0] * interval[0], note[1] * interval[1]];\n  }\n\n  function sum(coord) {\n    return coord[0] + coord[1];\n  }\n\n  // Note coordinates [octave, fifth] relative to C\n  var notes = {\n    c: [0, 0],\n    d: [-1, 2],\n    e: [-2, 4],\n    f: [1, -1],\n    g: [0, 1],\n    a: [-1, 3],\n    b: [-2, 5],\n    h: [-2, 5]\n  };\n\n  var intervals = {\n    unison: [0, 0],\n    second: [3, -5],\n    third: [2, -3],\n    fourth: [1, -1],\n    fifth: [0, 1],\n    sixth: [3, -4],\n    seventh: [2, -2],\n    octave: [1, 0]\n  };\n\n  var intervalFromFifth = ['second', 'sixth', 'third', 'seventh', 'fourth',\n                           'unison', 'fifth'];\n\n  var intervalsIndex = ['unison', 'second', 'third', 'fourth', 'fifth',\n                        'sixth', 'seventh', 'octave', 'ninth', 'tenth',\n                        'eleventh', 'twelfth', 'thirteenth', 'fourteenth',\n                        'fifteenth'];\n\n  // linaer index to fifth = (2 * index + 1) % 7\n  var fifths = ['f', 'c', 'g', 'd', 'a', 'e', 'b'];\n  var accidentals = ['bb', 'b', '', '#', 'x'];\n\n  var sharp = [-4, 7];\n  var A4 = add(notes.a, [4, 0]);\n\n  var kDurations = {\n    '0.25': 'longa',\n    '0.5': 'breve',\n    '1': 'whole',\n    '2': 'half',\n    '4': 'quarter',\n    '8': 'eighth',\n    '16': 'sixteenth',\n    '32': 'thirty-second',\n    '64': 'sixty-fourth',\n    '128': 'hundred-twenty-eighth'\n  };\n\n  var kQualityLong = {\n    P: 'perfect',\n    M: 'major',\n    m: 'minor',\n    A: 'augmented',\n    AA: 'doubly augmented',\n    d: 'diminished',\n    dd: 'doubly diminished'\n  };\n\n  var kAlterations = {\n    perfect: ['dd', 'd', 'P', 'A', 'AA'],\n    minor: ['dd', 'd', 'm', 'M', 'A', 'AA']\n  };\n\n  var kSymbols = {\n    'min': ['m3', 'P5'],\n    'm': ['m3', 'P5'],\n    '-': ['m3', 'P5'],\n\n    'M': ['M3', 'P5'],\n    '': ['M3', 'P5'],\n\n    '+': ['M3', 'A5'],\n    'aug': ['M3', 'A5'],\n\n    'dim': ['m3', 'd5'],\n    'o': ['m3', 'd5'],\n\n    'maj': ['M3', 'P5', 'M7'],\n    'dom': ['M3', 'P5', 'm7'],\n    'ø': ['m3', 'd5', 'm7'],\n\n    '5': ['P5']\n  };\n\n  var kChordShort = {\n    'major': 'M',\n    'minor': 'm',\n    'augmented': 'aug',\n    'diminished': 'dim',\n    'half-diminished': '7b5',\n    'power': '5',\n    'dominant': '7'\n  };\n\n  var kStepNumber = {\n    'unison': 1,\n    'first': 1,\n    'second': 2,\n    'third': 3,\n    'fourth': 4,\n    'fifth': 5,\n    'sixth': 6,\n    'seventh': 7,\n    'octave': 8,\n    'ninth': 9,\n    'eleventh': 11,\n    'thirteenth': 13\n  };\n\n  // Adjusted Shearer syllables - Chromatic solfege system\n  // Some intervals are not provided for. These include:\n  // dd2 - Doubly diminished second\n  // dd3 - Doubly diminished third\n  // AA3 - Doubly augmented third\n  // dd6 - Doubly diminished sixth\n  // dd7 - Doubly diminished seventh\n  // AA7 - Doubly augmented seventh\n  var kIntervalSolfege = {\n    'dd1': 'daw',\n    'd1': 'de',\n    'P1': 'do',\n    'A1': 'di',\n    'AA1': 'dai',\n    'd2': 'raw',\n    'm2': 'ra',\n    'M2': 're',\n    'A2': 'ri',\n    'AA2': 'rai',\n    'd3': 'maw',\n    'm3': 'me',\n    'M3': 'mi',\n    'A3': 'mai',\n    'dd4': 'faw',\n    'd4': 'fe',\n    'P4': 'fa',\n    'A4': 'fi',\n    'AA4': 'fai',\n    'dd5': 'saw',\n    'd5': 'se',\n    'P5': 'so',\n    'A5': 'si',\n    'AA5': 'sai',\n    'd6': 'law',\n    'm6': 'le',\n    'M6': 'la',\n    'A6': 'li',\n    'AA6': 'lai',\n    'd7': 'taw',\n    'm7': 'te',\n    'M7': 'ti',\n    'A7': 'tai',\n    'dd8': 'daw',\n    'd8': 'de',\n    'P8': 'do',\n    'A8': 'di',\n    'AA8': 'dai'\n  };\n\n  function pad(str, ch, len) {\n    for (; len > 0; len--) {\n      str += ch;\n    }\n\n    return str;\n  }\n\n  // teoria.note namespace - All notes should be instantiated\n  // through this function.\n  teoria.note = function(name, duration) {\n    if (typeof name === 'string')\n      return teoria.note.fromString(name, duration);\n    else\n      return new TeoriaNote(name, duration);\n  };\n\n  teoria.note.fromKey = function(key) {\n    var octave = Math.floor((key - 4) / 12);\n    var distance = key - (octave * 12) - 4;\n    var name = fifths[(2 * Math.round(distance / 2) + 1) % 7];\n    var note = add(sub(notes[name], A4), [octave + 1, 0]);\n    var diff = (key - 49) - sum(mul(note, [12, 7]));\n\n    return teoria.note(diff ? add(note, mul(sharp, diff)) : note);\n  };\n\n  teoria.note.fromFrequency = function(fq, concertPitch) {\n    var key, cents, originalFq;\n    concertPitch = concertPitch || 440;\n\n    key = 49 + 12 * ((Math.log(fq) - Math.log(concertPitch)) / Math.log(2));\n    key = Math.round(key);\n    originalFq = concertPitch * Math.pow(2, (key - 49) / 12);\n    cents = 1200 * (Math.log(fq / originalFq) / Math.log(2));\n\n    return { note: teoria.note.fromKey(key), cents: cents };\n  };\n\n  teoria.note.fromMIDI = function(note) {\n    return teoria.note.fromKey(note - 20);\n  };\n\n  teoria.note.fromString = function(name, dur) {\n    var scientific = /^([a-h])(x|#|bb|b?)(-?\\d*)/i\n      , helmholtz = /^([a-h])(x|#|bb|b?)([,\\']*)$/i\n      , parser, noteName, octave, accidental, note, lower;\n\n    // Try scientific notation first\n    parser = name.match(scientific);\n    if (parser && name === parser[0] && parser[3].length) {\n      noteName = parser[1];\n      octave = +parser[3];\n    } else {\n      name = name.replace(/\\u2032/g, \"'\").replace(/\\u0375/g, ',');\n\n      parser = name.match(helmholtz);\n      if (!parser || name !== parser[0])\n        throw new Error('Invalid note format');\n\n      noteName = parser[1];\n      octave = parser[3];\n      lower = noteName === noteName.toLowerCase();\n\n      if (!octave.length)\n        octave = lower ? 3 : 2;\n      else if (octave.match(/^'+$/) && lower)\n        octave = 3 + octave.length;\n      else if (octave.match(/^,+$/) && !lower)\n        octave = 2 - octave.length;\n      else\n        throw new Error('Format must respect the Helmholtz format');\n    }\n\n    accidental = parser[2].length ? parser[2].toLowerCase() : '';\n    noteName = noteName.toLowerCase();\n\n    note = [notes[noteName][0], notes[noteName][1]];\n    note = add(note, [octave, 0]);\n    note = add(note, mul(sharp, accidentals.indexOf(accidental) - 2));\n\n    return new TeoriaNote(sub(note, A4), dur);\n  };\n\n  // teoria.chord namespace - All chords should be instantiated\n  // through this function.\n  teoria.chord = function(name, symbol) {\n    if (typeof name === 'string') {\n      var root, octave;\n      root = name.match(/^([a-h])(x|#|bb|b?)/i);\n      if (root && root[0]) {\n        octave = typeof symbol === 'number' ? symbol.toString(10) : '4';\n        return new TeoriaChord(teoria.note(root[0].toLowerCase() + octave),\n                              name.substr(root[0].length));\n      }\n    } else if (name instanceof TeoriaNote)\n      return new TeoriaChord(name, symbol);\n\n    throw new Error('Invalid Chord. Couldn\\'t find note name');\n  };\n\n  /**\n   * teoria.interval\n   *\n   * Sugar function for #from and #between methods, with the possibility to\n   * declare a interval by its string name: P8, M3, m7 etc.\n   */\n  teoria.interval = function(from, to) {\n    // Construct a TeoriaInterval object from string representation\n    if (typeof from === 'string')\n      return teoria.interval.toCoord(from);\n\n    if (typeof to === 'string' && from instanceof TeoriaNote)\n      return teoria.interval.from(from, teoria.interval.toCoord(to));\n\n    if (to instanceof TeoriaInterval && from instanceof TeoriaNote)\n      return teoria.interval.from(from, to);\n\n    if (to instanceof TeoriaNote && from instanceof TeoriaNote)\n      return teoria.interval.between(from, to);\n\n    throw new Error('Invalid parameters');\n  };\n\n  teoria.interval.toCoord = function(simple) {\n    var pattern = /^(AA|A|P|M|m|d|dd)(-?\\d+)$/\n      , parser, number, coord, quality, lower, octaves, base, type, alt, down;\n\n    parser = simple.match(pattern);\n    if (!parser)\n      throw new Error('Invalid simple format interval');\n\n    quality = parser[1];\n    number = +parser[2];\n    down = number < 0;\n    number = down ? -number : number;\n\n    lower = number > 8 ? ((number % 7) ? number % 7 : 7) : number;\n    octaves = (number - lower) / 7;\n\n    base = intervals[intervalsIndex[lower - 1]];\n    coord = add(base, [octaves, 0]);\n\n    type = base[0] <= 1 ? 'perfect' : 'minor';\n    if ((type === 'perfect' && (quality === 'M' || quality === 'm')) ||\n        (type === 'minor' && quality === 'P')) {\n      throw new Error('Invalid interval quality');\n    }\n\n    alt = kAlterations[type].indexOf(quality) - 2;\n    coord = add(coord, mul(sharp, alt));\n    coord = down ? mul(coord, -1) : coord;\n\n    return new TeoriaInterval(coord);\n  };\n\n  /**\n   * Returns the note from a given note (from), with a given interval (to)\n   */\n  teoria.interval.from = function(from, to) {\n    return new TeoriaNote(add(from.coord, to.coord));\n  };\n\n  /**\n   * Returns the interval between two instances of teoria.note\n   */\n  teoria.interval.between = function(from, to) {\n    return new TeoriaInterval(sub(to.coord, from.coord));\n  };\n\n  teoria.interval.invert = function(sInterval) {\n    return teoria.interval(sInterval).invert().toString();\n  };\n\n  // teoria.scale namespace - Scales are constructed through this function.\n  teoria.scale = function(tonic, scale) {\n    if (!(tonic instanceof TeoriaNote))\n      tonic = teoria.note(tonic);\n\n    return new TeoriaScale(tonic, scale);\n  };\n\n  teoria.scale.scales = {};\n\n  function TeoriaNote(coord, duration) {\n    duration = duration || {};\n\n    this.duration = { value: duration.value || 4, dots: duration.dots || 0 };\n    this.coord = coord;\n  }\n\n  TeoriaNote.prototype = {\n    octave: function() {\n      return this.coord[0] + A4[0] - notes[this.name()][0] +\n        this.accidentalValue() * 4;\n    },\n\n    name: function() {\n      return fifths[this.coord[1] + A4[1] - this.accidentalValue() * 7 + 1];\n    },\n\n    accidentalValue: function() {\n      return Math.round((this.coord[1] + A4[1] - 2) / 7);\n    },\n\n    accidental: function() {\n      return accidentals[this.accidentalValue() + 2];\n    },\n\n    /**\n     * Returns the key number of the note\n     */\n    key: function(white) {\n      if (white)\n        return this.coord[0] * 7 + this.coord[1] * 4 + 29;\n      else\n        return this.coord[0] * 12 + this.coord[1] * 7 + 49;\n    },\n\n    /**\n    * Returns a number ranging from 0-127 representing a MIDI note value\n    */\n    midi: function() {\n      return this.key() + 20;\n    },\n\n    /**\n     * Calculates and returns the frequency of the note.\n     * Optional concert pitch (def. 440)\n     */\n    fq: function(concertPitch) {\n      concertPitch = concertPitch || 440;\n\n      return concertPitch *\n        Math.pow(2, (this.coord[0] * 12 + this.coord[1] * 7) / 12);\n    },\n\n    /**\n     * Returns the pitch class index (chroma) of the note\n     */\n    chroma: function() {\n      var value = (sum(mul(this.coord, [12, 7])) - 3) % 12;\n\n      return (value < 0) ? value + 12 : value;\n    },\n\n    /**\n     * Sugar function for teoria.scale(note, scale)\n     */\n    scale: function(scale) {\n      return teoria.scale(this, scale);\n    },\n\n    /**\n     * Sugar function for teoria.interval(note, interval)\n     */\n    interval: function(interval) {\n      return teoria.interval(this, interval);\n    },\n\n    /**\n     * Transposes the note, returned by TeoriaNote#interval\n     */\n    transpose: function(interval) {\n      var note = teoria.interval(this, interval);\n      this.coord = note.coord;\n\n      return this;\n    },\n\n    /**\n     * Returns a TeoriaChord object with this note as root\n     */\n    chord: function(chord) {\n      chord = (chord in kChordShort) ? kChordShort[chord] : chord;\n\n      return new TeoriaChord(this, chord);\n    },\n\n    /**\n     * Returns the Helmholtz notation form of the note (fx C,, d' F# g#'')\n     */\n    helmholtz: function() {\n      var octave = this.octave();\n      var name = this.name();\n      name = octave < 3 ? name.toUpperCase() : name.toLowerCase();\n      var padchar = octave < 3 ? ',' : '\\'';\n      var padcount = octave < 2 ? 2 - octave : octave - 3;\n\n      return pad(name + this.accidental(), padchar, padcount);\n    },\n\n    /**\n     * Returns the scientific notation form of the note (fx E4, Bb3, C#7 etc.)\n     */\n    scientific: function() {\n      return this.name().toUpperCase() + this.accidental() + this.octave();\n    },\n\n    /**\n     * Returns notes that are enharmonic with this note.\n     */\n    enharmonics: function(oneaccidental) {\n      var key = this.key(), limit = oneaccidental ? 2 : 3;\n\n      return ['m3', 'm2', 'm-2', 'm-3']\n        .map(this.interval.bind(this))\n        .filter(function(note) {\n        var acc = note.accidentalValue();\n        var diff = key - (note.key() - acc);\n\n        if (diff < limit && diff > -limit) {\n          note.coord = add(note.coord, mul(sharp, diff - acc));\n          return true;\n        }\n      });\n    },\n\n    solfege: function(scale, showOctaves) {\n      if (!(scale instanceof TeoriaScale)) {\n        throw new Error('Invalid Scale');\n      }\n\n      var interval = scale.tonic.interval(this), solfege, stroke, count;\n      if (interval.direction() === 'down')\n        interval = interval.invert();\n\n      if (showOctaves) {\n        count = (this.key(true) - scale.tonic.key(true)) / 7;\n        count = (count >= 0) ? Math.floor(count) : -(Math.ceil(-count));\n        stroke = (count >= 0) ? '\\'' : ',';\n      }\n\n      solfege = kIntervalSolfege[interval.simple(true).toString()];\n      return (showOctaves) ? pad(solfege, stroke, Math.abs(count)) : solfege;\n    },\n\n    /**\n     * Returns the name of the duration value,\n     * such as 'whole', 'quarter', 'sixteenth' etc.\n     */\n    durationName: function() {\n      return kDurations[this.duration.value];\n    },\n\n    /**\n     * Returns the duration of the note (including dots)\n     * in seconds. The first argument is the tempo in beats\n     * per minute, the second is the beat unit (i.e. the\n     * lower numeral in a time signature).\n     */\n    durationInSeconds: function(bpm, beatUnit) {\n      var secs = (60 / bpm) / (this.duration.value / 4) / (beatUnit / 4);\n      return secs * 2 - secs / Math.pow(2, this.duration.dots);\n    },\n\n    /**\n     * Returns the degree of this note in a given scale\n     * If the scale doesn't contain this note, the scale degree\n     * will be returned as 0 allowing for expressions such as:\n     * if (teoria.note('a').scaleDegree(teoria.scale('a', 'major'))) {\n     *   ...\n     * }\n     *\n     * as 0 evaluates to false in boolean context\n     **/\n    scaleDegree: function(scale) {\n      var inter = scale.tonic.interval(this);\n\n      // If the direction is down, or we're dealing with an octave - invert it\n      if (inter.direction() === 'down' ||\n         (inter.coord[1] === 0 && inter.coord[0] !== 0)) {\n        inter = inter.invert();\n      }\n\n      inter = inter.simple(true).coord;\n\n      return scale.scale.reduce(function(index, current, i) {\n        var coord = teoria.interval(current).coord;\n        return coord[0] === inter[0] && coord[1] === inter[1] ? i + 1 : index;\n      }, 0);\n    },\n\n    /**\n     * Returns the name of the note, with an optional display of octave number\n     */\n    toString: function(dont) {\n      return this.name() + this.accidental() + (dont ? '' : this.octave());\n    }\n  };\n\n\n  function TeoriaInterval(coord) {\n    this.coord = coord;\n  }\n\n  TeoriaInterval.prototype = {\n    name: function() {\n      return intervalsIndex[this.number() - 1];\n    },\n\n    semitones: function() {\n      return sum(mul(this.coord, [12, 7]));\n    },\n\n    number: function() {\n      return Math.abs(this.value());\n    },\n\n    value: function() {\n      var without = sub(this.coord,\n        mul(sharp, Math.floor((this.coord[1] - 2) / 7) + 1))\n        , i, val;\n\n      i = intervalFromFifth[without[1] + 5];\n      val = kStepNumber[i] + (without[0] - intervals[i][0]) * 7;\n\n      return (val > 0) ? val : val - 2;\n    },\n\n    type: function() {\n      return intervals[this.base()][0] <= 1 ? 'perfect' : 'minor';\n    },\n\n    base: function() {\n      var fifth = sub(this.coord, mul(sharp, this.qualityValue()))[1], name;\n      fifth = this.value() > 0 ? fifth + 5 : -(fifth - 5) % 7;\n      fifth = fifth < 0 ? intervalFromFifth.length + fifth : fifth;\n\n      name = intervalFromFifth[fifth];\n      if (name === 'unison' && this.number() >= 8)\n        name = 'octave';\n\n      return name;\n    },\n\n    direction: function(dir) {\n      if (dir) {\n        var is = this.value() >= 1 ? 'up' : 'down';\n        if (is !== dir)\n          this.coord = mul(this.coord, -1);\n\n        return this;\n      }\n      else\n        return this.value() >= 1 ? 'up' : 'down';\n    },\n\n    simple: function(ignore) {\n      // Get the (upwards) base interval (with quality)\n      var simple = intervals[this.base()];\n      simple = add(simple, mul(sharp, this.qualityValue()));\n\n      // Turn it around if necessary\n      if (!ignore)\n        simple = this.direction() === 'down' ? mul(simple, -1) : simple;\n\n      return new TeoriaInterval(simple);\n    },\n\n    isCompound: function() {\n      return this.number() > 8;\n    },\n\n    octaves: function() {\n      var without, octaves;\n\n      if (this.direction() === 'up') {\n        without = sub(this.coord, mul(sharp, this.qualityValue()));\n        octaves = without[0] - intervals[this.base()][0];\n      } else {\n        without = sub(this.coord, mul(sharp, -this.qualityValue()));\n        octaves = -(without[0] + intervals[this.base()][0]);\n      }\n\n      return octaves;\n    },\n\n    invert: function() {\n      var i = this.base();\n      var qual = this.qualityValue();\n      var acc = this.type() === 'minor' ? -(qual - 1) : -qual;\n      var coord = intervals[intervalsIndex[9 - kStepNumber[i] - 1]];\n      coord = add(coord, mul(sharp, acc));\n\n      return new TeoriaInterval(coord);\n    },\n\n    quality: function(lng) {\n      var quality = kAlterations[this.type()][this.qualityValue() + 2];\n\n      return lng ? kQualityLong[quality] : quality;\n    },\n\n    qualityValue: function() {\n      if (this.direction() === 'down')\n        return Math.floor((-this.coord[1] - 2) / 7) + 1;\n      else\n        return Math.floor((this.coord[1] - 2) / 7) + 1;\n    },\n\n    equal: function(interval) {\n        return this.coord[0] === interval.coord[0] &&\n            this.coord[1] === interval.coord[1];\n    },\n\n    greater: function(interval) {\n      var semi = this.semitones();\n      var isemi = interval.semitones();\n\n      // If equal in absolute size, measure which interval is bigger\n      // For example P4 is bigger than A3\n      return (semi === isemi) ?\n        (this.number() > interval.number()) : (semi > isemi);\n    },\n\n    smaller: function(interval) {\n      return !this.equal(interval) && !this.greater(interval);\n    },\n\n    add: function(interval) {\n      return new TeoriaInterval(add(this.coord, interval.coord));\n    },\n\n    toString: function(ignore) {\n      // If given true, return the positive value\n      var number = ignore ? this.number() : this.value();\n\n      return this.quality() + number;\n    }\n  };\n\n\n  function TeoriaChord(root, name) {\n    name = name || '';\n    this.name = root.name().toUpperCase() + root.accidental() + name;\n    this.symbol = name;\n    this.root = root;\n    this.intervals = [];\n    this._voicing = [];\n\n    var i, length, c, shortQ, parsing = 'quality', additionals = [],\n        notes = ['P1', 'M3', 'P5', 'm7', 'M9', 'P11', 'M13'],\n        chordLength = 2, bass, symbol;\n\n    function setChord(intervals) {\n      for (var n = 0, chordl = intervals.length; n < chordl; n++) {\n        notes[n + 1] = intervals[n];\n      }\n\n      chordLength = intervals.length;\n    }\n\n    // Remove whitespace, commas and parentheses\n    name = name.replace(/[,\\s\\(\\)]/g, '');\n    bass = name.split('/');\n    if (bass.length === 2) {\n      name = bass[0];\n      bass = bass[1];\n    } else {\n      bass = null;\n    }\n\n    for (i = 0, length = name.length; i < length; i++) {\n      if (!(c = name[i])) {\n        break;\n      }\n\n      switch (parsing) {\n        // Parses for the \"base\" chord, either a triad or a seventh chord\n        case 'quality':\n          shortQ = ((i + 3) <= length) ? name.substr(i, 3).toLowerCase() : null;\n          symbol = (shortQ in kSymbols) ?\n            shortQ : (c in kSymbols) ? c : '';\n\n          setChord(kSymbols[symbol]);\n\n          i += symbol.length - 1;\n          parsing = 'extension';\n          break;\n\n        // Parses for the top interval or a pure sixth\n        case 'extension':\n          c = (c === '1' && name[i + 1]) ?\n            parseFloat(name.substr(i, 2)) : parseFloat(c);\n\n          if (!isNaN(c) && c !== 6) {\n            chordLength = (c - 1) / 2;\n\n            if (chordLength !== Math.round(chordLength)) {\n              throw new Error('Invalid interval extension: ' + c.toString(10));\n            }\n\n            // Special care for diminished chords\n            if (symbol === 'o' || symbol === 'dim') {\n              notes[3] = 'd7';\n            }\n\n            i += String(c).length - 1;\n          } else if (c === 6) {\n            notes[3] = 'M6';\n            chordLength = (chordLength < 3) ? 3 : chordLength;\n          } else {\n            i -= 1;\n          }\n\n          parsing = 'alterations';\n          break;\n\n        // Parses for possible alterations of intervals (#5, b9, etc.)\n        case 'alterations':\n          var alterations = name.substr(i).split(/(#|b|add|maj|sus|M)/i),\n              next, flat = false, sharp = false;\n\n          if (alterations.length === 1) {\n            throw new Error('Invalid alterations');\n          } else if (alterations[0].length !== 0) {\n            throw new Error('Invalid token: \\'' + alterations[0] + '\\'');\n          }\n\n          for (var a = 1, aLength = alterations.length; a < aLength; a++) {\n            next = alterations[a + 1];\n\n            switch (alterations[a]) {\n            case 'M':\n            case 'Maj':\n            case 'maj':\n              chordLength = (chordLength < 3) ? 3 : chordLength;\n\n              if (next === '7') { // Ignore the seventh, that is already implied\n                a++;\n              }\n\n              notes[3] = 'M7';\n              break;\n\n            case 'Sus':\n            case 'sus':\n              var type = 'P4';\n              if (next === '2' || next === '4') {\n                a++;\n\n                if (next === '2') {\n                  type = 'M2';\n                }\n              }\n\n              notes[1] = type; // Replace third with M2 or P4\n              break;\n\n            case 'Add':\n            case 'add':\n              if (next && !isNaN(+next)) {\n                if (next === '9') {\n                  additionals.push('M9');\n                } else if (next === '11') {\n                  additionals.push('P11');\n                } else if (next === '13') {\n                  additionals.push('M13');\n                }\n\n                a += next.length;\n              }\n              break;\n\n            case 'b':\n              flat = true;\n              break;\n\n            case '#':\n              sharp = true;\n              break;\n\n            default:\n              if (alterations[a].length === 0) {\n                break;\n              }\n\n              var token = +alterations[a], quality, intPos;\n              if (isNaN(token) ||\n                  String(token).length !== alterations[a].length) {\n                throw new Error('Invalid token: \\'' + alterations[a] + '\\'');\n              }\n\n              if (token === 6) {\n                if (sharp) {\n                  notes[3] = 'A6';\n                } else if (flat) {\n                  notes[3] = 'm6';\n                } else {\n                  notes[3] = 'M6';\n                }\n\n                chordLength = (chordLength < 3) ? 3 : chordLength;\n                continue;\n              }\n\n              // Calculate the position in the 'note' array\n              intPos = (token - 1) / 2;\n              if (chordLength < intPos) {\n                chordLength = intPos;\n              }\n\n              if (token < 5 || token === 7 ||\n                  intPos !== Math.round(intPos)) {\n                throw new Error('Invalid interval alteration: ' + token);\n              }\n\n              quality = notes[intPos][0];\n\n              // Alterate the quality of the interval according the accidentals\n              if (sharp) {\n                if (quality === 'd') {\n                  quality = 'm';\n                } else if (quality === 'm') {\n                  quality = 'M';\n                } else if (quality === 'M' || quality === 'P') {\n                  quality = 'A';\n                }\n              } else if (flat) {\n                if (quality === 'A') {\n                  quality = 'M';\n                } else if (quality === 'M') {\n                  quality = 'm';\n                } else if (quality === 'm' || quality === 'P') {\n                  quality = 'd';\n                }\n              }\n\n              sharp = flat = false;\n              notes[intPos] = quality + token;\n              break;\n            }\n          }\n\n          parsing = 'ended';\n          break;\n      }\n\n      if (parsing === 'ended') {\n        break;\n      }\n    }\n\n    // Sixth-nine chord is an exception to the bass rule (e.g. C6/9)\n    if (bass && bass === '9') {\n      additionals.push('M9');\n      bass = null;\n    }\n\n    this.intervals = notes\n      .slice(0, chordLength + 1)\n      .concat(additionals)\n      .map(function(i) { return teoria.interval(i); });\n\n    for (i = 0, length = this.intervals.length; i < length; i++) {\n      this._voicing[i] = this.intervals[i];\n    }\n\n    if (bass) {\n      var intervals = this.intervals, bassInterval, note;\n      // Make sure the bass is atop of the root note\n      note = teoria.note(bass + (root.octave() + 1));\n\n      bassInterval = teoria.interval.between(root, note);\n      bass = bassInterval.simple();\n\n      bassInterval = bassInterval.invert();\n      bassInterval.direction('down');\n\n      this._voicing = [bassInterval];\n      for (i = 0; i < length; i++) {\n        if (intervals[i].simple().equal(bass))\n          continue;\n\n        this._voicing.push(intervals[i]);\n      }\n    }\n  }\n\n  TeoriaChord.prototype = {\n    notes: function() {\n      var voicing = this.voicing(), notes = [];\n\n      for (var i = 0, length = voicing.length; i < length; i++) {\n        notes.push(teoria.interval.from(this.root, voicing[i]));\n      }\n\n      return notes;\n    },\n\n    voicing: function(voicing) {\n      // Get the voicing\n      if (!voicing) {\n        return this._voicing;\n      }\n\n      // Set the voicing\n      this._voicing = [];\n      for (var i = 0, length = voicing.length; i < length; i++) {\n        this._voicing[i] = teoria.interval(voicing[i]);\n      }\n\n      return this;\n    },\n\n    resetVoicing: function() {\n      this._voicing = this.intervals;\n    },\n\n    dominant: function(additional) {\n      additional = additional || '';\n      return new TeoriaChord(this.root.interval('P5'), additional);\n    },\n\n    subdominant: function(additional) {\n      additional = additional || '';\n      return new TeoriaChord(this.root.interval('P4'), additional);\n    },\n\n    parallel: function(additional) {\n      additional = additional || '';\n      var quality = this.quality();\n\n      if (this.chordType() !== 'triad' || quality === 'diminished' ||\n          quality === 'augmented') {\n        throw new Error('Only major/minor triads have parallel chords');\n      }\n\n      if (quality === 'major') {\n        return new TeoriaChord(this.root.interval('m3', 'down'), 'm');\n      } else {\n        return new TeoriaChord(this.root.interval('m3', 'up'));\n      }\n    },\n\n    quality: function() {\n      var third, fifth, seventh, intervals = this.intervals;\n\n      for (var i = 0, length = intervals.length; i < length; i++) {\n        if (intervals[i].number() === 3) {\n          third = intervals[i];\n        } else if (intervals[i].number() === 5) {\n          fifth = intervals[i];\n        } else if (intervals[i].number() === 7) {\n          seventh = intervals[i];\n        }\n      }\n\n      if (!third) {\n        return;\n      }\n\n      third = (third.direction() === 'down') ? third.invert() : third;\n      third = third.simple().toString();\n\n      if (fifth) {\n        fifth = (fifth.direction === 'down') ? fifth.invert() : fifth;\n        fifth = fifth.simple().toString();\n      }\n\n      if (seventh) {\n        seventh = (seventh.direction === 'down') ? seventh.invert() : seventh;\n        seventh = seventh.simple().toString();\n      }\n\n      if (third === 'M3') {\n        if (fifth === 'A5') {\n          return 'augmented';\n        } else if (fifth === 'P5') {\n          return (seventh === 'm7') ? 'dominant' : 'major';\n        }\n\n        return 'major';\n      } else if (third === 'm3') {\n        if (fifth === 'P5') {\n          return 'minor';\n        } else if (fifth === 'd5') {\n          return (seventh === 'm7') ? 'half-diminished' : 'diminished';\n        }\n\n        return 'minor';\n      }\n    },\n\n    chordType: function() { // In need of better name\n      var length = this.intervals.length, interval, has, invert, i, name;\n\n      if (length === 2) {\n        return 'dyad';\n      } else if (length === 3) {\n        has = {first: false, third: false, fifth: false};\n        for (i = 0; i < length; i++) {\n          interval = this.intervals[i];\n          invert = interval.invert();\n          if (interval.base() in has) {\n            has[interval.base()] = true;\n          } else if (invert.base() in has) {\n            has[invert.base()] = true;\n          }\n        }\n\n        name = (has.first && has.third && has.fifth) ? 'triad' : 'trichord';\n      } else if (length === 4) {\n        has = {first: false, third: false, fifth: false, seventh: false};\n        for (i = 0; i < length; i++) {\n          interval = this.intervals[i];\n          invert = interval.invert();\n          if (interval.base() in has) {\n            has[interval.base()] = true;\n          } else if (invert.base() in has) {\n            has[invert.base()] = true;\n          }\n        }\n\n        if (has.first && has.third && has.fifth && has.seventh) {\n          name = 'tetrad';\n        }\n      }\n\n      return name || 'unknown';\n    },\n\n    get: function(interval) {\n      if (typeof interval === 'string' && interval in kStepNumber) {\n        var intervals = this.intervals, i, length;\n\n        interval = kStepNumber[interval];\n        for (i = 0, length = intervals.length; i < length; i++) {\n          if (intervals[i].number() === interval) {\n            return teoria.interval.from(this.root, intervals[i]);\n          }\n        }\n\n        return null;\n      } else {\n        throw new Error('Invalid interval name');\n      }\n    },\n\n    interval: function(interval) {\n      return new TeoriaChord(this.root.interval(interval), this.symbol);\n    },\n\n    transpose: function(interval) {\n      this.root.transpose(interval);\n      this.name = this.root.name().toUpperCase() +\n                  this.root.accidental() + this.symbol;\n\n      return this;\n    },\n\n    toString: function() {\n      return this.name;\n    }\n  };\n\n\n  function TeoriaScale(tonic, scale) {\n    var scaleName, i;\n\n    if (!(tonic instanceof TeoriaNote)) {\n      throw new Error('Invalid Tonic');\n    }\n\n    if (typeof scale === 'string') {\n      scaleName = scale;\n      scale = teoria.scale.scales[scale];\n      if (!scale)\n        throw new Error('Invalid Scale');\n    } else {\n      for (i in teoria.scale.scales) {\n        if (teoria.scale.scales.hasOwnProperty(i)) {\n          if (teoria.scale.scales[i].toString() === scale.toString()) {\n            scaleName = i;\n            break;\n          }\n        }\n      }\n    }\n\n    this.name = scaleName;\n    this.tonic = tonic;\n    this.scale = scale;\n  }\n\n  TeoriaScale.prototype = {\n    notes: function() {\n      var notes = [];\n\n      for (var i = 0, length = this.scale.length; i < length; i++) {\n        notes.push(teoria.interval(this.tonic, this.scale[i]));\n      }\n\n      return notes;\n    },\n\n    simple: function() {\n      return this.notes().map(function(n) { return n.toString(true); });\n    },\n\n    type: function() {\n      var length = this.scale.length - 2;\n      if (length < 8) {\n        return ['di', 'tri', 'tetra', 'penta', 'hexa', 'hepta', 'octa'][length] +\n          'tonic';\n      }\n    },\n\n    get: function(i) {\n      i = (typeof i === 'string' && i in kStepNumber) ? kStepNumber[i] : i;\n\n      return this.tonic.interval(this.scale[i - 1]);\n    },\n\n    solfege: function(index, showOctaves) {\n      if (index)\n        return this.get(index).solfege(this, showOctaves);\n\n      return this.notes().map(function(n) {\n        return n.solfege(this, showOctaves);\n      });\n    },\n\n    interval: function(interval) {\n      return new TeoriaScale(this.tonic.interval(interval), this.scale);\n    },\n\n    transpose: function(interval) {\n      var scale = this.interval(interval);\n      this.scale = scale.scale;\n      this.tonic = scale.tonic;\n\n      return this;\n    }\n  };\n\n\n  teoria.scale.scales.ionian = teoria.scale.scales.major =\n    ['P1', 'M2', 'M3', 'P4', 'P5', 'M6', 'M7'];\n  teoria.scale.scales.dorian = ['P1', 'M2', 'm3', 'P4', 'P5', 'M6', 'm7'];\n  teoria.scale.scales.phrygian = ['P1', 'm2', 'm3', 'P4', 'P5', 'm6', 'm7'];\n  teoria.scale.scales.lydian = ['P1', 'M2', 'M3', 'A4', 'P5', 'M6', 'M7'];\n  teoria.scale.scales.mixolydian = ['P1', 'M2', 'M3', 'P4', 'P5', 'M6', 'm7'];\n  teoria.scale.scales.aeolian = teoria.scale.scales.minor =\n    ['P1', 'M2', 'm3', 'P4', 'P5', 'm6', 'm7'];\n  teoria.scale.scales.locrian = ['P1', 'm2', 'm3', 'P4', 'd5', 'm6', 'm7'];\n  teoria.scale.scales.majorpentatonic = ['P1', 'M2', 'M3', 'P5', 'M6'];\n  teoria.scale.scales.minorpentatonic = ['P1', 'm3', 'P4', 'P5', 'm7'];\n  teoria.scale.scales.chromatic = teoria.scale.scales.harmonicchromatic =\n    ['P1', 'm2', 'M2', 'm3', 'M3', 'P4', 'A4', 'P5', 'm6', 'M6', 'm7', 'M7'];\n\n\n  teoria.TeoriaNote = TeoriaNote;\n  teoria.TeoriaChord = TeoriaChord;\n  teoria.TeoriaScale = TeoriaScale;\n  teoria.TeoriaInterval = TeoriaInterval;\n\n  if (true) {\n    if (typeof module !== 'undefined' && module.exports)\n      exports = module.exports = teoria;\n\n    exports.teoria = teoria;\n  } else if (typeof this !== 'undefined')\n    this.teoria = teoria;\n  else if (typeof window !== 'undefined')\n    window.teoria = teoria;\n})();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/teoria/dist/teoria.js\n ** module id = 15\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///../~/teoria/dist/teoria.js?");

/***/ }
/******/ ])